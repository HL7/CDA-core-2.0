
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <script src="../../support/js/tree.js" type="text/javascript"></script><script src="../../support/js/setTopFrameText.js" type="text/javascript"></script><script type="text/javascript">
			if (find('heading')) setHeadingTextFromFileName(document.location.href);
			</script><title>Data Types - Abstract Specification</title>
      <link rel="stylesheet" type="text/css" href="../../support/css/V3m.css"><style type="text/css"></style></head>
   <body>
      <table class="header">
         <tr>
            <td width="100%" colspan="3">
               <h1>Data Types - Abstract Specification</h1>
            </td>
         </tr>
         <tr>
            <td colspan="3" valign="middle">
               <table cellspacing="0" cellpadding="3" border="1">
                  <tr>
                     <td align="center"><img src="../../support/graphics/ansilogo.gif" alt="ANSI"><br>ANSI/HL7 V3 DT, R1-2004<br>11/29/2004<img width="5" src="../../support/graphics/spacer.gif"></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td width="100%" colspan="3"></td>
         </tr>
         <tr>
            <td width="100%" colspan="3">
               <table border="0" width="100%">
                  <tr>
                     <td width="225" valign="top" align="left" nowrap>Chair/Editor</td>
                     <td width="95%" valign="top" align="left" nowrap>Gunther Schadow<br><a href="mailto:gunther@aurora.rg.iupui.edu">gunther@aurora.rg.iupui.edu</a><br>Regenstrief Institute for Health Care
                     </td>
                  </tr>
                  <tr>
                     <td width="225" valign="top" align="left" nowrap>Editor</td>
                     <td width="95%" valign="top" align="left" nowrap>Paul Biron<br><a href="mailto:paul.v.biron@kp.org">paul.v.biron@kp.org</a><br>Kaiser Permanente, Southern California
                     </td>
                  </tr>
                  <tr>
                     <td width="225" valign="top" align="left" nowrap>Editor</td>
                     <td width="95%" valign="top" align="left" nowrap>Lloyd McKenzie<br><a href="mailto:lmckenzi@ca.ibm.com">lmckenzi@ca.ibm.com</a><br>IBM Global Services
                     </td>
                  </tr>
                  <tr>
                     <td width="225" valign="top" align="left" nowrap>Editor</td>
                     <td width="95%" valign="top" align="left" nowrap>Grahame Grieve<br><a href="mailto:grahame@kestral.com.au">grahame@kestral.com.au</a><br>Kestral Computing Pty. Ltd.
                     </td>
                  </tr>
                  <tr>
                     <td width="225" valign="top" align="left" nowrap>Editor</td>
                     <td width="95%" valign="top" align="left" nowrap>Doug Pratt<br><a href="mailto:Douglas.Pratt@siemens.com">Douglas.Pratt@siemens.com</a><br>Siemens
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td width="100%" colspan="3"></td>
         </tr>
         <tr>
            <td width="100%" colspan="3">
               <p class="copyright">Last Published:&nbsp;09/26/2005&nbsp;4:12&nbsp;PM</p>
               <p class="copyright">HL7&reg; Version 3 Standard, &copy; 2005 Health 
                  Level Seven&reg;, Inc.  All Rights Reserved.
               </p>
               <p class="copyright">HL7 and Health Level Seven are registered 
                  trademarks of Health Level Seven, Inc.  Reg. U.S. Pat &amp; TM Off
               </p>
            </td>
         </tr>
         <tr>
            <td width="100%" colspan="3"></td>
         </tr>
         <tr>
            <td width="100%" colspan="3">
               <hr title="Separator for header">
            </td>
         </tr>
         <tr>
            <td width="100%" colspan="3">
               <h2><a name="contents">Table of Contents</a></h2>
               
               <div class="toc1"><a href="#prefBegin">Preface</a></div>
               <div class="toc2">i &nbsp;<a href="#datyp2preface">Preface</a></div>
               <div class="toc2">ii &nbsp;<a href="#datyp2acks">Acknowledgements</a></div>
               <div class="toc2">iii &nbsp;<a href="#datyp2ToDo">Outstanding issues</a></div>
               
               <div class="toc1">1 &nbsp;<a href="#datyp2intro">Introduction</a></div>
               <div class="toc2">1.1 &nbsp;<a href="#datyp2introwhat">What is a Data Type?</a></div>
               <div class="toc2">1.2 &nbsp;<a href="#datyp2introrep">Representation of Data Values</a></div>
               <div class="toc2">1.3 &nbsp;<a href="#datyp2introprop">Properties of Data Values</a></div>
               <div class="toc2">1.4 &nbsp;<a href="#datyp2intronabs">Need for Abstraction</a></div>
               <div class="toc2">1.5 &nbsp;<a href="#datyp2introndts">Need for an HL7 Data Type Standard</a></div>
               <div class="toc2">1.6 &nbsp;<a href="#datyp2introreq">Requirements</a></div>
               <div class="toc2">1.7 &nbsp;<a href="#datyp2introform">Forms of Data Type Definitions</a></div>
               <div class="toc3">1.7.1 &nbsp;<a href="#section-Formal-Data-Type-Definition-Language">Formal Data Type Definition Language</a></div>
               <div class="toc3">1.7.2 &nbsp;<a href="#section-Tables-of-Properties">Tables of Properties</a></div>
               <div class="toc3">1.7.3 &nbsp;<a href="#section-Unified-Modeling-Language-(UML)-Diagrams">Unified Modeling Language (UML) Diagrams</a></div>
               <div class="toc2">1.8 &nbsp;<a href="#datyp2introovw">Overview of Data Types</a></div>
               <div class="toc2">1.9 &nbsp;<a href="#dtdl-introduction">Introduction to the Formal Data Type Definition Language (DTDL)</a></div>
               <div class="toc3">1.9.1 &nbsp;<a href="#section-Declaration">Declaration</a></div>
               <div class="toc3">1.9.2 &nbsp;<a href="#section-Invariant-Statements">Invariant Statements</a></div>
               <div class="toc3">1.9.3 &nbsp;<a href="#section-Type-Conversion">Type Conversion</a></div>
               <div class="toc3">1.9.4 &nbsp;<a href="#literalFormIntro">Literal Form</a></div>
               <div class="toc3">1.9.5 &nbsp;<a href="#generics">Generic Data Types</a></div>
               <div class="toc2">1.10 &nbsp;<a href="#section-Conformance">Conformance</a></div>
               <div class="toc2">1.11 &nbsp;<a href="#dt-ANY">DataValue (ANY)</a></div>
               <div class="toc3">1.11.1 &nbsp;<a href="#prop-ANY.dataType">Data Type : TYPE</a></div>
               <div class="toc3">1.11.2 &nbsp;<a href="#prop-ANY.nonNull">Proper Value : BN</a></div>
               <div class="toc3">1.11.3 &nbsp;<a href="#prop-ANY.isNull">Exceptional Value : BN</a></div>
               <div class="toc3">1.11.4 &nbsp;<a href="#prop-ANY.nullFlavor">Exceptional Value Detail : CS</a></div>
               <div class="toc3">1.11.5 &nbsp;<a href="#prop-ANY.notApplicable">Inapplicable Proper Value : BL</a></div>
               <div class="toc3">1.11.6 &nbsp;<a href="#prop-ANY.unknown">unknown : BL</a></div>
               <div class="toc3">1.11.7 &nbsp;<a href="#prop-ANY.other">Value Domain Exception : BL</a></div>
               <div class="toc3">1.11.8 &nbsp;<a href="#prop-ANY.equal">Equality : BL</a></div>
               <div class="toc2">1.12 &nbsp;<a href="#dt-TYPE">DataType (TYPE) specializes ANY</a></div>
               <div class="toc3">1.12.1 &nbsp;<a href="#prop-DataType.shortName">Short Name : CS</a></div>
               <div class="toc3">1.12.2 &nbsp;<a href="#prop-DataType.longName">Long Name : CS</a></div>
               <div class="toc3">1.12.3 &nbsp;<a href="#prop-DataType.implies">Implies : BN</a></div>
               
               <div class="toc1">2 &nbsp;<a href="#datyp2bastyp">Basic Types</a></div>
               <div class="toc2">2.1 &nbsp;<a href="#dt-BL">Boolean (BL) specializes ANY</a></div>
               <div class="toc3">2.1.1 &nbsp;<a href="#prop-BL.not">Negation : BL</a></div>
               <div class="toc3">2.1.2 &nbsp;<a href="#prop-BL.and">Conjunction : BL</a></div>
               <div class="toc3">2.1.3 &nbsp;<a href="#prop-BL.or">Disjunction : BL</a></div>
               <div class="toc3">2.1.4 &nbsp;<a href="#prop-BL.xor">Exclusive Disjunction : BL</a></div>
               <div class="toc3">2.1.5 &nbsp;<a href="#prop-BL.implies">Implication : BL</a></div>
               <div class="toc3">2.1.6 &nbsp;<a href="#prop-BL.literal">Literal Form</a></div>
               <div class="toc2">2.2 &nbsp;<a href="#dt-BN">BooleanNonNull (BN) specializes BL</a></div>
               <div class="toc3">2.2.1 &nbsp;<a href="#prop-BN.isNull">isNull : BN</a></div>
               <div class="toc2">2.3 &nbsp;<a href="#dt-BIN">Binary Data (BIN) specializes LIST&lt;BN&gt;</a></div>
               <div class="toc2">2.4 &nbsp;<a href="#dt-ED">Encapsulated Data (ED) specializes BIN</a></div>
               <div class="toc3">2.4.1 &nbsp;<a href="#prop-ED.mediaType">Media Type : CS</a></div>
               <div class="toc3">2.4.2 &nbsp;<a href="#prop-ED.charset">Charset : CS</a></div>
               <div class="toc3">2.4.3 &nbsp;<a href="#prop-ED.language">Language : CS</a></div>
               <div class="toc3">2.4.4 &nbsp;<a href="#prop-ED.compression">Compression : CS</a></div>
               <div class="toc3">2.4.5 &nbsp;<a href="#prop-ED.reference">Reference : TEL</a></div>
               <div class="toc3">2.4.6 &nbsp;<a href="#prop-ED.integrityCheck">Integrity Check : BIN</a></div>
               <div class="toc3">2.4.7 &nbsp;<a href="#prop-ED.integrityCheckAlgorithm">Integrity Check Algorithm : CS</a></div>
               <div class="toc3">2.4.8 &nbsp;<a href="#prop-ED.thumbnail">Thumbnail : ED</a></div>
               <div class="toc3">2.4.9 &nbsp;<a href="#prop-ED.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc2">2.5 &nbsp;<a href="#dt-ST">Character String (ST) specializes ED</a></div>
               <div class="toc3">2.5.1 &nbsp;<a href="#prop-ST.mediaType">Media Type : CS, inherited from ED</a></div>
               <div class="toc3">2.5.2 &nbsp;<a href="#prop-ST.charset">Charset : CS, inherited from ED</a></div>
               <div class="toc3">2.5.3 &nbsp;<a href="#prop-ST.language">Language : CS, inherited from ED</a></div>
               <div class="toc3">2.5.4 &nbsp;<a href="#prop-ST.compression">Compression : CS, (fixed)</a></div>
               <div class="toc3">2.5.5 &nbsp;<a href="#prop-ST.reference">Reference : TEL, (fixed)</a></div>
               <div class="toc3">2.5.6 &nbsp;<a href="#prop-ST.integrityCheck">Integrity Check : BIN, (fixed)</a></div>
               <div class="toc3">2.5.7 &nbsp;<a href="#prop-ST.integrityCheckAlgorithm">Integrity Check Algorithm : CS, (fixed)</a></div>
               <div class="toc3">2.5.8 &nbsp;<a href="#prop-ST.thumbnail">Thumbnail : ED, (fixed)</a></div>
               <div class="toc3">2.5.9 &nbsp;<a href="#prop-ST.literal">Literal Form</a></div>
               <div class="toc2">2.6 &nbsp;<a href="#dt-CD">Concept Descriptor (CD) specializes ANY</a></div>
               <div class="toc3">2.6.1 &nbsp;<a href="#prop-CD.code">Code : ST</a></div>
               <div class="toc3">2.6.2 &nbsp;<a href="#prop-CD.codeSystem">Code System : UID</a></div>
               <div class="toc3">2.6.3 &nbsp;<a href="#prop-CD.codeSystemName">Code System Name : ST</a></div>
               <div class="toc3">2.6.4 &nbsp;<a href="#prop-CD.codeSystemVersion">Code System Version : ST</a></div>
               <div class="toc3">2.6.5 &nbsp;<a href="#prop-CD.displayName">Display Name : ST</a></div>
               <div class="toc3">2.6.6 &nbsp;<a href="#prop-CD.originalText">Original Text : ED</a></div>
               <div class="toc3">2.6.7 &nbsp;<a href="#prop-CD.translation">Translation : SET&lt;CD&gt;</a></div>
               <div class="toc3">2.6.8 &nbsp;<a href="#prop-CD.qualifier">Qualifier : LIST&lt;CR&gt;</a></div>
               <div class="toc3">2.6.9 &nbsp;<a href="#prop-CD.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.6.10 &nbsp;<a href="#prop-CD.implies">Implies : BL</a></div>
               <div class="toc2">2.7 &nbsp;<a href="#dt-CR">Concept Role (CR) specializes ANY</a></div>
               <div class="toc3">2.7.1 &nbsp;<a href="#prop-CR.name">Name : CV</a></div>
               <div class="toc3">2.7.2 &nbsp;<a href="#prop-CR.value">Value : CD</a></div>
               <div class="toc3">2.7.3 &nbsp;<a href="#prop-CR.inverted">Inversion Indicator : BN</a></div>
               <div class="toc2">2.8 &nbsp;<a href="#dt-CS">Coded Simple Value (CS) specializes CV</a></div>
               <div class="toc3">2.8.1 &nbsp;<a href="#prop-CS.code">Code : ST, inherited from CD</a></div>
               <div class="toc3">2.8.2 &nbsp;<a href="#prop-CS.codeSystem">Code System : UID, (fixed)</a></div>
               <div class="toc3">2.8.3 &nbsp;<a href="#prop-CS.codeSystemName">Code System Name : ST, (fixed)</a></div>
               <div class="toc3">2.8.4 &nbsp;<a href="#prop-CS.codeSystemVersion">Code System Version : ST, (fixed)</a></div>
               <div class="toc3">2.8.5 &nbsp;<a href="#prop-CS.displayName">Display Name : ST, (fixed)</a></div>
               <div class="toc3">2.8.6 &nbsp;<a href="#prop-CS.originalText">Original Text : ED, (fixed)</a></div>
               <div class="toc3">2.8.7 &nbsp;<a href="#prop-CS.translation">Translation : SET&lt;CD&gt;, (fixed)</a></div>
               <div class="toc3">2.8.8 &nbsp;<a href="#prop-CS.qualifier">Qualifier : LIST&lt;CR&gt;, (fixed)</a></div>
               <div class="toc3">2.8.9 &nbsp;<a href="#prop-CS.literal">Literal Form</a></div>
               <div class="toc2">2.9 &nbsp;<a href="#dt-CV">Coded Value (CV) specializes CE</a></div>
               <div class="toc3">2.9.1 &nbsp;<a href="#prop-CV.code">Code : ST, inherited from CD</a></div>
               <div class="toc3">2.9.2 &nbsp;<a href="#prop-CV.codeSystem">Code System : UID, inherited from CD</a></div>
               <div class="toc3">2.9.3 &nbsp;<a href="#prop-CV.codeSystemName">Code System Name : ST, inherited from CD</a></div>
               <div class="toc3">2.9.4 &nbsp;<a href="#prop-CV.codeSystemVersion">Code System Version : ST, inherited from CD</a></div>
               <div class="toc3">2.9.5 &nbsp;<a href="#prop-CV.displayName">Display Name : ST, inherited from CD</a></div>
               <div class="toc3">2.9.6 &nbsp;<a href="#prop-CV.originalText">Original Text : ED, inherited from CD</a></div>
               <div class="toc3">2.9.7 &nbsp;<a href="#prop-CV.translation">Translation : SET&lt;CD&gt;, (fixed)</a></div>
               <div class="toc3">2.9.8 &nbsp;<a href="#prop-CV.qualifier">Qualifier : LIST&lt;CR&gt;, (fixed)</a></div>
               <div class="toc2">2.10 &nbsp;<a href="#dt-CO">Coded Ordinal (CO) specializes CV</a></div>
               <div class="toc3">2.10.1 &nbsp;<a href="#prop-CO.lessOrEqual">Less-or-equal : BL</a></div>
               <div class="toc3">2.10.2 &nbsp;<a href="#prop-CO.lessThan">Less-than : BL</a></div>
               <div class="toc3">2.10.3 &nbsp;<a href="#prop-CO.greaterThan">Greater-than : BL</a></div>
               <div class="toc3">2.10.4 &nbsp;<a href="#prop-CO.greaterOrEqual">Greater-or-equal : BL</a></div>
               <div class="toc2">2.11 &nbsp;<a href="#dt-CE">Coded With Equivalents (CE) specializes CD</a></div>
               <div class="toc3">2.11.1 &nbsp;<a href="#prop-CE.code">Code : ST, inherited from CD</a></div>
               <div class="toc3">2.11.2 &nbsp;<a href="#prop-CE.codeSystem">Code System : UID, inherited from CD</a></div>
               <div class="toc3">2.11.3 &nbsp;<a href="#prop-CE.codeSystemName">Code System Name : ST, inherited from CD</a></div>
               <div class="toc3">2.11.4 &nbsp;<a href="#prop-CE.codeSystemVersion">Code System Version : ST, inherited from CD</a></div>
               <div class="toc3">2.11.5 &nbsp;<a href="#prop-CE.displayName">Display Name : ST, inherited from CD</a></div>
               <div class="toc3">2.11.6 &nbsp;<a href="#prop-CE.originalText">Original Text : ED, inherited from CD</a></div>
               <div class="toc3">2.11.7 &nbsp;<a href="#prop-CE.translation">Translation : SET&lt;CD&gt;, inherited from CD</a></div>
               <div class="toc3">2.11.8 &nbsp;<a href="#prop-CE.qualifier">Qualifier : LIST&lt;CR&gt;, (fixed)</a></div>
               <div class="toc2">2.12 &nbsp;<a href="#dt-SC">Character String with Code (SC) specializes ST</a></div>
               <div class="toc3">2.12.1 &nbsp;<a href="#prop-SC.code">Code : CE</a></div>
               <div class="toc2">2.13 &nbsp;<a href="#dt-UID">Unique Identifier String (UID) specializes ST</a></div>
               <div class="toc2">2.14 &nbsp;<a href="#dt-OID">ISO Object Identifier (OID) specializes UID</a></div>
               <div class="toc3">2.14.1 &nbsp;<a href="#section-OID.procedures">HL7-Assigned OIDs</a></div>
               <div class="toc3">2.14.2 &nbsp;<a href="#prop-OID.literal">Literal Form</a></div>
               <div class="toc2">2.15 &nbsp;<a href="#dt-UUID">DCE Universal Unique Identifier (UUID) specializes UID</a></div>
               <div class="toc3">2.15.1 &nbsp;<a href="#prop-UUID.literal">Literal Form</a></div>
               <div class="toc2">2.16 &nbsp;<a href="#dt-RUID">HL7 Reserved Identifier Scheme (RUID) specializes UID</a></div>
               <div class="toc2">2.17 &nbsp;<a href="#dt-II">Instance Identifier (II) specializes ANY</a></div>
               <div class="toc3">2.17.1 &nbsp;<a href="#prop-II.root">Root : UID</a></div>
               <div class="toc3">2.17.2 &nbsp;<a href="#prop-II.extension">Extension : ST</a></div>
               <div class="toc3">2.17.3 &nbsp;<a href="#prop-II.assigningAuthorityName">Assigning Authority Name : ST</a></div>
               <div class="toc3">2.17.4 &nbsp;<a href="#prop-II.displayable">Displayable : BL</a></div>
               <div class="toc3">2.17.5 &nbsp;<a href="#prop-II.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc2">2.18 &nbsp;<a href="#dt-URL">Universal Resource Locator (URL) specializes ANY</a></div>
               <div class="toc3">2.18.1 &nbsp;<a href="#prop-URL.scheme">Scheme : CS</a></div>
               <div class="toc3">2.18.2 &nbsp;<a href="#prop-URL.address">Address : ST</a></div>
               <div class="toc3">2.18.3 &nbsp;<a href="#prop-URL.literal">Literal Form</a></div>
               <div class="toc2">2.19 &nbsp;<a href="#dt-TEL">Telecommunication Address (TEL) specializes URL</a></div>
               <div class="toc3">2.19.1 &nbsp;<a href="#prop-TEL.useablePeriod">Useable Period : GTS</a></div>
               <div class="toc3">2.19.2 &nbsp;<a href="#prop-TEL.use">Use Code : SET&lt;CS&gt;</a></div>
               <div class="toc3">2.19.3 &nbsp;<a href="#prop-TEL.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc2">2.20 &nbsp;<a href="#dt-ADXP">Address Part (ADXP) specializes ST</a></div>
               <div class="toc3">2.20.1 &nbsp;<a href="#prop-ADXP.partType">Address Part Type : CS</a></div>
               <div class="toc2">2.21 &nbsp;<a href="#dt-AD">Postal Address (AD) specializes LIST&lt;ADXP&gt;</a></div>
               <div class="toc3">2.21.1 &nbsp;<a href="#prop-AD.use">Use Code : SET&lt;CS&gt;</a></div>
               <div class="toc3">2.21.2 &nbsp;<a href="#prop-AD.useablePeriod">Useable Period : GTS</a></div>
               <div class="toc3">2.21.3 &nbsp;<a href="#prop-AD.isNotOrdered">Is Not Ordered : BL</a></div>
               <div class="toc3">2.21.4 &nbsp;<a href="#prop-AD.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.21.5 &nbsp;<a href="#prop-AD.formatted">Formatting Address : ST</a></div>
               <div class="toc2">2.22 &nbsp;<a href="#dt-ENXP">Entity Name Part (ENXP) specializes ST</a></div>
               <div class="toc3">2.22.1 &nbsp;<a href="#prop-ENXP.partType">Name Part Type : CS</a></div>
               <div class="toc3">2.22.2 &nbsp;<a href="#prop-ENXP.qualifier">Qualifier : SET&lt;CS&gt;</a></div>
               <div class="toc2">2.23 &nbsp;<a href="#dt-EN">Entity Name (EN) specializes LIST&lt;ENXP&gt;</a></div>
               <div class="toc3">2.23.1 &nbsp;<a href="#prop-EN.use">Use Code : SET&lt;CS&gt;</a></div>
               <div class="toc3">2.23.2 &nbsp;<a href="#prop-EN.validTime">Valid Time : IVL&lt;TS&gt;</a></div>
               <div class="toc3">2.23.3 &nbsp;<a href="#prop-EN.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.23.4 &nbsp;<a href="#prop-EN.formatted">Formatting Entity Names : ST</a></div>
               <div class="toc3">2.23.5 &nbsp;<a href="#section-Examples">Examples</a></div>
               <div class="toc2">2.24 &nbsp;<a href="#dt-TN">Trivial Name (TN) specializes EN</a></div>
               <div class="toc2">2.25 &nbsp;<a href="#dt-PN">Person Name (PN) specializes EN</a></div>
               <div class="toc2">2.26 &nbsp;<a href="#dt-ON">Organization Name (ON) specializes EN</a></div>
               <div class="toc3">2.26.1 &nbsp;<a href="#PN-examples">Examples</a></div>
               <div class="toc2">2.27 &nbsp;<a href="#dt-QTY">Abstract Type Quantity (QTY) specializes ANY</a></div>
               <div class="toc3">2.27.1 &nbsp;<a href="#prop-QTY.lessOrEqual">Ordering: less-or-equal : BL</a></div>
               <div class="toc3">2.27.2 &nbsp;<a href="#prop-QTY.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.27.3 &nbsp;<a href="#prop-QTY.compares">Comparability : BL</a></div>
               <div class="toc3">2.27.4 &nbsp;<a href="#prop-QTY.diffType">DifferenceDataType : TYPE</a></div>
               <div class="toc3">2.27.5 &nbsp;<a href="#prop-QTY.minus">Difference : QTY</a></div>
               <div class="toc3">2.27.6 &nbsp;<a href="#prop-QTY.plus">Addition : QTY</a></div>
               <div class="toc3">2.27.7 &nbsp;<a href="#prop-QTY.isZero">The Zero-Quantity : BL</a></div>
               <div class="toc3">2.27.8 &nbsp;<a href="#prop-QTY.lessThan">Ordering: less-than : BL</a></div>
               <div class="toc3">2.27.9 &nbsp;<a href="#prop-QTY.greaterOrEqual">Ordering: greater-or-equal : BL</a></div>
               <div class="toc3">2.27.10 &nbsp;<a href="#prop-QTY.greaterThan">Ordering: greater-than : BL</a></div>
               <div class="toc2">2.28 &nbsp;<a href="#dt-INT">Integer Number (INT) specializes QTY</a></div>
               <div class="toc3">2.28.1 &nbsp;<a href="#prop-INT.successor">Successor : INT</a></div>
               <div class="toc3">2.28.2 &nbsp;<a href="#prop-INT.diffType">DifferenceDataType : TYPE, inherited from QTY</a></div>
               <div class="toc3">2.28.3 &nbsp;<a href="#prop-INT.plus">Addition : INT, inherited from QTY</a></div>
               <div class="toc3">2.28.4 &nbsp;<a href="#prop-INT.times">Multiplication : INT</a></div>
               <div class="toc3">2.28.5 &nbsp;<a href="#prop-INT.predecessor">Predecessor : INT</a></div>
               <div class="toc3">2.28.6 &nbsp;<a href="#prop-INT.negated">Negation : INT</a></div>
               <div class="toc3">2.28.7 &nbsp;<a href="#prop-INT.nonNegative">Non-Negative : BL</a></div>
               <div class="toc3">2.28.8 &nbsp;<a href="#prop-INT.isNegative">Negative : BL</a></div>
               <div class="toc3">2.28.9 &nbsp;<a href="#prop-INT.dividedBy">Integer Division : INT</a></div>
               <div class="toc3">2.28.10 &nbsp;<a href="#prop-INT.remainder">Remainder : INT</a></div>
               <div class="toc3">2.28.11 &nbsp;<a href="#prop-INT.isOne">Neutral Element of Multiplication : BL</a></div>
               <div class="toc3">2.28.12 &nbsp;<a href="#prop-INT.literal">Literal Form</a></div>
               <div class="toc2">2.29 &nbsp;<a href="#dt-REAL">Real Number (REAL) specializes QTY</a></div>
               <div class="toc3">2.29.1 &nbsp;<a href="#prop-REAL.compares">Comparability : BL, inherited from QTY</a></div>
               <div class="toc3">2.29.2 &nbsp;<a href="#prop-REAL.diffType">DifferenceDataType : TYPE, inherited from QTY</a></div>
               <div class="toc3">2.29.3 &nbsp;<a href="#prop-REAL.plus">Addition : QTY, inherited from QTY</a></div>
               <div class="toc3">2.29.4 &nbsp;<a href="#prop-REAL.negated">Negation (Inverse Element of Addition) : REAL</a></div>
               <div class="toc3">2.29.5 &nbsp;<a href="#prop-REAL.isOne">Neutral Element of Multiplication : BL</a></div>
               <div class="toc3">2.29.6 &nbsp;<a href="#prop-REAL.times">Multiplication : REAL</a></div>
               <div class="toc3">2.29.7 &nbsp;<a href="#prop-REAL.inverted">Inverse Element of Multiplication : REAL</a></div>
               <div class="toc3">2.29.8 &nbsp;<a href="#prop-REAL.INT">Homomorphism of INT into REAL : INT</a></div>
               <div class="toc3">2.29.9 &nbsp;<a href="#prop-REAL.power">Exponentiation : REAL</a></div>
               <div class="toc3">2.29.10 &nbsp;<a href="#prop-REAL.literal">Literal Form</a></div>
               <div class="toc3">2.29.11 &nbsp;<a href="#prop-REAL.precision">Precision of the Decimal Form : INT</a></div>
               <div class="toc2">2.30 &nbsp;<a href="#dt-RTO">Ratio (RTO) specializes QTY</a></div>
               <div class="toc3">2.30.1 &nbsp;<a href="#prop-RTO.numerator">Numerator : N</a></div>
               <div class="toc3">2.30.2 &nbsp;<a href="#prop-RTO.denominator">Denominator : D</a></div>
               <div class="toc3">2.30.3 &nbsp;<a href="#prop-RTO.literal">Literal Form</a></div>
               <div class="toc2">2.31 &nbsp;<a href="#dt-PQ">Physical Quantity (PQ) specializes QTY</a></div>
               <div class="toc3">2.31.1 &nbsp;<a href="#prop-PQ.value">Maginitude Value : REAL</a></div>
               <div class="toc3">2.31.2 &nbsp;<a href="#prop-PQ.unit">Unit of Measure : CS</a></div>
               <div class="toc3">2.31.3 &nbsp;<a href="#prop-PQ.translation">Translation : SET&lt;PQR&gt;</a></div>
               <div class="toc3">2.31.4 &nbsp;<a href="#prop-PQ.canonical">Canonical Form : PQ</a></div>
               <div class="toc3">2.31.5 &nbsp;<a href="#prop-PQ.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.31.6 &nbsp;<a href="#prop-PQ.compares">Comparability : BL, inherited from QTY</a></div>
               <div class="toc3">2.31.7 &nbsp;<a href="#prop-PQ.diffType">DifferenceDataType : TYPE, inherited from QTY</a></div>
               <div class="toc3">2.31.8 &nbsp;<a href="#prop-PQ.isOne">Neutral Element of Multiplication : BL</a></div>
               <div class="toc3">2.31.9 &nbsp;<a href="#prop-PQ.times">Multiplication : PQ</a></div>
               <div class="toc3">2.31.10 &nbsp;<a href="#prop-PQ.inverted">Inverse Element of Multiplication : PQ</a></div>
               <div class="toc3">2.31.11 &nbsp;<a href="#prop-PQ.timesREAL">Real Multiplication : PQ</a></div>
               <div class="toc3">2.31.12 &nbsp;<a href="#prop-REAL.PQ">Homomorphism of REAL into PQ : REAL</a></div>
               <div class="toc3">2.31.13 &nbsp;<a href="#prop-PQ.power">Exponentiation : PQ</a></div>
               <div class="toc3">2.31.14 &nbsp;<a href="#prop-PQ.plus">Addition : PQ</a></div>
               <div class="toc3">2.31.15 &nbsp;<a href="#prop-PQ.literal">Literal Form</a></div>
               <div class="toc2">2.32 &nbsp;<a href="#dt-PQR">Physical Quantity Representation (PQR) specializes CV</a></div>
               <div class="toc3">2.32.1 &nbsp;<a href="#prop-PQR.value">Value : REAL</a></div>
               <div class="toc3">2.32.2 &nbsp;<a href="#prop-PQR.code">Code : ST, inherited from CV</a></div>
               <div class="toc3">2.32.3 &nbsp;<a href="#prop-PQR.codeSystem">Code System : UID, inherited from CV</a></div>
               <div class="toc3">2.32.4 &nbsp;<a href="#prop-PQR.codeSystemName">Code System Name : ST, inherited from CV</a></div>
               <div class="toc3">2.32.5 &nbsp;<a href="#prop-PQR.codeSystemVersion">Code System Version : ST, inherited from CV</a></div>
               <div class="toc3">2.32.6 &nbsp;<a href="#prop-PQR.displayName">Display Name : ST, inherited from CV</a></div>
               <div class="toc3">2.32.7 &nbsp;<a href="#prop-PQR.originalText">Original Text : ED, inherited from CV</a></div>
               <div class="toc2">2.33 &nbsp;<a href="#dt-MO">Monetary Amount (MO) specializes QTY</a></div>
               <div class="toc3">2.33.1 &nbsp;<a href="#prop-MO.value">Value : REAL</a></div>
               <div class="toc3">2.33.2 &nbsp;<a href="#prop-MO.currency">Currency : CS</a></div>
               <div class="toc3">2.33.3 &nbsp;<a href="#prop-MO.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">2.33.4 &nbsp;<a href="#prop-MO.compares">Comparability : BL, inherited from QTY</a></div>
               <div class="toc3">2.33.5 &nbsp;<a href="#prop-MO.diffType">DifferenceDataType : TYPE, inherited from QTY</a></div>
               <div class="toc3">2.33.6 &nbsp;<a href="#prop-MO.plus">Addition : MO</a></div>
               <div class="toc3">2.33.7 &nbsp;<a href="#prop-MO.timesREAL">Real Multiplication : MO</a></div>
               <div class="toc3">2.33.8 &nbsp;<a href="#prop-MO.literal">Literal Form</a></div>
               <div class="toc2">2.34 &nbsp;<a href="#dt-CAL">Calendar (CAL) specializes SET&lt;CLCY&gt;</a></div>
               <div class="toc2">2.35 &nbsp;<a href="#dt-CLCY">Calendar Cycle (CLCY) specializes ANY</a></div>
               <div class="toc2">2.36 &nbsp;<a href="#dt-TS">Point in Time (TS) specializes QTY</a></div>
               <div class="toc3">2.36.1 &nbsp;<a href="#prop-TS.offset">Offset from Epoch : PQ</a></div>
               <div class="toc3">2.36.2 &nbsp;<a href="#prop-TS.equal">Equality : BL, inherited from QTY</a></div>
               <div class="toc3">2.36.3 &nbsp;<a href="#prop-TS.calendar">Calendar : CS</a></div>
               <div class="toc3">2.36.4 &nbsp;<a href="#prop-TS.precision">Precision of the Calendar Literal Form : INT</a></div>
               <div class="toc3">2.36.5 &nbsp;<a href="#prop-TS.timezone">Timezone Offset : PQ</a></div>
               <div class="toc3">2.36.6 &nbsp;<a href="#prop-TS.diffType">DifferenceDataType : TYPE, inherited from QTY</a></div>
               <div class="toc3">2.36.7 &nbsp;<a href="#prop-TS.plus">Addition : TS, inherited from QTY</a></div>
               <div class="toc3">2.36.8 &nbsp;<a href="#prop-TS.minus">Difference : QTY, inherited from QTY</a></div>
               <div class="toc3">2.36.9 &nbsp;<a href="#prop-TS.literal">Literal Form</a></div>
               
               <div class="toc1">3 &nbsp;<a href="#datyp2gencol">Generic Collections</a></div>
               <div class="toc2">3.1 &nbsp;<a href="#dt-SET">Set (SET) specializes ANY</a></div>
               <div class="toc3">3.1.1 &nbsp;<a href="#prop-SET.containsElement">Contains Element : BL</a></div>
               <div class="toc3">3.1.2 &nbsp;<a href="#prop-SET.containsSet">Contains Subset : BL</a></div>
               <div class="toc3">3.1.3 &nbsp;<a href="#prop-SET.notEmpty">Not-Empty : BL</a></div>
               <div class="toc3">3.1.4 &nbsp;<a href="#prop-SET.isEmpty">The Empty Set : BL</a></div>
               <div class="toc3">3.1.5 &nbsp;<a href="#prop-SET.cardinality">Cardinality : INT</a></div>
               <div class="toc3">3.1.6 &nbsp;<a href="#prop-SET.union">Union : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.7 &nbsp;<a href="#prop-SET.unionElement">Include Element : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.8 &nbsp;<a href="#prop-SET.difference">Set Difference : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.9 &nbsp;<a href="#prop-SET.exceptElement">Exclude Element : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.10 &nbsp;<a href="#prop-SET.intersect">Intersection : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.11 &nbsp;<a href="#prop-SET.literal">Literal Form</a></div>
               <div class="toc3">3.1.12 &nbsp;<a href="#prop-SET.promotionT">Promotion of Element Values to Sets : SET&lt;T&gt;</a></div>
               <div class="toc3">3.1.13 &nbsp;<a href="#prop-SET.hull">Convex Hull of Totally Ordered Sets : IVL&lt;T&gt;</a></div>
               <div class="toc2">3.2 &nbsp;<a href="#dt-LIST">Sequence (LIST) specializes ANY</a></div>
               <div class="toc3">3.2.1 &nbsp;<a href="#prop-LIST.head">Head Item : T</a></div>
               <div class="toc3">3.2.2 &nbsp;<a href="#prop-LIST.tail">Tail Sequence : LIST&lt;T&gt;</a></div>
               <div class="toc3">3.2.3 &nbsp;<a href="#prop-LIST.isEmpty">Empty Sequence : BL</a></div>
               <div class="toc3">3.2.4 &nbsp;<a href="#prop-LIST.notEmpty">Not-Empty Sequence : BL</a></div>
               <div class="toc3">3.2.5 &nbsp;<a href="#prop-LIST.item">Item by Index : T</a></div>
               <div class="toc3">3.2.6 &nbsp;<a href="#prop-LIST.contains">Contains Item : BL</a></div>
               <div class="toc3">3.2.7 &nbsp;<a href="#prop-LIST.length">Length : INT</a></div>
               <div class="toc3">3.2.8 &nbsp;<a href="#prop-LIST.equal">Equality : BL, inherited from ANY</a></div>
               <div class="toc3">3.2.9 &nbsp;<a href="#prop-LIST.literal">Literal Form</a></div>
               <div class="toc3">3.2.10 &nbsp;<a href="#prop-LIST.promotionT">Promotion of Item Values to Sequences : LIST&lt;T&gt;</a></div>
               <div class="toc2">3.3 &nbsp;<a href="#dt-GLIST">GeneratedSequence (GLIST) specializes LIST</a></div>
               <div class="toc3">3.3.1 &nbsp;<a href="#prop-GLIST.head">Head Item : T, inherited from LIST</a></div>
               <div class="toc3">3.3.2 &nbsp;<a href="#prop-GLIST.increment">Increment : QTY</a></div>
               <div class="toc3">3.3.3 &nbsp;<a href="#prop-GLIST.period">Period Step Count : INT</a></div>
               <div class="toc3">3.3.4 &nbsp;<a href="#prop-GLIST.denominator">Denominator : INT</a></div>
               <div class="toc2">3.4 &nbsp;<a href="#dt-SLIST">SampledSequence (SLIST) specializes LIST</a></div>
               <div class="toc3">3.4.1 &nbsp;<a href="#prop-SLIST.origin">Scale Origin : T</a></div>
               <div class="toc3">3.4.2 &nbsp;<a href="#prop-SLIST.scale">Scale Factor : QTY</a></div>
               <div class="toc3">3.4.3 &nbsp;<a href="#prop-SLIST.digits">Sampled Digits : LIST&lt;INT&gt;</a></div>
               <div class="toc2">3.5 &nbsp;<a href="#dt-BAG">Bag (BAG) specializes ANY</a></div>
               <div class="toc3">3.5.1 &nbsp;<a href="#prop-BAG.contains">Contains Item : INT</a></div>
               <div class="toc3">3.5.2 &nbsp;<a href="#prop-BAG.notEmpty">Not-Empty : BL</a></div>
               <div class="toc3">3.5.3 &nbsp;<a href="#prop-BAG.isEmpty">The Empty Bag : BL</a></div>
               <div class="toc3">3.5.4 &nbsp;<a href="#prop-BAG.plus">Addition : BAG&lt;T&gt;</a></div>
               <div class="toc3">3.5.5 &nbsp;<a href="#prop-BAG.minus">Subtraction : BAG&lt;T&gt;</a></div>
               <div class="toc3">3.5.6 &nbsp;<a href="#prop-BAG.promotionT">Promotion of Item Values to Bags : BAG&lt;T&gt;</a></div>
               <div class="toc2">3.6 &nbsp;<a href="#dt-IVL">Interval (IVL) specializes SET</a></div>
               <div class="toc3">3.6.1 &nbsp;<a href="#prop-IVL.low">Low Boundary : T</a></div>
               <div class="toc3">3.6.2 &nbsp;<a href="#prop-IVL.high">High Boundary : T</a></div>
               <div class="toc3">3.6.3 &nbsp;<a href="#prop-IVL.width">Width : QTY</a></div>
               <div class="toc3">3.6.4 &nbsp;<a href="#prop-IVL.center">Central Value : T</a></div>
               <div class="toc3">3.6.5 &nbsp;<a href="#prop-IVL.lowClosed">Low Boundary Closed : BL</a></div>
               <div class="toc3">3.6.6 &nbsp;<a href="#prop-IVL.highClosed">High Boundary Closed : BL</a></div>
               <div class="toc3">3.6.7 &nbsp;<a href="#prop-IVL.literal">Literal Form</a></div>
               <div class="toc3">3.6.8 &nbsp;<a href="#prop-IVL.promotionT">Promotion of Element Values to Intervals : IVL&lt;T&gt;</a></div>
               <div class="toc3">3.6.9 &nbsp;<a href="#prop-IVL.demotionT">Demotion of Intervals to a Representative Element Value : T</a></div>
               <div class="toc3">3.6.10 &nbsp;<a href="#prop-IVL.hull">Convex Hull : IVL&lt;T&gt;, inherited from SET</a></div>
               <div class="toc2">3.7 &nbsp;<a href="#dt-IVL_PQ">Interval of Physical Quantities (IVL&lt;PQ&gt;) specializes IVL</a></div>
               <div class="toc2">3.8 &nbsp;<a href="#dt-IVL_TS">Interval of Point in Time (IVL&lt;TS&gt;) specializes IVL</a></div>
               <div class="toc3">3.8.1 &nbsp;<a href="#prop-IVL_TS.promotionTS">Promotion of Points in Time Values to Intervals : IVL&lt;TS&gt;, inherited from IVL</a></div>
               <div class="toc3">3.8.2 &nbsp;<a href="#prop-IVL_TS.literal">Literal Form</a></div>
               
               <div class="toc1">4 &nbsp;<a href="#datyp2gentex">Generic Type Extensions</a></div>
               <div class="toc2">4.1 &nbsp;<a href="#dt-HXIT">History Item (HXIT) specializes T</a></div>
               <div class="toc3">4.1.1 &nbsp;<a href="#prop-HXIT.validTime">Valid Time : IVL&lt;TS&gt;</a></div>
               <div class="toc2">4.2 &nbsp;<a href="#dt-HIST">History (HIST) specializes SET&lt;HXIT&gt;</a></div>
               <div class="toc3">4.2.1 &nbsp;<a href="#prop-HIST.earliest">Earliest Item : HXIT&lt;T&gt;</a></div>
               <div class="toc3">4.2.2 &nbsp;<a href="#prop-HIST.latest">Latest Item : HXIT&lt;T&gt;</a></div>
               <div class="toc3">4.2.3 &nbsp;<a href="#prop-HIST.exceptEarliest">Except Earliest Item : HIST&lt;T&gt;</a></div>
               <div class="toc3">4.2.4 &nbsp;<a href="#prop-HIST.exceptLatest">Except Latest Item : HIST&lt;T&gt;</a></div>
               <div class="toc3">4.2.5 &nbsp;<a href="#prop-HIST.demotionHXIT">Demotion of a History to a Single History Item : HXIT&lt;T&gt;</a></div>
               <div class="toc2">4.3 &nbsp;<a href="#dt-UVP">Uncertain Value - Probabilistic (UVP) specializes T</a></div>
               <div class="toc3">4.3.1 &nbsp;<a href="#prop-UVP.probability">Probability : REAL</a></div>
               <div class="toc2">4.4 &nbsp;<a href="#dt-NPPD">Non-Parametric Probability Distribution (NPPD) specializes SET&lt;UVP&gt;</a></div>
               <div class="toc3">4.4.1 &nbsp;<a href="#prop-NPPD">Most Likely : UVP</a></div>
               
               <div class="toc1">5 &nbsp;<a href="#datyp2timspec">Timing Specification</a></div>
               <div class="toc2">5.1 &nbsp;<a href="#dt-PIVL">Periodic Interval of Time (PIVL) specializes SET</a></div>
               <div class="toc3">5.1.1 &nbsp;<a href="#prop-PIVL.phase">Phase : IVL&lt;T&gt;</a></div>
               <div class="toc3">5.1.2 &nbsp;<a href="#prop-PIVL.period">Period : T.diff</a></div>
               <div class="toc3">5.1.3 &nbsp;<a href="#prop-PIVL.alignment">Alignment to the Calendar : CS</a></div>
               <div class="toc3">5.1.4 &nbsp;<a href="#prop-PIVL.institutionSpecified">Institution Specified Timing : BL</a></div>
               <div class="toc3">5.1.5 &nbsp;<a href="#prop-PIVL.literal">Literal Form</a></div>
               <div class="toc3">5.1.6 &nbsp;<a href="#section-Periodic-Intervals-as-Sets">Periodic Intervals as Sets</a></div>
               <div class="toc2">5.2 &nbsp;<a href="#dt-EIVL">Event-Related Periodic Interval of Time (EIVL) specializes SET</a></div>
               <div class="toc3">5.2.1 &nbsp;<a href="#prop-EIVL.event">Event : CS</a></div>
               <div class="toc3">5.2.2 &nbsp;<a href="#prop-EIVL.offset">Offset : IVL&lt;PQ&gt;</a></div>
               <div class="toc3">5.2.3 &nbsp;<a href="#prop-EIVL.literal">Literal Form</a></div>
               <div class="toc3">5.2.4 &nbsp;<a href="#section-Resolving-the-Event-Relatedness">Resolving the Event-Relatedness</a></div>
               <div class="toc2">5.3 &nbsp;<a href="#dt-GTS">General Timing Specification (GTS) specializes SET&lt;TS&gt;</a></div>
               <div class="toc3">5.3.1 &nbsp;<a href="#section-Convex-Hull">Convex Hull</a></div>
               <div class="toc3">5.3.2 &nbsp;<a href="#section-GTS-as-a-Sequence-of-Occurrence-Intervals">GTS as a Sequence of Occurrence Intervals</a></div>
               <div class="toc3">5.3.3 &nbsp;<a href="#section-Interleaving-Schedules-and-Periodic-Hull">Interleaving Schedules and Periodic Hull</a></div>
               <div class="toc3">5.3.4 &nbsp;<a href="#prop-GTS.literal">Literal Form</a></div>
               <h3>Appendices</h3>
               
               <div class="toc1">A &nbsp;<a href="#section-Informative-Types">Informative Types</a></div>
               <div class="toc2">A.1 &nbsp;<a href="#dt-PPD">Parametric Probability Distribution (PPD) specializes T</a></div>
               <div class="toc3">A.1.1 &nbsp;<a href="#prop-PPD.standardDeviation">Standard Deviation : QTY</a></div>
               <div class="toc3">A.1.2 &nbsp;<a href="#prop-PPD.distributionType">Probability Distribution Type : CE</a></div>
               <div class="toc3">A.1.3 &nbsp;<a href="#prop-PPD.literal">Literal Form</a></div>
               <div class="toc2">A.2 &nbsp;<a href="#dt-PPD_REAL">Probability Distribution over Real Numbers (PPD&lt;REAL&gt;) specializes PPD</a></div>
               <div class="toc3">A.2.1 &nbsp;<a href="#section-%0A%09%09%09%09%09%09Converting-a-real-number-(REAL)-to-an-uncertain-real-number%0A%09%09%09%09%09%09(PPD<REAL&gt;)%0A%09%09%09%09%09">
                     						Converting a real number (REAL) to an uncertain real number
                     						(PPD&lt;REAL&gt;)
                     					</a></div>
               <div class="toc3">A.2.2 &nbsp;<a href="#prop-PPD_REAL.literal">Concise Literal Form</a></div>
               <div class="toc2">A.3 &nbsp;<a href="#dt-PPD_PQ">Parametric Probability Distributions over Physical  Quantities (PPD&lt;PQ&gt;) specializes PPD</a></div>
               <div class="toc3">A.3.1 &nbsp;<a href="#prop-PPD_PQ.literal">Concise Literal Form</a></div>
               <div class="toc2">A.4 &nbsp;<a href="#dt-PPD_TS">Probability Distribution over Time Points (PPD&lt;TS&gt;) specializes PPD</a></div>
               <div class="toc3">A.4.1 &nbsp;<a href="#section-Converting-TS-to-PPD<TS&gt;">Converting TS to PPD&lt;TS&gt;</a></div>
               <hr>
            </td>
         </tr>
         <tr>
            <td width="100%" colspan="3">
               <h2><a name="prefBegin">Preface</a></h2>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table>
                  <!--divN/head-->
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>
                        <h2><a name="datyp2preface"></a>i 
                        </h2>
                     </td>
                     <td class="body_col">
                        <h2>Preface</h2>
                     </td>
                  </tr>
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>&nbsp;</td>
                     <td class="body_col">
                        <p>
                           				This document specifies the HL7 Version 3 Data Types on an
                           				abstract layer, independent of representation. By "independent
                           				of representation" we mean independent of both abstract syntax
                           				as well as implementation in any particular implementation technology.
                           			
                        </p>
                     </td>
                  </tr>
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>&nbsp;</td>
                     <td class="body_col">
                        <p>
                           				This document is accompanied by Implementation Technology
                           				Specifications (ITS). The ITS documents can serve as a quick
                           				compendium to the data types that is more practically oriented 
                           				toward the representation in that particular implementation
                           				technology.
                           			
                        </p>
                     </td>
                  </tr>
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>&nbsp;</td>
                     <td class="body_col">
                        <p>
                           				Vocabulary tables within this specification list the current contents
                           				of vocabulary domains for ease of reference by the reader. However, at
                           				any given time the normative source for these domains is the
                           				vocabulary tables in the RIM database. For some large domains, only a
                           				sample of possible values is shown. The complete domains can be
                           				referenced in the vocabulary tables by looking up the domain name
                           				associated with the table in the RIM vocabulary tables.
                           			
                        </p>
                     </td>
                  </tr>
                  <!--divN/head-->
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>
                        <h2><a name="datyp2acks"></a>ii 
                        </h2>
                     </td>
                     <td class="body_col">
                        <h2>Acknowledgements</h2>
                     </td>
                  </tr>
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>&nbsp;</td>
                     <td class="body_col">
                        <p>
                           				This specification is the result of many years of intense work through
                           				e-mail, telephone conferences and meeting discussions. And ballot
                           				reconciliation. 
                           
                           				Thanks go to many individuals who participated at various times in
                           				design, discussions and ballot review.
                           
                           				Gunther Schadow (Regenstrief Institute for Health Care) chaired this
                           				task force, and is the main author of this document. Paul V. Biron
                           				(Kaiser Permanente), Doug Pratt (Siemens), Lloyd McKenzie (IBM), and
                           				Grahame Grieve (Kestral Computing Pty. Ltd.) have served as co-editors
                           				at various times. 
                           
                           				Major contributions of thoughts and support come from Mark Tucker
                           				(Regenstrief Institute), George Beeler, Stan Huff (Intermountain
                           				Health Care), as well as Mike Henderson (Kaiser Permanente), Anthony
                           				Julian (Mayo), Joann Larson (Kaiser Permanente), Mark Shafarman (Oacis
                           				Healthcare Systems), Wes Rishel (Gartner Group), and Robin Zimmerman
                           				(Kaiser Permanente).
                           
                           				Acknowledgements for their critical review and infusion of ideas go to
                           				Bob Dolin (Kaiser Permanente), Clem McDonald (Regenstrief Institute),
                           				Kai Heitmann (HL7 Germany), Rob Seliger (Sentillion), and Harold
                           				Solbrig (Mayo Clinic).
                           
                           				Vital support came from the members of the task force, Laticia
                           				Fitzpatrick (Kaiser Permanente), Matt Huges, Randy Marbach (Kaiser
                           				Permanente), Larry Reis (Wizdom Systems), Carlos Sanroman (Kaiser
                           				Permanente), Greg Thomas (Kaiser Permanente). Thanks James Case
                           				(University of California, Davis), Norman Daoust (Partners HealthCare
                           				Systems), Irma Jongeneel (HL7 The Netherlands), Michio Kimura (HL7
                           				Japan), John Molina (SMS), Richard Ohlmann (McKessonHBOC), David Rowed
                           				(HL7 Australia), and Klaus Veil (Macquarie Health Corp., HL7
                           				Australia), for sharing their expertise in critical questions.
                           
                           				This work was made possible by the Regenstrief Institute for Health
                           				Care.
                           			
                        </p>
                     </td>
                  </tr>
                  <!--divN/head-->
                  <tr>
                     <td class="graphic_col" nowrap>&nbsp;</td>
                     <td class="number_col" nowrap>
                        <h2><a name="datyp2ToDo"></a>iii 
                        </h2>
                     </td>
                     <td class="body_col">
                        <h2>Outstanding issues</h2>
                     </td>
                  </tr>
                  <tr>
                     <td class="graphic_col" nowrap> &nbsp; </td>
                     <td class="number_col" nowrap>&nbsp; </td>
                     <td class="body_col">
                        <ul style="margin-left:20px;">
                           <li>
                              <p>
                                 						Conformance framework for constraining data types
                                 					
                              </p>
                           </li>
                        </ul>
                     </td>
                  </tr>
               </table>
               <hr title="Separator from body">
            </td>
         </tr>
         <!--divN/head-->
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h2><a name="datyp2intro"></a>1 
               </h2>
            </td>
            <td class="body_col">
               <h2>Introduction</h2>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introwhat"></a>1.1 
               </h3>
            </td>
            <td class="body_col">
               <h3>What is a Data Type?</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Every data element has a data type. Data types define the meaning
                  					(semantics) of data values that can be assigned to a data
                  					element. Meaningful exchange of data requires that we know the
                  					definition of values so exchanged. This is true for complex "values"
                  					such as business messages as well as for simpler values such as
                  					character strings or integer numbers.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					According to ISO 11404, a data type is "a set of distinct values,
                  					characterized by properties of those values and by operations on
                  					those values."  A data type has <em>intension</em> and
                  					<em>extension</em>. Intentionally, the data type defines the
                  					properties exposed by every data value of that type. Extensionally,
                  					data types have a set of data values that are of that type (the type's
                  					"value set").
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Semantic properties of data types are what ISO 11404 calls "properties
                  					of those values and [...] operations on those values."  A semantic
                  					property of a data type is referred to by a name and has a value for
                  					each data value. The value of a data value's property must itself be a
                  					value defined by a data type - no data value exists that would not be
                  					defined by a data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Data types are thus the basic building blocks used to construct any
                  					higher order meaning: messages, computerized patient record documents,
                  					or business objects and their transactions. What, then, is the
                  					difference between a data type and a message, document, or business
                  					object? <strong>Data type values stand for themselves, the
                     					value is all that counts, neither identity nor state or changing of
                     					state is defined for a data value.</strong> Conversely in business
                  					objects, we track state and identity; the properties of an identical
                  					object might change between now and later. Not so with data values: a
                  					data value and its properties are constant. For example, number 5 is
                  					always number 5, there is no difference between this number 5 and that
                  					number 5 (no identity distinguished from value), number 5 never
                  					changes to number 6 (no change of state). One can think of data values
                  					as immutable objects where identity does not matter (identity and
                  					equality are the same.)<a name="fn-src1"></a><a href="#fn1"><sup style="font-size: smaller">1</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introrep"></a>1.2 
               </h3>
            </td>
            <td class="body_col">
               <h3>Representation of Data Values</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Data values can be represented through various symbols but the data
                  					value's meaning is not bound to any particular representation.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, cardinal numbers (non-negative integers) are defined -
                  					intentionally - as a data type where each value has a successor value,
                  					where zero is the successor of no other cardinal value. Based on this
                  					definition we can define addition, multiplication, and other
                  					mathematical operations. Whatever representation reflects the rules we
                  					stated in the intentional definition of the cardinal data type is a
                  					valid representation of cardinal numbers. Examples for valid cardinal
                  					number representations are decimal digit strings, bags of glass
                  					marbles, or scratches on a wall. The number five is represented by the
                  					word "five" by the Arabic number "5" or the Roman number "V". The
                  					representation does not matter as long as it conforms to the semantic
                  					definition of the data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Another example, the Boolean data type is defined by its extension,
                  					the two distinct values <em>true</em> and <em>false</em> and
                  					the rules of negation and combining these values in conjunction and
                  					disjunction. The representation of Boolean values can be the words
                  					"true" and "false," "yes" and "no," the numbers 0 and 1, any two signs
                  					that are distinct from each other. The representation of data types
                  					does not matter as long as it conforms to the semantic definition of
                  					the data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This specification defines the semantics, the meaning of the HL7 data
                  					types. <strong>This specification is about semantics only,
                     					independent from representational and operational concerns or specific
                     					implementation technologies.</strong> Additional standards for
                  					representing the data values defined here are being defined for
                  					various technological approaches. These standards are called
                  					"Implementable Technology Specification" (ITS.) Those ITS define how
                  					values are represented so that they conform to the semantic
                  					definitions of this specifications, this may include syntaxes for
                  					character or binary representations, and computer procedures to act on
                  					the representation of data values. The meaning of these ITS
                  					representations communicated, generated, and processed in computer
                  					programs, is defined based on this standard, the semantic data type
                  					specification.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introprop"></a>1.3 
               </h3>
            </td>
            <td class="body_col">
               <h3>Properties of Data Values</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Data values have properties defined by their data type. The "fields"
                  					of "composite data types" are the most common example of such
                  					properties. However, more generally one should think of a data value's
                  					property as logical predicates or as mathematical functions; in
                  					simpler but still correct terms, properties are questions one can ask
                  					about a data value to receive another data value as an answer.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A property is referred to by its name. For example, the data type
                  					<em>integer</em> may have a property named "sign."  A property has
                  					a domain, which is the set of possible "answer" values. The set of
                  					possible "answer" values is defined by the property's data type, but
                  					the domain of a property may be a subset of the data type's value set.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A property may also have arguments, additional information one must
                  					supply with a question to get an answer. For example, an important
                  					property of an integer number is that one integer <em>plus</em>
                  					another integer results in another integer, so the plus property of
                  					one integer needs an argument: the other integer.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Whether semantic properties have arguments is not a fundamentally
                  					relevant distinction. A data type's semantic property without
                  					arguments is not necessarily a "field" of a "composite" data type. For
                  					example, for integer values, we can define the property
                  					<em>is-zero</em> that has the Boolean value <em>true</em> when
                  					the number is zero and <em>false</em> when the number is not
                  					zero. This does not mean that <em>is-zero</em> must be an explicit
                  					component of any integer representation.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A data type's semantic property with arguments has no specific
                  					operational notions such as "procedure call," "passing arguments,"
                  					"return values," "throwing exceptions," etc. These are all concepts of
                  					computer systems implementation of data types - but these operational
                  					notions are irrelevant for the semantics of data types.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>This specification is about semantics of data
                     					types only. Neither is it about value representation syntax (not even
                     					an abstract syntax), nor is it about an operational interface to the
                     					data values.</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2intronabs"></a>1.4 
               </h3>
            </td>
            <td class="body_col">
               <h3>Need for Abstraction</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Why does this specification make such a big issue
                     					about its being abstract from representation syntax as well as
                     					operational implementation?</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					HL7 needs this kind of abstract semantic data type specification for a
                  					very practical purpose. One important design feature of HL7 version 3
                  					is its openness towards representation and implementation
                  					technologies. All HL7 version 3 specifications are supposed to be done
                  					in a form independent from specific representation and implementation
                  					technologies. HL7 acknowledges that, while at times some
                  					representation and implementation technologies may be more popular
                  					than others, technology is going to change - and with changing
                  					technology, representations of data values will change. HL7 standards
                  					are primarily targeted to healthcare domain information, independent
                  					from the technology supporting this information. HL7 expects that
                  					specifications defined independent from today's technology will
                  					continue to be useful, even after the next technological "paradigm
                  					shift".
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The issue of data types is closer to implementation technology than
                  					most other HL7 information standards - and therein lays a certain
                  					danger that we define data types too dependent on current
                  					implementation technologies.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The majority of HL7 standards are about complex business
                  					objects. Complex business objects with many informational attributes
                  					can be specified as abstract syntax, where components are eventually
                  					defined in terms of data types. Conversely, defining data types in
                  					terms of abstract syntax is of little use because the components of
                  					such abstract syntax constructs would still have to have data
                  					types.<a name="fn-src2"></a><a href="#fn2"><sup style="font-size: smaller">2</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Why is this specification so circular?
                     					Why is the data type "ANY" defined in terms of specializations
                     					of itself?</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This specification needs to be independent of any particular implementation,
                  					and is therefore abstract, and not intended to be implementable. In this sense,
                  					the circularity is not a problem, since it does not introduce any uncertainty
                  					about what this specification says.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Why doesn't this specification define a set of
                     					primitive data types based on which composite data types could be
                     					defined simply as abstract syntax?</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Any concrete implementation of the HL7 standards must ultimately use
                  					the built-in data types of their implementation technology. Therefore,
                  					we need a very flexible mapping between HL7 abstract data types and
                  					those data types built into any specific implementation
                  					technology. With a semantic specification, an Implementable Technology
                  					Specification (ITS) can conform simply by stating a mapping between
                  					the constructs of its technology and the HL7 version 3 data type
                  					semantics. Whether a data type is primitive of composite is irrelevant
                  					from a semantic perspective, and the answer may be different for
                  					different implementation technologies.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, this standard specifies a character string as a data type
                  					with many properties (e.g., charset, language, etc.)  However, in many
                  					Implementation Technologies, character strings are primitive first
                  					class data types. We encourage that these native data types be used
                  					rather than a structure that slavishly represents all the semantic
                  					properties as "components."  This specification only requires that the
                  					properties defined for data values can somehow be inferred from
                  					whatever representation is chosen, it does not matter how these values
                  					are represented. Whether "primitive" or "composite", with few or many
                  					"components", as "fields" or "methods" - this is all irrelevant.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For another example, a decimal representation, a floating-point
                  					register and a scaled integer are all possible native representations
                  					of real numbers for different implementation technologies. Some of
                  					these representations have properties that others do not have. Scaled
                  					integers, for instance, have a fixed precision and a relatively small
                  					range. Floating-point values have variable precision and a large
                  					range, but floating-point values lose any information about
                  					precision. Decimal representations are of variable precision and
                  					maintain the precision information (yet are slow to processing.)  The
                  					data type semantics must be independent from all these accidental
                  					properties of the various representations, and must define the
                  					essential properties that any technology should be able to represent.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introndts"></a>1.5 
               </h3>
            </td>
            <td class="body_col">
               <h3>Need for an HL7 Data Type Standard</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Why does HL7 need its own data type standard? Why
                     					can't HL7 simply adopt a standard defined by some other body?</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					As noted in the previous section, all HL7 implementation technologies
                  					have some data type system, but there are differences among the data
                  					type systems between implementation technologies. In addition, many
                  					implementation technologies' data type systems are not powerful enough
                  					to express the concepts that matter for the HL7 application layer.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, few implementation technologies provide the concepts of
                  					physical quantities, precision, ranges, missing information, and
                  					uncertainty that are so relevant in scientific and health care
                  					computing.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					On the other hand, implementation technologies do make distinctions
                  					that are not relevant from the abstract semantics viewpoint, e.g.,
                  					fixed point vs. floating-point real numbers; 8, 16, 32, or 64-bit
                  					integers; date vs. timestamp.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A number of data type systems have been used as input to this
                  					specification. These include the type systems of many major
                  					programming languages, including BASIC, Pascal, MODULA-2, C, C++,
                  					JAVA, ADA, LISP and SCHEME. This also includes type systems of
                  					language-independent implementation technologies, such as Abstract
                  					Syntax Notation One (ASN.1), Object Management Group's (OMG) Interface
                  					Definition Language (IDL) and Object Constraint Language (OCL), SQL 92
                  					and SQL 99, the ISO 11404 language independent data types, and XML
                  					Schema Part 2 data types. Health care standards related data types
                  					have been considered as well, among these HL7 version 2.x, types used
                  					by CEN TC 251 messages and Electronic Health Record Architecture
                  					(EHCRA) and DICOM.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introreq"></a>1.6 
               </h3>
            </td>
            <td class="body_col">
               <h3>Requirements</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The data types described in this specification are designed
                  					to meet a number of requirements. These include
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     						Modelling considerations
                     					
                  </li>
                  <li>
                     						Implementation Considerations
                     					
                  </li>
                  <li>
                     						Compatibility with other data type standards
                     					
                  </li>
                  <li>
                     						Functional Requirements identified in other HL7 standards
                     						where the data types are used
                     					
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Of these, the last is the most important consideration. These data types are designed
                  					to deliver the functionality required throughout the HL7 standards. These requirements
                  					are not always compatible, and throughout this specification there is a number of places
                  					where particular design features are less than optimal for one of the 4 considerations
                  					listed above. In a number of these places, the requirements that led to this design
                  					feature are described in a requirements section. These requirements sections are only
                  					informative, not normative.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="requirement"><strong>Requirement</strong><p>
                           						The Reference Information Model defines a number of reference classes on which
                           						all domain information models are based. Each of these reference classes has
                           						a series of attributes which has an assigned type. Where the reference classes
                           						are used (cloned into) in domain models, the types in the reference classes may
                           						be replaced by other types to clarify and constrain the use of the attribute in
                           						the clone classes.
                           					
                        </p>
                        <p>
                           						This data types specification must define the rules for which data
                           						types can be substituted in this fashion. This specification chooses
                           						to use the specialization metaphor as a basis for the substitution
                           						rules, since this is widely understood and used method in theory and
                           						practice, and because these rules are more easily understood and
                           						managed than the alternatives. This use of specialization may lead to
                           						designs that may appear unfamiliar to some.
                           					
                        </p>
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introform"></a>1.7 
               </h3>
            </td>
            <td class="body_col">
               <h3>Forms of Data Type Definitions</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This specification defines data types in several forms, using textual
                  					description, UML diagrams, tables, and a formal definition.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Formal-Data-Type-Definition-Language"></a>1.7.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Formal Data Type Definition Language</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A formal definition of data types is used in order to clarify the
                  						semantics of the proposed types as unambiguously as possible. This
                  						data type definition language is described in detail in
                  						<a href="#dtdl-introduction">Introduction to the Formal Data Type Definition Language (DTDL)
                     			(&sect;
                     			1.9 )</a>. Formal languages make crisp essential statement and 
                  						are therefore accessible to some formal argument of proof or rebuttal. However, 
                  						the terseness of such formal statements may also be difficult to
                  						understand by humans. Therefore, all the important inferences from the
                  						formal statements are also included as plain English statements.
                  				  
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Tables-of-Properties"></a>1.7.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Tables of Properties</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For a quick overview at the beginning of many data types this
                  						specification contains tables listing "primary" properties. "Primary"
                  						properties are a somewhat fuzzy notion of those properties that are
                  						more likely to be thought of as "fields" when the data type where
                  						implemented as a record, or that are expected to be used more
                  						often. These tables are provided to facilitate an overview of the
                  						content and purpose of data types. There is no requirement that the
                  						properties listed in these tables be represented as fields, and these
                  						tables are <strong>not</strong> abstract syntax definitions.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Each row of the property tables describes one property with the
                  						following columns:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li><strong>Name</strong> - the name of the property as stated in
                     							the formal definition. For some data types, the name field of the first
                     							property may be empty. This may happen in those data types that are
                     							defined as extension of other data types and when it is not useful for
                     							the summary of the child to show any properties of the parent.
                     						
                  </li>
                  <li><strong>Type</strong> - the data type of that property.
                     						
                  </li>
                  <li><strong>Definition</strong> - a short text describing
                     							the meaning of the property.
                     						
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Unified-Modeling-Language-(UML)-Diagrams"></a>1.7.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Unified Modeling Language (UML) Diagrams</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The Unified Modeling Language (UML) is used for a graphical
                  						presentation of how data types relate to each other . Data types are
                  						shown as UML classes using the shortname for the class. Properties of
                  						types are shown as UML operations. Generic types are shown as UML
                  						parameterized classes, with UML realization links relating their
                  						instantiations.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Much of the detail of the data type declarations cannot be represented
                  						in the UML representation. Therefore the formal definition of the data
                  						types in the Data Type Definition Language (DTDL) should be used for
                  						detailed specification of the data types.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some of the constraints from the DTDL are represented as constraints on the
                  						operations. Where constrains are shown, they are statements that will be true
                  						and are taken from the DTDL specification
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The UML Diagrams use a stereotype "mixin". The mixin stereotype applies to
                  						a parameterized class, and denotes that the class specializes the parameter
                  						type and expresses all the properties of the type T in addition to it's own
                  						properties   
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="datyp2introovw"></a>1.8 
               </h3>
            </td>
            <td class="body_col">
               <h3>Overview of Data Types</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-Main.gif" target="_blank" border="0">UML Overview of Data Types (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-summary-table">&nbsp;</a>
                     			Table
                     			1: 
                     Overview of HL7 version 3 data types
                     
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Symbol</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>DataValue</td>
                        <td>ANY</td>
                        <td>
                           					Defines the basic properties of every data value. This is an abstract
                           					type, meaning that no value can be just a data value without belonging
                           					to any concrete type. Every concrete type is a specialization of this
                           					general abstract DataValue type.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Boolean</td>
                        <td>BL</td>
                        <td><em>BL</em> stands for the values of two-valued logic. A <em>BL</em>
                           					value can be either <em>true</em> or <em>false</em>, or, as
                           					any other value may be NULL.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>BooleanNonNull</td>
                        <td>BN</td>
                        <td><em>BN</em> constrains the boolean type so that the value may not be NULL.
                           					This type is created for use within the data types specification where it is not
                           					appropriate for a null value to be used
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Encapsulated Data</td>
                        <td>ED</td>
                        <td>
                           					Data that is primarily intended for human interpretation or for
                           					further machine processing outside the scope of HL7. This includes
                           					unformatted or formatted written language, multimedia data, or
                           					structured information in as defined by a different standard (e.g.,
                           					XML-signatures.)  Instead of the data itself, an <em>ED</em>
                           					may contain only a reference (see TEL.) Note that
                           					ST is a specialization of the
                           					<em>ED</em> where the mediaType is fixed to text/plain.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Character String</td>
                        <td>ST</td>
                        <td>
                           					The character string data type stands for text data, primarily
                           					intended for machine processing (e.g., sorting, querying, indexing,
                           					etc.) Used for names, symbols, and formal expressions.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Concept Descriptor</td>
                        <td>CD</td>
                        <td>
                           					A <em>CD</em> represents any kind of concept usually by
                           					giving a code defined in a code system.
                           
                           					A <em>CD</em> can contain the original text or phrase that
                           					served as the basis of the coding and one or more translations into
                           					different coding systems.
                           
                           					A <em>CD</em> can also contain qualifiers to describe, e.g., the
                           					concept of a "left foot" as a postcoordinated term built from the
                           					primary code "FOOT" and the qualifier "LEFT".
                           
                           					In cases of an exceptional value, the <em>CD</em> need not contain a code
                           					but only the original text describing that concept.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Coded Simple Value</td>
                        <td>CS</td>
                        <td>
                           					Coded data in its simplest form, where only the code is not predetermined.
                           					The code system and code system version are fixed by the context in which
                           					the <em>CS</em> value occurs. <em>CS</em> is used for coded attributes that have a single
                           					HL7-defined value set.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Coded Ordinal</td>
                        <td>CO</td>
                        <td>
                           					Coded data, where the coding system from which the code comes is ordered.
                           					<em>CO</em> adds semantics related to ordering so that models
                           					that make use of such domains may introduce model elements that involve
                           					statements about the order of the terms in a domain.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Coded With Equivalents</td>
                        <td>CE</td>
                        <td>
                           					Coded data that consists of a coded value and, optionally, coded
                           					value(s) from other coding systems that identify the same
                           					concept. Used when alternative codes may exist.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Character String with Code</td>
                        <td>SC</td>
                        <td>
                           					A character string that optionally may have a code attached. The text
                           					must always be present if a code is present.  The code is often a
                           					local code.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Instance Identifier</td>
                        <td>II</td>
                        <td>
                           					An identifier that uniquely identifies a thing or object. Examples
                           					are object identifier for HL7 RIM objects, medical record number,
                           					order id, service catalog item id, Vehicle Identification Number
                           					(VIN), etc. Instance identifiers are defined based on ISO object
                           					identifiers.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Telecommunication Address</td>
                        <td>TEL</td>
                        <td>
                           					A telephone number (voice or fax), e-mail address, or other locator
                           					for a resource mediated by telecommunication equipment. The address is
                           					specified as a Universal Resource Locator (URL) qualified by time
                           					specification and use codes that help in deciding which address to use
                           					for a given time and purpose.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Postal Address</td>
                        <td>AD</td>
                        <td>
                           					Mailing and home or office addresses. A sequence of address parts,
                           					such as street or post office Box, city, postal code, country, etc.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Entity Name</td>
                        <td>EN</td>
                        <td>
                           					A name for a person, organization, place or thing. A sequence of name
                           					parts, such as given name or family name, prefix, suffix, etc.
                           					Examples for entity name values are "Jim Bob Walton, Jr.", "Health
                           					Level Seven, Inc.", "Lake Tahoe", etc. An entity name may be as simple
                           					as a character string or may consist of several entity name parts,
                           					such as, "Jim", "Bob", "Walton", and "Jr.", "Health Level Seven" and
                           					"Inc.", "Lake" and "Tahoe".
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Trivial Name</td>
                        <td>TN</td>
                        <td>
                           					A restriction of entity name that is effectively a simple string used
                           					for a simple name for things and places.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Person Name</td>
                        <td>PN</td>
                        <td>
                           					An EN used when the named Entity
                           					is a Person. A sequence of name parts, such as given name or
                           					family name, prefix, suffix, etc. A name part is a restriction of
                           					entity name part that only allows those entity name parts qualifiers
                           					applicable to person names. Since the structure of entity name is
                           					mostly determined by the requirements of person name, the restriction
                           					is very minor.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Organization Name</td>
                        <td>ON</td>
                        <td>
                           					An EN used when the named Entity
                           					is an Organization. A sequence of name parts.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Integer Number</td>
                        <td>INT</td>
                        <td>
                           					Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise numbers
                           					that are results of counting and enumerating. Integer numbers are
                           					discrete, the set of integers is infinite but countable.  No arbitrary
                           					limit is imposed on the range of integer numbers. Two NULL flavors are
                           					defined for the positive and negative infinity.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Real Number</td>
                        <td>REAL</td>
                        <td>
                           					Fractional numbers. Typically used whenever quantities are measured,
                           					estimated, or computed from other real numbers.  The typical
                           					representation is decimal, where the number of significant decimal
                           					digits is known as the precision.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Ratio</td>
                        <td>RTO</td>
                        <td>
                           					A quantity constructed as the quotient of a numerator quantity divided
                           					by a denominator quantity. Common factors in the numerator and
                           					denominator are not automatically cancelled out.  The <em>RTO</em> data
                           					type supports titers (e.g., "1:128") and other quantities produced by
                           					laboratories that truly represent ratios. Ratios are not simply
                           					"structured numerics", particularly blood pressure measurements
                           					(e.g. "120/60") are not ratios. In many cases the REAL
                           					should be used instead of the <em>RTO</em>.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Physical Quantity</td>
                        <td>PQ</td>
                        <td>
                           					A dimensioned quantity expressing the result of measuring.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Monetary Amount</td>
                        <td>MO</td>
                        <td>
                           					An <em>MO</em> is a quantity expressing the amount of money in some
                           					currency. Currencies are the units in which monetary amounts are
                           					denominated in different economic regions. While the monetary amount
                           					is a single kind of quantity (money) the exchange rates between the
                           					different units are variable.  This is the principle difference
                           					between PQ and <em>MO</em>, and the reason why
                           					currency units are not physical units.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Point in Time</td>
                        <td>TS</td>
                        <td>
                           					A quantity specifying a point on the axis of natural time. A point
                           					in time is most often represented as a calendar expression.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Set</td>
                        <td>SET</td>
                        <td>
                           					A value that contains other distinct values in no particular order.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Sequence</td>
                        <td>LIST</td>
                        <td>
                           					A value that contains other discrete (but not necessarily distinct) values in a defined sequence. 
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Bag</td>
                        <td>BAG</td>
                        <td>
                           					An unordered collection of values, where each value can be contained
                           					more than once in the collection.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Interval</td>
                        <td>IVL</td>
                        <td>
                           					A set of consecutive values of an ordered base data type.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>History</td>
                        <td>HIST</td>
                        <td>
                           					A set of data values that have a valid-time property and thus
                           					conform to the HXIT type. The history information is
                           					not limited to the past; expected future values can also appear.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Uncertain Value - Probabilistic</td>
                        <td>UVP</td>
                        <td>
                           					A generic data type extension used to specify a probability expressing
                           					the information producer's belief that the given value holds.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Periodic Interval of Time</td>
                        <td>PIVL</td>
                        <td>
                           					An interval of time that recurs periodically. <em>PIVL</em> has
                           					two properties, phase and period.
                           					phase specifies the "interval
                           					prototype" that is repeated every ..
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Event-Related Periodic Interval of Time</td>
                        <td>EIVL</td>
                        <td>
                           					Specifies a periodic interval of time where the recurrence is based on
                           					activities of daily living or other important events that are
                           					time-related but not fully determined by time.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>General Timing Specification</td>
                        <td>GTS</td>
                        <td>
                           					A &lt;dt-TS&gt;, specifying the timing of events and actions
                           					and the cyclical validity-patterns that may exist for certain kinds of
                           					information, such as phone numbers (evening, daytime), addresses (so
                           					called "snowbirds," residing closer to the equator during winter and
                           					farther from the equator during summer) and office hours.
                           				
                        </td>
                     </tr>
                     <tr>
                        <td>Parametric Probability Distribution</td>
                        <td>PPD</td>
                        <td>
                           					A generic data type extension specifying uncertainty of quantitative
                           					data using a distribution function and its parameters. Aside from the 
                           					specific parameters of the distribution, a mean (expected value) and 
                           					standard deviation is always given to help maintain a minimum layer
                           					of interoperability if receiving applications cannot deal with a
                           					certain probability distribution.
                           				
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dtdl-introduction"></a>1.9 
               </h3>
            </td>
            <td class="body_col">
               <h3>Introduction to the Formal Data Type Definition Language (DTDL)</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b><strong>This is not an API specification.</strong> While
                  						this formal language might resemble some programming language or
                  						interface definition language, it is not intended to define the
                  						details of programs and other means of implementation. The formal
                  						definitions are a normative part of this specification, but this
                  						particular language needs not be implemented or used in conformant
                  						systems; nor need all the semantic properties be implemented or used
                  						by conformant systems. The internal working of systems, their way to
                  						implement data types, <strong>their functionality and
                     						services is entirely out of scope of this specification. The formal
                     						definition only specifies the meaning</strong> of the data values
                  						through making statements how one would theoretically expect these
                  						values to relate and behave.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This formal data type definition language<a name="fn-src3"></a><a href="#fn3"><sup style="font-size: smaller">3</sup></a>
                  						specifies:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     						type name and short name;
                     					
                  </li>
                  <li>
                     						named values of a fully enumerated extension;
                     					
                  </li>
                  <li>
                     						semantic properties, unary, binary, and higher order properties;
                     					
                  </li>
                  <li>
                     						invariants, i.e. constraints over the properties.
                     					
                  </li>
                  <li>
                     						allowable type conversions;
                     					
                  </li>
                  <li>
                     						syntax of character string value literals (if any);
                     					
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Definition of a data type occurs in two steps. First, the data type is
                  					declared. The declaration claims a name for a new data type with a
                  					list of names, types, and signatures of the new type's semantic
                  					properties. This declares, not defines the type. The definition occurs
                  					in both logic statements about what is always true about this type's
                  					values and their properties (invariant statements.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Declaration"></a>1.9.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Declaration</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Every data type is declared in a form that begins with the keyword 
                  						<strong>type</strong>. For example, the following is the 
                  						header of a declaration for the data type Boolean that has the short 
                  						name alias <a class="termref" href="#dt-BL">BL</a> and specializes the data type
                  						ANY.<a name="fn-src4"></a><a href="#fn4"><sup style="font-size: smaller">4</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type Boolean alias BL specializes ANY
   values(true, false)
{
   BL  not;
   BL  and(BL x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The Boolean data type declaration also contains a
                  						<strong>values</strong>-clause that declares the Boolean's
                  						complete set of values (its extension) as named entities. These named
                  						values are also valid character string literals. None of the other
                  						data types defined in this specification has a finite value set, which
                  						is why the <strong>values</strong>-clause is unique to the
                  						Boolean. In the marked-up formal language, value names use Italics
                  						font.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The block in curly braces following the header contains declarations
                  						of the semantic properties that hold for every value of the data
                  						type. A semicolon terminates each property declaration; and another
                  						semicolon after the closing curly brace terminates the data type
                  						declaration.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A property declaration mentions from left to right: (1) the data type
                  						of the property's value domain, (2) the property name, and (3) an optional
                  						argument list. The argument list of a property is enclosed in
                  						parentheses containing a sequence of argument declarations. Each
                  						argument is declared by the data type name and argument name. Semantic
                  						properties without arguments do not use an empty argument
                  						list.<a name="fn-src5"></a><a href="#fn5"><sup style="font-size: smaller">5</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <strong>specializes</strong>-clause means (a)
                  						inheritance of properties from the genus to the species, and (b)
                  						substitutability of values of the species type for variables of the
                  						genus type. Specialization can include the definition of additional
                  						properties and the specification of constraints on inherited
                  						properties for the specialized type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An example for inheritance is: when <a class="termref" href="#dt-CD">CD</a> has the property code
                  						and <a class="termref" href="#dt-CS">CS</a> specializes <a class="termref" href="#dt-CD">CD</a> then
                  						<a class="termref" href="#dt-CS">CS</a> also has this property code even though isNull
                  						is not listed explicitly in the property declaration of <a class="termref" href="#dt-BL">BL</a>.
                  						An example for substitutability is: when a property is declared as of a data
                  						type <a class="termref" href="#dt-CD">CD</a>, and <a class="termref" href="#dt-CS">CS</a> specializes
                  						<a class="termref" href="#dt-CD">CD</a>, then a value of such property may be of type
                  						<a class="termref" href="#dt-CS">CS</a>. In other words, substitutability is the same as
                  						subsumption of all values of type <a class="termref" href="#dt-CS">CS</a> being also values
                  						of type <a class="termref" href="#dt-CD">CD</a>.<a name="fn-src6"></a><a href="#fn6"><sup style="font-size: smaller">6</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <strong>type</strong>-declaration may be qualified by
                  						the keyword <strong>abstract</strong>, <strong>protected.</strong>, or <strong>private</strong>. An abstract type is a type where no
                  						value can be just of this type without belonging to a concrete
                  						specialization of the abstract. A protected type is a type that is
                  						used inside this specification but no property outside this
                  						specification should be declared of a protected type. A private type
                  						is an internal "helper" abstraction, defined only for the purpose of
                  						defining some aspect of the semantics of deata types but that is not
                  						used even as the type of another protected or public type's
                  						property.<a name="fn-src7"></a><a href="#fn7"><sup style="font-size: smaller">7</sup></a>
                  						(We also use the qualifier <strong>private</strong> at one
                  						point. Private types are only specified for the sake of formal
                  						definition of other types and are not used in any form outside this
                  						specification.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Invariant-Statements"></a>1.9.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Invariant Statements</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The declaration of semantic properties, their names, data types, and
                  						arguments provide only clues as to what the new data type might be
                  						about. The true definition lies in the invariant statements. Invariant
                  						statements are logical statements that are true at all times.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Throughout this specification, invariant statements are provided in a
                  						formal syntax but are also written in plain English. The advantage of
                  						the formal syntax is that it can be interpreted unambiguously, and
                  						that it is strongly typed. The advantage of plain English statements
                  						is that they are more understandable, especially to those untrained in
                  						reading formal languages.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The formal syntax does help to sharpen the decisiveness of this
                  						specification. In some cases, however, the full semantics of a type
                  						are beyond what can be fully expressed in such invariant
                  						statements. The combination of both plain and formal language helps to
                  						make this specification more clear.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Invariant statements are formed using the 
                  						<strong>invariant</strong> keyword that declares one or more
                  						variables in the same form as an argument list of a property. The
                  						invariant statement can contain a <strong>where</strong>
                  						clause that constrains the arguments for the entire invariant
                  						body. The invariant body is enclosed in curly braces. It contains a
                  						list of assertions that must all be true.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BL x)
      where x.nonNull {
   x.and(true).equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The semantics of the invariant statement is a logic predicate with a
                  						universal quantifier ("for all").
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The above invariant statement can be read in English as "For all
                  						Boolean values x, where x is non-NULL it holds that x AND
                  						<em>true</em> equals x."  All properties should be named such that
                  						one can read the assertions like English sentences.<a name="fn-src8"></a><a href="#fn8"><sup style="font-size: smaller">8</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The argument list of an invariant statement need not be specified if no such 
                  						argument is needed.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant {
   true.not.equal(false);
   false.not.equal(true);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Assertion-Expressions"></a>1.9.2.1 
               </h5>
            </td>
            <td class="body_col">
               <h5>Assertion Expressions</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Assertions in invariant statements are expressions built with the
                  							semantic properties of defined data types. Assertion expressions must
                  							have a Boolean value (<em>true</em> or
                  							<em>false</em>.)<a name="fn-src9"></a><a href="#fn9"><sup style="font-size: smaller">9</sup></a>
                  							No primitive data types, or operations, pre-exist the definition of
                  							any data type. The only preexisting features of the assertion
                  							expression language are:<a name="fn-src10"></a><a href="#fn10"><sup style="font-size: smaller">10</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     								character strings representing utterances in the data type definition
                     								language;
                     							
                  </li>
                  <li>
                     								the notion of an assertion being successful (<em>true</em>) or
                     								failing (<em>false</em>);
                     							
                  </li>
                  <li>
                     								the invariant statement: <strong>invariant</strong>(...)
                     								<strong>where</strong> ... {...};
                     							
                  </li>
                  <li>
                     								the universal quantifier expression form <strong>forall</strong>
                     								(...) <strong>where</strong>
                     								... {...}; synonymous to the invariant statement;
                     							
                  </li>
                  <li>
                     								the existence quantifier expression form <strong>exists</strong>
                     								(...) <strong>where</strong>
                     								... {...};
                     							
                  </li>
                  <li>
                     								the implicit conjunction (logical AND) between the semicolon-separated
                     								<em>assertions</em>: <em>assertion</em><sub>1</sub>; <em>assertion</em><sub>2</sub>; ... ; <em>assertion</em><sub>n</sub>;
                     							
                  </li>
                  <li>
                     								variables and declarations in the invariant argument list;
                     							
                  </li>
                  <li>
                     								the property reference using the period: <em>x.property</em>;
                     							
                  </li>
                  <li>
                     								implicit and explicit type conversion: <strong>(</strong><em>T</em><strong>)</strong><em>x</em>;
                     							
                  </li>
                  <li>
                     								parentheses to override the priorities of the conversion and property
                     								resolution operators: (<em>T</em>)<em>x.property</em>
                     								versus((<em>T</em>)<em>x</em>)<em>.property</em>.
                     							
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Nested-Quantifier-Expressions"></a>1.9.2.2 
               </h5>
            </td>
            <td class="body_col">
               <h5>Nested Quantifier Expressions</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Within assertion expressions, nested quantifier statements can be
                  							formed similar to invariant statements. In fact, the universal
                  							quantifier built using the <strong>forall</strong> keyword
                  							is the same as the invariant statement. The universal quantifier can
                  							be used in a nested expression when the complexity of the problem
                  							requires it, such as in the following example:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; x, y)
      where x.nonNull {
   x.subset(y).equal(
      forall(T element) where x.contains(element) {
         y.contains(element);
         });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The existence quantifier has the meaning as in common propositional
                  							logic. For example, the following invariant means: "SET values
                  							<em>x</em> and <em>y</em> intersect if and only if there
                  							exists an element <em>e</em> that is contained in both sets
                  							<em>x</em> and <em>y</em>."
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET x, y)
      where x.nonNull {
   x.intersects(y).equal(
      exists(T e) {
         x.contains(e);
         y.contains(e);
         });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The existence quantifier may have a where-clause; however, there is no
                  							difference whether an assertion is made as a where-clause or in the
                  							body of the existence quantifier. Conversely, for universal
                  							quantifiers, the where-clause weakens the assertion since the body now
                  							only applies for values that meet the criterion in the where-clause.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Type-Conversion"></a>1.9.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Type Conversion</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						This specification defines certain allowable conversions between data
                  						types. For example, there is a pair of conversions between the
                  						Character String (<a class="termref" href="#dt-ST">ST</a>) and Encode Data (<a class="termref" href="#dt-ED">ED</a>). 
                  						This means that if a one expects an <a class="termref" href="#dt-ED">ED</a>
                  						value but actually has an <a class="termref" href="#dt-ST">ST</a> value instead, one can
                  						turn the <a class="termref" href="#dt-ST">ST</a> value into an <a class="termref" href="#dt-ED">ED</a>.<a name="fn-src11"></a><a href="#fn11"><sup style="font-size: smaller">11</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Three kinds of type conversions are defined: promotion, demotion, and
                  						character string literals. Type conversions can be implicit or
                  						explicit. Implicit type conversion occurs when a certain type is
                  						expected (e.g. as an argument to a statement) but a different type is
                  						actually provided. If the type provided has a conversion to the type
                  						expected the conversion should be done implicitly.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							An Implementation Technology Specification will have to specify how
                  							implicit type conversions are supported. Some technologies support it
                  							directly others do not; in any case, processing rules can be set that
                  							specify how these conversions are realized.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An explicit conversion can be specified in an assertion expression
                  						using the converted-to type name in parenthesis before the converted
                  						value. For example the following is an explicit type conversion in the
                  						where clause of an invariant statement.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ED x)
   where ((ST)x).nonNull { ... };</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The type conversion has lower priority than the property resolution
                  						period. Thus "(<em>T</em>)a.<em>b</em> " converts the value of
                  						the property <em>b</em> of variable a to data type <em>T</em>
                  						while "((<em>T</em>)a).<em>b</em> " converts the value of
                  						variable a to <em>T</em> and then references property
                  						<em>b</em> of that converted value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Implicit type conversions in the assertion expressions are performed
                  						where possible. If a property's formal argument is declared of data
                  						type <em>T</em>; but the expression used as an actual argument is
                  						of type <em>U</em>; and if <em>U</em> does not extend
                  						<em>T</em>; and if <em>U</em> defines a conversion to
                  						<em>T</em>, that conversion from <em>T</em> to <em>U</em>
                  						takes effect.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Demotion"></a>1.9.3.1 
               </h5>
            </td>
            <td class="body_col">
               <h5>Demotion</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A demotion is a conversion with a net loss of information. Generally,
                  							this means that a more complex type is converted into a simple type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							An example for a demotion is the conversion from Interval 
                  							(<a class="termref" href="#dt-IVL">IVL</a>) to a simple Quantity (<a class="termref" href="#dt-QTY">QTY</a>), e.g. the
                  							center of the interval. In the data type definition language, a
                  							demotion is declared using the keyword <strong>demotion</strong> 
                  							and the data type name to which to demote:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type Interval alias IVL {
   ...
   demotion  QTY;
   ...
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The specification of demotions shall indicate what information is lost
                  							and what the major consequences of losing this information are.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Promotion"></a>1.9.3.2 
               </h5>
            </td>
            <td class="body_col">
               <h5>Promotion</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A promotion is a conversion where new information is
                  							generated. Generally, this means that a simpler type is converted into
                  							a more complex type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, we allow any Quantity (<a class="termref" href="#dt-QTY">QTY</a>) to be
                  							converted to an Interval (<a class="termref" href="#dt-IVL">IVL</a>). However, 
                  							<a class="termref" href="#dt-IVL">IVL</a> has more semantic properties than
                  							<a class="termref" href="#dt-QTY">QTY</a>, low
                  							and high boundary. Thus, the conversion of <a class="termref" href="#dt-QTY">QTY</a> to
                  							<a class="termref" href="#dt-IVL">IVL</a> is a promotion. The additional properties of 
                  							<a class="termref" href="#dt-QTY">QTY</a> not present in <a class="termref" href="#dt-IVL">IVL</a> must assume new 
                  							values, default values, or computed values. The specification of the promotion
                  							must indicate what these values are or how they can be generated.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A promoting conversion from type <a class="termref" href="#dt-QTY">QTY</a> to type 
                  							<a class="termref" href="#dt-IVL">IVL</a> is defined as a semantic property of data type 
                  							<a class="termref" href="#dt-QTY">QTY</a> using the keyword promotion and the data type name to
                  							which to promote:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type Quantity alias QTY {
   ...
   promotion  IVL;
   ...
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Typically, a promotion is defined from a simple type to a more complex
                  							type. Also typically, the simple type is declared earlier in this
                  							document than a more complex type. Declaring all promotions to complex
                  							types in the simple type would thus involve forward references and
                  							would be confusing to the reader. Therefore, an alternative syntax
                  							allows promotions to be defined in the more complex type. This is
                  							indicated by naming the type from which to promote in an argument list
                  							behind the type to which to promote.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type Interval alias IVL {
   ...
   promotion  IVL (QTY x);
   ...
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="literalFormIntro"></a>1.9.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A literal is a character string representation of a data
                  						value. Literals are defined for many types. A literal is a type
                  						conversion from and to a Character String (<a class="termref" href="#dt-ST">ST</a>) with a
                  						specially defined syntax.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Not every conversion from and to an <a class="termref" href="#dt-ST">ST</a> is a literal
                  						conversion, however. A literal for a data type should be able to
                  						represent the entire value set of a data type whereas any other
                  						conversion to and from <a class="termref" href="#dt-ST">ST</a> may only map a smaller subset
                  						of the converted data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The purpose of having literals is so that one can write down values in
                  						a short human readable form. For example, literals for the types
                  						integer number (<a class="termref" href="#dt-INT">INT</a>) and real number 
                  						(<a class="termref" href="#dt-REAL">REAL</a>) are strings of sign, digits, possibly a decimal
                  						point, etc. The more important interval types 
                  						(<a class="termref" href="#dt-IVL">IVL</a>&lt;<a class="termref" href="#dt-REAL">REAL</a>&gt;,
                  						<a class="termref" href="#dt-IVL_PQ">IVL&lt;PQ&gt;</a>, <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>)
                  						have literal representations that allow one to use, e.g., "&lt;5" to
                  						mean "less than 5", which is much more readable than a fully
                  						structured form of the interval. For some of the more advanced data
                  						types such as intervals, general timing specification, and parametric
                  						probability distribution we expect that the literal form may be the
                  						only form seen for representing these values until users have become
                  						used to the underlying conceptualizations.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Each literal conversion has its own syntax (grammar,) often aligned
                  						with what people find intuitive. This syntax may therefore not be
                  						completely straightforward from a computer's perspective.<a name="fn-src12"></a><a href="#fn12"><sup style="font-size: smaller">12</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Character string based Implementable Technology Specifications (ITS)
                  							of these abstract data types may or may not choose the literals
                  							defined here as their representations for these data types. We expect
                  							that the XML ITS, will use some but not all of the literals defined
                  							here.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Declaration"></a>1.9.4.1 
               </h5>
            </td>
            <td class="body_col">
               <h5>Declaration</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							In the data type definition language we declare a literal form as a
                  							property of a data type using the keyword literal followed by the data
                  							type name <a class="termref" href="#dt-ST">ST</a>, since the literal is a conversion to and
                  							from the <a class="termref" href="#dt-ST">ST</a> data type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type IntegerNumber alias INT {
   ...
   literal  ST;
   ...
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Definition"></a>1.9.4.2 
               </h5>
            </td>
            <td class="body_col">
               <h5>Definition</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The actual definition of the literal form occurs outside the data type 
                  							declaration body using an attribute grammar. An attribute grammar is a grammar 
                  							that specifies both syntax and semantics of language structures. The syntax is 
                  							defined in essentially the Backus-Naur-Form (BNF).<a name="fn-src13"></a><a href="#fn13"><sup style="font-size: smaller">13</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, consider the following simple definition of a data type
                  							for cardinal numbers (positive integers.)  This type definition
                  							depends only the Boolean data type (<a class="termref" href="#dt-BL">BL</a>) and has a
                  							character string literal declared:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type CardinalNumber alias CARD {
   BL       isZero;
   BL       equal(ANY x);
   CARD     successor;
   CARD     plus(CARD x);
   CARD     timesTen;
   literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The literal syntax and semantics is first exposed completely and then
                  							described in all detail.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
CARD.literal ST {
   CARD : CARD digit  { $.equal($1.timesTen.plus($2); }
        | digit       { $.equal($1); };

   CARD digit : "0"   { $.isZero; }
              | "1"   { $.equal(0.successor); }
              | "2"   { $.equal(1.successor); }
   ...
              | "8"   { $.equal(7.successor); }
              | "9"   { $.equal(8.successor); }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Every syntactic rule consists of the name of a symbol, a colon and the
                  							definition (so called <em>production</em>) of the symbol. A
                  							production is a sequence of symbols. These other symbols are also
                  							defined in the grammar, or they are terminal symbols. Terminal symbols
                  							are character strings written in double quotes or string patterns
                  							(called <em>regular expressions</em>.)  Thus the form:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
CARD : CARD digit
     | digit;</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							means, that any cardinal number symbol is a cardinal number symbol
                  							followed by a digit or just a digit. The vertical bar stands for a
                  							disjunction (logical OR.)  A syntactic rule ends with a semicolon.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Every symbol has exactly one value of a defined data type. The data
                  							type of the symbol's value is declared where the symbol is defined:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
CARD digit : "0"
           | "1"
           | "2"
           | ...
           | "8"
           | "9";</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							means that the symbol <em>digits</em> has a value of type
                  							CARD. The start-symbol is the data type itself and does not need a
                  							separate name.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The semantics of the literal expression is specified in semantic rules
                  							enclosed in curly braces for each of the defined productions of a
                  							symbol:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>symbol</em><strong> : </strong><em>production</em><sub>1</sub><strong> { </strong><em>rule</em><sub>1</sub><strong> } </strong><strong> | </strong><em>production</em><sub>2</sub><strong> { </strong><em>rule</em><sub>2</sub><strong> } </strong><strong> | </strong>
                  							... <strong> | </strong><em>production</em><sub><em>n</em></sub><strong> { </strong><em>rule</em><sub><em>n</em></sub><strong> };</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A semantic rule is simply a semicolon-separated list of Boolean
                  							assertion expressions of the same kind as those used in invariant
                  							statements. However, there are special variables defined in the
                  							semantic rule that all begin with a dollar character (e.g., $, $1, $2,
                  							$3, ...)  The simple $ stands for the value of the currently defined
                  							symbol; while $1, $2, $3, etc. stand for the values of the parts of
                  							the semantic rule's associated production. For example, in
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
CARD : CARD digit  { $.equal($1.timesTen.plus($2); }
     | digit       { $.equal($1); };</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							the first production "CARD digit" has a semantic rule that says: the
                  							value $ of the defined symbol equals the value $1 of the first symbol
                  							CARD times ten plus the value $2 of the second symbol digit.<a name="fn-src14"></a><a href="#fn14"><sup style="font-size: smaller">14</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A terminal symbol can be specified as a string pattern, so-called
                  							<em>regular expression</em>. The regular expression syntax used
                  							here is the classic syntax invented by Aho and used in AWK, LEX, GREP,
                  							and PERL. Regular expressions appear between two slashes 
                  							<strong>/</strong>...<strong>/</strong>. In a regular
                  							expression pattern every character except <strong>[ ] ^ $
                     							. / : ( ) \ | ? * + { }</strong> matches itself. The other characters
                  							that are actually used in this specification are defined in 
                  							<a href="#special-regex-chars">Table
                     			2</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="special-regex-chars">&nbsp;</a>
                     			Table
                     			2: Special Characters for Regular Expressions
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">Pattern</th>
                        <th colspan="1">Definition</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">[ ... ]</td>
                        <td colspan="1">
                           										Specifies a character class. For example, /[A-Za-z]/ 
                           										matches the characters of the upper and lower case English
                           										alphabet.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[^ ...]</td>
                        <td colspan="1">
                           										Specifies a character class negatively. For example, 
                           										/[^BCD]/ matches any character except B, C, and D.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">...?</td>
                        <td colspan="1">
                           										The preceding pattern is optional. For example, /ab?c/ 
                           										matches  "ac" and "abc".
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">...*</td>
                        <td colspan="1">
                           										The preceding pattern may occur zero or many times. For 
                           										example, /ab*c/ matches  "ac", "abc", "abbc", "abbbc",
                           										etc.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">...+</td>
                        <td colspan="1">
                           										The preceding pattern may occur one or more times. For 
                           										example, /ab+c/ matches "abc", "abbc", "abbbc", but not 
                           										"ac".
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">... {n,m}</td>
                        <td colspan="1">
                           										The preceding pattern may occur <em>n</em> to 
                           										<em>m</em> times where <em>n</em> and <em>m</em> 
                           										are cardinal numbers 0 ( <em>n</em> ( <em>m</em>. 
                           										For example, /ab{2,4}c/ matches "abbc", "abbbc", and 
                           										"abbbbc".
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">... | ...</td>
                        <td colspan="1">
                           										The pattern on either side of the bar may match. For 
                           										example, /ab|cd/ matches "abd" and "acd" but not "abcd".
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">( ... )</td>
                        <td colspan="1">
                           										The pattern in parentheses is used as one pattern for 
                           										the above operators. For example, /a(bc)*/ matches "a", 
                           										"abc", "abcbc", "abcbcbc", etc.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">... : ...</td>
                        <td colspan="1">
                           										The left pattern matches if followed by the right 
                           										pattern, but the right pattern is not consumed by a match. 
                           										For example, /ab:c/ matches "abc" but not "ab", however,
                           										the value of a symbol thus matched is "ab" and the "c" is 
                           										left over for the next symbol. The colon is a slight 
                           										deviation from the conventional slash / but the slash is 
                           										also conventionally used to enclose the entire pattern and 
                           										may occur as a character to match - three meanings is one 
                           										too many.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">... \ ...</td>
                        <td colspan="1">
                           										Matches the following character literally, i.e. escapes
                           										from any special meaning of that character. For example, 
                           										/a\+b/ matches "a+b".
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">... \/ ...</td>
                        <td colspan="1">
                           										Matches the slash as a character. For example, /a\/bc/ 
                           										macthes "a/bc".
                           									
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="generics"></a>1.9.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Generic Data Types</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Generic data types are incomplete type definitions. This
                  						incompleteness is signified by one or more <em>parameters</em> to
                  						the type definition. Usually parameters stand for other types. Using
                  						parameters, a generic type might declare semantic properties of other
                  						not fully specified data types. For example, the generic data type
                  						Interval is declared with a parameter <em>T</em> that can stand
                  						for any Quantity data type (<a class="termref" href="#dt-QTY">QTY</a>). The components
                  						<em>low</em> and <em>high</em> are declared as being of type
                  						<em>T</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
template&lt;QTY T&gt;
type Interval&lt;T&gt; alias IVL&lt;T&gt; {
   T  low;
   T  high;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Instantiating a generic type means completing its definition. For
                  						example, to instantiate an Interval, one must specify of what base
                  						<em>data type</em> the interval should be. This is done by
                  						<em>binding</em> the parameter <em>T</em>. To instantiate an
                  						Interval of Integer numbers, one would bind the parameter
                  						<em>T</em> to the type Integer. Thus, the incomplete data type
                  						Interval is completed to the data type <em>Interval of
                     						Integer</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example the following type definition for MyType declares a
                  						property named "multiplicity" that is an interval of the cardinal
                  						number data type used in the above examples.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type MyType alias MT {
   IVL&lt;CARD&gt;  multiplicity;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Generic-Collections"></a>1.9.5.1 
               </h5>
            </td>
            <td class="body_col">
               <h5>Generic Collections</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Generic data types for collections are being used throughout this
                  							specification. The most important of them are
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Set</strong> (<a class="termref" href="#dt-SET">SET</a>&lt;T&gt;)  A
                  							set contains elements in no particular order and without duplicate
                  							elements.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Sequence</strong> 
                  							(<a class="termref" href="#dt-LIST">LIST</a>&lt;T&gt;)  A sequence is a collection of
                  							values in an arbitrary but particular order. A sequence has a head and
                  							a tail, where the head is an element and the tail is the sequence
                  							without its head.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Interval</strong> 
                  							(<a class="termref" href="#dt-IVL">IVL</a>&lt;T&gt;)  An interval is a continuous subset
                  							of an ordered type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							These and other generic types are fully defined in 
                  							<a href="#generics">Generic Data Types
                     			(&sect;
                     			1.9.5 )</a>. These generic data types and their
                  							properties are being used in this specification early on. For the best
                  							understanding of this specification knowledge about the set, sequence
                  							and interval is important and the reader is advised to refer to
                  							<a href="#generics">Generic Data Types
                     			(&sect;
                     			1.9.5 )</a>. when coming across a
                  							generic type being used to define another type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="section-Generic-Type-Extensions"></a>1.9.5.2 
               </h5>
            </td>
            <td class="body_col">
               <h5>Generic Type Extensions</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Generic data type extensions are generic types with one parameter type
                  							that the generic type specializes. In the formal data type definition
                  							language, generic type specializations follow the pattern:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
template&lt;ANY T&gt; type GenericTypeExtensionName specializes T {
   ...
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							These generic type extensions inherit properties of their base type
                  							and add some specific feature to it. The generic type extension is a
                  							specialization of the base type, thus a value of the extension data
                  							type can be used instead of its base data type.<a name="fn-src15"></a><a href="#fn15"><sup style="font-size: smaller">15</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								Values of extended types can be substituted for their base
                  								type. However, an ITS may make some constraints as to what extensions
                  								to accommodate. Particularly, extensions need not be defined for those
                  								components carrying the values of data value properties. Thus, while
                  								any data value can be annotated outside the data type specification,
                  								an ITS may not provide for a way to annotate the value of a data value
                  								property.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/dtUML-Basics.gif" alt="Fundamental data types"><br>Fundamental data types<br></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="section-Conformance"></a>1.10 
               </h3>
            </td>
            <td class="body_col">
               <h3>Conformance</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					If an application receives or parses an instance that is not valid with
                  					regard to this specification, the receiver is permitted to reject the
                  					instance in whatever fashion it deems appropriate but it is not required
                  					to. Note that some other HL7 standard or artefact such as a conformance
                  					statement may make additional constraints on behaviour in such cases.
                  				
               </p>
            </td>
         </tr><a name="ANY"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ANY"></a>1.11 
               </h3>
            </td>
            <td class="body_col">
               <h3>DataValue (ANY)</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Defines the basic properties of every data value. This is an abstract
                  					type, meaning that no value can be just a data value without belonging
                  					to any concrete type. Every concrete type is a specialization of this
                  					general abstract DataValue type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
abstract type DataValue alias ANY {
   TYPE  dataType;
   BN    nonNull;
   CS    nullFlavor;
   BN    isNull;
   BL    notApplicable;
   BL    unknown;
   BL    other;
   BL    equal(ANY x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.dataType"></a>1.11.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Data Type : <a class="termref" href="#dt-TYPE">TYPE</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Represents the fact that every data value implicitly carries
                  						information about its own data type. Thus, given a data value one can
                  						inquire about its data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.dataType.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.nonNull"></a>1.11.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Proper Value : <a class="termref" href="#dt-BN">BN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Indicates that a value is a non-exceptional value of the data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.isNull.equal(x.nonNull.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						When a property, RIM attribute, or message field is called
                  						<em>mandatory</em> this means that any non-NULL value of the type
                  						to which the property belongs has a non-NULL value for that
                  						property, in other words, a field may not be NULL, providing that its
                  						container (object, segment, etc.) is to have a non-NULL value.
                  			        
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.isNull"></a>1.11.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exceptional Value : <a class="termref" href="#dt-BN">BN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Indicates that a value is an exceptional value, or a NULL-value. A
                  						null value means that the information does not exist, is not
                  						available or cannot be expressed in the data type's normal value
                  						set.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Every data element has either a proper value or it is
                  						considered NULL. If (and only if) it is NULL, the <em>isNull</em> provides
                  						more detail as to in what way or why no proper value is supplied.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.isNull.equal(x.nullFlavor.implies(NI));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.nullFlavor"></a>1.11.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exceptional Value Detail : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If a value is an exceptional value (NULL-value), this specifies in
                  						what way and why proper information is missing.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.nonNull.equal(x.nullFlavor.isNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-NullFlavor">&nbsp;</a>
                     			Table
                     			3: Domain NullFlavor
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>NI</td>
                     <td>NoInformation</td>
                     <td>No information whatsoever can be inferred from this exceptional value.  This is the most general exceptional value.  It is
                        also the default exceptional value.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;OTH</td>
                     <td>other</td>
                     <td>The actual value is not an element in the value domain of a variable.  (e.g., concept not provided by required code system).</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;NINF</td>
                     <td>negative infinity</td>
                     <td>Negative infinity of numbers.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;PINF</td>
                     <td>positive infinity</td>
                     <td>Positive infinity of numbers.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;UNK</td>
                     <td>unknown</td>
                     <td>A proper value is applicable, but not known.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;ASKU</td>
                     <td>asked but unknown</td>
                     <td>Information was sought but not found (e.g., patient was asked but didn't know)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NAV</td>
                     <td>temporarily unavailable</td>
                     <td>Information is not available at this time but it is expected that it will be available later.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;NASK</td>
                     <td>not asked</td>
                     <td>This information has not been sought (e.g., patient was not asked)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;TRC</td>
                     <td>trace</td>
                     <td>The content is greater than zero, but too small to be quantified.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;MSK</td>
                     <td>masked</td>
                     <td>There is information on this item available but it has not been provided by the sender due to security, privacy or other reasons.
                        There may be an alternate mechanism for gaining access to this information.Note: using this null flavor does provide information
                        that may be a breach of confidentiality, even though no detail data is provided.  Its primary purpose is for those circumstances
                        where it is necessary to inform the receiver that the information does exist without providing any detail.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;NA</td>
                     <td>not applicable</td>
                     <td>No proper value is applicable in this context (e.g., last menstrual period for a male).</td>
                  </tr>
                  <tr>
                     <td>NP</td>
                     <td>not present</td>
                     <td>Value is not present in a message.  This is only defined in messages, never in application data!  All values not present in
                        the message must be replaced by the applicable default, or no-information (NI) as the default of all defaults.
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The null flavors are a general domain extension of all normal data
                  						types. Note the distinction between value domain of any data type and
                  						the vocabulary domain of coded data types. A vocabulary domain is a
                  						value domain for coded values, but not all value domains are
                  						vocabulary domains.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The null flavor "other" is used whenever the actual value is not in
                  						the required value domain, this may be, for example, when the value
                  						exceeds some constraints that are defined too restrictive (e.g., age
                  						less than 100 years.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							NULL-flavors are applicable to any property of a data value or a
                  							higher-level object attribute. Where the difference of null flavors is
                  							not significant, ITS are not required to represent them. If nothing
                  							else is noted in this specification, ITS need not represent general
                  							NULL-flavors for data-value properties.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some of these null flavors are associated with named properties that can be
                  						used as simple predicates for all data values. This is done to
                  						simplify the formulation of invariants in the remainder of this
                  						specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Remember the difference between semantic properties and
                  						representational "components" of data values. An ITS must only
                  						represent those components that are needed to <em>infer</em> the
                  						semantic properties. The null-flavor predicates
                  						<a class="termref" href="#prop-ANY.nonNull">nonNull</a>,
                  						<a class="termref" href="#prop-ANY.isNull">isNull</a>, <a class="termref" href="#prop-ANY.notApplicable">notApplicable</a>,
                  						<a class="termref" href="#prop-ANY.unknown">unknown</a>, and
                  						<a class="termref" href="#prop-ANY.other">other</a> can all be inferred from the <em>nullFlavor</em>
                  						property.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.notApplicable"></a>1.11.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Inapplicable Proper Value : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating that this exceptional value is of
                  						<a class="termref" href="#prop-ANY.nullFlavor">nullFlavor</a> not-applicable (NA), i.e., that a proper
                  						value is not meaningful in the given context.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.notApplicable.equal(x.nullFlavor.implies(NA));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.unknown"></a>1.11.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>unknown : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating that this exceptional value is of
                  						<a class="termref" href="#prop-ANY.nullFlavor">nullFlavor</a> unknown (UNK).
                  			
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.unknown.equal(x.nullFlavor.implies(UNK));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.other"></a>1.11.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Value Domain Exception : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating that this exceptional value is of
                  						<a class="termref" href="#prop-ANY.nullFlavor">nullFlavor</a> other (OTH), i.e., that the required
                  						value domain does not contain the appropriate value.
                  			        
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x) {
   x.other.equal(x.nullFlavor.implies(OTH));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ANY.equal"></a>1.11.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Equality is a reflexive, symmetric, and transitive relation between
                  						any two data values. Only proper values can be equal, null values
                  						never are equal (even if they have the same null flavor.)
                  			        
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x, y, z)
      where x.nonNull.and(y.nonNull).and(z.nonNull) {
   x.equal(x);                                         /* reflexivity */
   x.equal(y).equal(y.equal(x));                       /* symmetry */
   x.equal(y).and(y.equal(z)).implies(x.equal(z))      /* transitivity */
   x.equal(y).implies(x.dataType.equal(y.dataType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						How equality is determined must be defined for each data type. If
                  						nothing else is specified, two data values are equal if they are
                  						indistinguishable, that is, if they differ in none of their semantic
                  						properties. A data type can "override" this general definition of
                  						equality, by specifying its own equal relationship. This overriding
                  						of the equality relation can be used to exclude semantic properties
                  						from the equality test. If a data type excludes semantic properties
                  						from its definition of equality, this implies that certain properties
                  						(or aspects of properties) that are not part of the equality test are
                  						not essential to the meaning of the value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example the physical quantity has the two semantic properties (1)
                  						a real number and (2) a coded unit of measure. The equality test,
                  						however, must account for the fact that, e.g., 1 meter equals 100
                  						centimeters; independent equality of the two semantic properties is
                  						too strong a criterion for the equality test. Therefore, physical
                  						quantity must override the equality definition.
                  					
               </p>
            </td>
         </tr><a name="TYPE"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-TYPE"></a>1.12 
               </h3>
            </td>
            <td class="body_col">
               <h3>DataType (TYPE) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A meta-type declared in order to allow the formal definitions to speak
                  					about the data type of a value. Any data type defined in this
                  					specification is a value of the type DataType.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
private type DataType alias TYPE specializes DataValue {
   CS  shortName;
   CS  longName;
   BN  implies(TYPE that);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-DataType.shortName"></a>1.12.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Short Name : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A <a class="termref" href="#dt-CS">CS</a> specifying the alias of the data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(DataType x)
      where x.nonNull {
   x.shortName.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-DataType.longName"></a>1.12.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Long Name : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A <a class="termref" href="#dt-CS">CS</a> specifying the full name of the data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-DataType.implies"></a>1.12.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Implies : <a class="termref" href="#dt-BN">BN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A data type implies another data type if it has the same type or is
                  						a specialisation of it.
                  					
               </p>
            </td>
         </tr>
         <!--divN/head-->
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h2><a name="datyp2bastyp"></a>2 
               </h2>
            </td>
            <td class="body_col">
               <h2>Basic Types</h2>
            </td>
         </tr><a name="BL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-BL"></a>2.1 
               </h3>
            </td>
            <td class="body_col">
               <h3>Boolean (BL) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong><em>BL</em> stands for the values of two-valued logic. A <em>BL</em>
                  					value can be either <em>true</em> or <em>false</em>, or, as
                  					any other value may be NULL.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL"></a><pre>
type Boolean alias BL specializes ANY
   values(true, false) {
            BL  and(BL x);
            BL  not;
   literal  ST;
            BL  or(BL x);
            BL  xor(BL x);
            BL  implies(BL x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					With any data value potentially being NULL, the two-valued logic is
                  					effectively extended to a three-valued logic as shown in the following
                  					truth tables:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="BL-truth-tables">&nbsp;</a>
                     			Table
                     			4: Truth tables for Boolean logic with NULL values
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">NOT</th>
                        <th colspan="1">&nbsp;</th>
                        <th colspan="1"></th>
                        <th colspan="1">AND</th>
                        <th colspan="1">true</th>
                        <th colspan="1">false</th>
                        <th colspan="1">NULL</th>
                        <th colspan="1"></th>
                        <th colspan="1">OR</th>
                        <th colspan="1">true</th>
                        <th colspan="1">false</th>
                        <th colspan="1">NULL</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <th colspan="1">true</th>
                        <td colspan="1">false</td>
                        <td colspan="1"></td>
                        <th colspan="1">true</th>
                        <td colspan="1">true</td>
                        <td colspan="1">false</td>
                        <td colspan="1">NULL</td>
                        <td colspan="1"></td>
                        <th colspan="1">true</th>
                        <td colspan="1">true</td>
                        <td colspan="1">true</td>
                        <td colspan="1">true</td>
                     </tr>
                     <tr>
                        <th colspan="1">false</th>
                        <td colspan="1">true</td>
                        <td colspan="1"></td>
                        <th colspan="1">false</th>
                        <td colspan="1">false</td>
                        <td colspan="1">false</td>
                        <td colspan="1">false</td>
                        <td colspan="1"></td>
                        <th colspan="1">false</th>
                        <td colspan="1">true</td>
                        <td colspan="1">false</td>
                        <td colspan="1">NULL</td>
                     </tr>
                     <tr>
                        <th colspan="1">NULL</th>
                        <td colspan="1">NULL</td>
                        <td colspan="1"></td>
                        <th colspan="1">NULL</th>
                        <td colspan="1">NULL</td>
                        <td colspan="1">false</td>
                        <td colspan="1">NULL</td>
                        <td colspan="1"></td>
                        <th colspan="1">NULL</th>
                        <td colspan="1">true</td>
                        <td colspan="1">NULL</td>
                        <td colspan="1">NULL</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Where a boolean operation is performed upon 2 data types with different
                  					nullFlavors, the nullFlavor of the result is the first common ancestor
                  					of the 2 different nullFlavors, though conformant applications may also
                  					create a result that is any common ancestor
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.not"></a>2.1.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Negation : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Negation of a <em>BL</em> turns <em>true</em> into <em>false</em>
                  						and <em>false</em> into <em>true</em> and is NULL for NULL
                  						values.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL.not">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL.not"></a><pre>
invariant(BL x) {
   true.not.equal(false);
   false.not.equal(true);
   x.isNull.equal(x.not.isNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.and"></a>2.1.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Conjunction : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Conjunction (AND) is associative and commutative, with
                  						<em>true</em> as a neutral element. <em>False</em> AND any
                  						Boolean value is <em>false</em>. These rules hold even if one or
                  						both of the operands are NULL. If both operands for AND are NULL,
                  						the result is NULL.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL.and">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL.and"></a><pre>
invariant(BL x) {
   x.and(true).equal(x);
   x.and(false).equal(false);
   x.isNull.implies(x.and(y).isNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.or"></a>2.1.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Disjunction : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The disjunction <em>x</em> OR <em>y</em> is <em>false</em>
                  						if and only if <em>x</em> is <em>false</em> and <em>y</em>
                  						is <em>false</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL.or">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL.or"></a><pre>
invariant(BL x, y) {
   x.or(y).equal(x.not.and(y.not).not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.xor"></a>2.1.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exclusive Disjunction : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The exclusive-OR constrains OR such that the two operands may not both
                  						be <em>true</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL.xor">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL.xor"></a><pre>
invariant(BL x, y) {
   x.xor(y).equal(x.or(y).and(x.and(y).not));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.implies"></a>2.1.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Implication : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A rule of the form IF <em>condition</em> THEN
                  						<em>conclusion</em>. Logically the implication is defined as the
                  						disjunction of the negated condition and the conclusion, meaning that
                  						when the condition is <em>true</em> the conclusion must be
                  						<em>true</em> to make the overall statement <em>true</em>.
                  						The logical implication is important to make invariant statements. 
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BL.implies">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BL.implies"></a><pre>
invariant(BL condition, conclusion) {
   condition.implies(conclusion).equal(
      condition.not.or(conclusion));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The implication is not reversible and does not specify what is
                  						<em>true</em> when the condition is <em>false</em> (<em>ex
                     						falso quodlibet</em> lat. &#8220;from false follows anything&#8221;).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BL.literal"></a>2.1.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form of the Boolean is determined by the named values
                  						specified in the values clause, i.e., <em>true</em> and
                  						<em>false</em>.
                  					
               </p>
            </td>
         </tr><a name="BN"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-BN"></a>2.2 
               </h3>
            </td>
            <td class="body_col">
               <h3>BooleanNonNull (BN) specializes <a class="termref" href="#dt-BL">BL</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong><em>BN</em> constrains the boolean type so that the value may not be NULL.
                  					This type is created for use within the data types specification where it is not
                  					appropriate for a null value to be used
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BN">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BN"></a><pre>
private type BooleanNonNull alias BN specializes BL;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BN.isNull"></a>2.2.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>isNull : <a class="termref" href="#dt-BN">BN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (BN x) {
   x.isNull.not
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-Text.gif" target="_blank" border="0">Overview of Text and Multimedia Data Types (link to graphic opens in a  new window)</a></td>
         </tr><a name="BIN"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-BIN"></a>2.3 
               </h3>
            </td>
            <td class="body_col">
               <h3>Binary Data (BIN) specializes <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-BN">BN</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong><em>BIN</em> is a raw block of bits. <em>BIN</em> is a protected
                  					type that should not be declared outside the data type specification.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A bit is semantically identical with a non-null <a class="termref" href="#dt-BL">BL</a> value. Thus,
                  					all binary data is &#8212; semantically &#8212; a sequence of non-null
                  					<a class="termref" href="#dt-BL">BL</a> values.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BIN">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BIN"></a><pre>
protected type BinaryData alias BIN specializes LIST&lt;BN&gt;;</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						The representation of arbitrary binary data is the responsibility of
                  						an ITS. How the ITS accomplishes this depends on the underlying
                  						Implementation Technology (whether it is character-based or binary)
                  						and on the represented data. Semantically character data is
                  						represented as binary data, however, a character-based ITS should not
                  						convert character data into arbitrary binary data and then represent
                  						binary data in a character encoding. Ultimately even character-based
                  						implementation technology will communicate binary data.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An empty sequence is not considered binary data but counts as a
                  						NULL-value. In other words, non-NULL binary data contains at least one
                  						bit. No bit in a non-NULL binary data value can be NULL.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BIN x)
      where x.nonNull {
   x.notEmpty;
   x.length.greaterThan(0);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="ED"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ED"></a>2.4 
               </h3>
            </td>
            <td class="body_col">
               <h3>Encapsulated Data (ED) specializes <a class="termref" href="#dt-BIN">BIN</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Data that is primarily intended for human interpretation or for
                  					further machine processing outside the scope of HL7. This includes
                  					unformatted or formatted written language, multimedia data, or
                  					structured information in as defined by a different standard (e.g.,
                  					XML-signatures.)  Instead of the data itself, an <em>ED</em>
                  					may contain only a reference (see <a class="termref" href="#dt-TEL">TEL</a>.) Note that
                  					<a class="termref" href="#dt-ST">ST</a> is a specialization of the
                  					<em>ED</em> where the <a class="termref" href="#prop-ED.mediaType">mediaType</a> is fixed to text/plain.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-ED-prop-summary">&nbsp;</a>
                     			Table
                     			5: Property Summary of
                     Encapsulated Data
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>mediaType</td>
                        <td>CS</td>
                        <td>
                           						Identifies the type of the encapsulated data and identifies a
                           						method to interpret or render the data.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>charset</td>
                        <td>CS</td>
                        <td>
                           						For character-based encoding types, this property specifies the
                           						character set and character encoding used. The charset shall be
                           						identified by an Internet Assigned Numbers Authority (IANA) 
                           						Charset Registration [<a href="http://www.iana.org/assignments/character-sets">http://www.iana.org/assignments/character-sets</a>] 
                           						in accordance with RFC 2978 [<a href="http://www.ietf.org/rfc/rfc2978.txt">http://www.ietf.org/rfc/rfc2978.txt</a>].
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>language</td>
                        <td>CS</td>
                        <td>
                           						For character based information the language property specifies the
                           						human language of the text.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>compression</td>
                        <td>CS</td>
                        <td>
                           						Indicates whether the raw byte data is compressed, and what
                           						compression algorithm was used.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>reference</td>
                        <td>TEL</td>
                        <td>
                           						A telecommunication address (TEL), such as a URL for HTTP or FTP,
                           						which will resolve to precisely the same binary data that could as
                           						well have been provided as inline data.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>integrityCheck</td>
                        <td>BIN</td>
                        <td>
                           						The integrity check is a short binary value representing a
                           						cryptographically strong checksum that is calculated over the binary
                           						data. The purpose of this property, when communicated with a reference
                           						is for anyone to validate later whether the reference still resolved
                           						to the same data that the reference resolved to when the encapsulated
                           						data value with reference was created.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>integrityCheckAlgorithm</td>
                        <td>CS</td>
                        <td>
                           						Specifies the algorithm used to compute the integrityCheck
                           						value.
                           <p>
                              								The cryptographically strong checksum algorithm Secure Hash
                              								Algorithm-1 (SHA-1) is currently the industry standard. It has
                              								superseded the MD5 algorithm only a couple of years ago, when certain
                              								flaws in the security of MD5 were discovered. Currently the SHA-1 hash
                              								algorithm is the default choice for the integrity check algorithm.
                              								Note that SHA-256 is also entering widespread usage.
                              							
                           </p>
                        </td>
                     </tr>
                     <tr>
                        <td>thumbnail</td>
                        <td>ED</td>
                        <td>
                           						An abbreviated rendition of the full data. A thumbnail requires
                           						significantly fewer resources than the full data, while still
                           						maintaining some distinctive similarity with the full data. A
                           						thumbnail is typically used with by-reference encapsulated data. It
                           						allows a user to select data more efficiently before actually
                           						downloading through the reference.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-ED">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-ED"></a><pre>
type EncapsulatedData alias ED specializes BIN {
   CS   mediaType;
   CS   charset;
   CS   language;
   CS   compression;
   TEL  reference;
   BIN  integrityCheck;
   CS   integrityCheckAlgorithm;
   ED   thumbnail;
   BL   equal(ANY x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Encapsulated data can be present in two forms, inline or by
                  					reference. Inline data is communicated or moved as part of the
                  					encapsulated data value, whereas by-reference data may reside at a
                  					different (remote) location. The data is the same whether it is
                  					located inline or remote.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.mediaType"></a>2.4.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Media Type : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Identifies the type of the encapsulated data and identifies a
                  						method to interpret or render the data.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>mediaType</em> is a mandatory property, i.e., every non-NULL instance of
                  							<em>ED</em> must have a non-NULL <em>mediaType</em> property.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ED x)
      where x.nonNull {
   x.mediaType.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The IANA defined domain of media types is established by the Internet
                  						standard RFC 2045 [<a href="http://www.ietf.org/rfc/rfc2045.txt">http://www.ietf.org/rfc/rfc2045.txt</a>]
                  						and 2046 [<a href="http://www.ietf.org/rfc/rfc2046.txt">http://www.ietf.org/rfc/rfc2046.txt</a>].
                  						RFC 2046 defines the media type to consist of two parts:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     							top level media type, and
                     						
                  </li>
                  <li>
                     							media subtype
                     						
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						However, this specification treats the entire media type as one atomic
                  						code symbol in the form defined by IANA, i.e., top level type followed
                  						by a slash "/" followed by media subtype. Currently defined media
                  						types are registered in a database
                  						[<a href="http://www.iana.org/assignments/media-types/index.html">http://www.iana.org/assignments/media-types/index.html</a>]
                  						maintained by IANA. Currently more than 160 different MIME media types are
                  						defined, with the list growing rapidly. In general, all those types
                  						defined by the IANA may be used.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						To promote interoperability, this specification prefers certain media
                  						types to others. This is to define a greatest common denominator on
                  						which interoperability is not only possible, but that is powerful
                  						enough to support even advanced multimedia communication needs.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><a href="#domain-MediaType">Table
                     			6</a> below assigns a status to
                  						certain MIME media types, where the status means one of the following:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li><strong>required</strong>: Every HL7 application
                     							must support at least the required media types if it supports a given
                     							kind of media. One required media-type for each kind of media
                     							exists. Some media types are required for a specific purpose, which is
                     							then indicated as "required for ..."
                     						
                  </li>
                  <li><strong>recommended</strong>: Other media types are
                     							recommended for a particular purpose. For any given purpose there
                     							should be only very few additionally recommended media types and the
                     							rationale, conditions and assumptions of such recommendations must be
                     							made very clear.
                     						
                  </li>
                  <li><strong>indifferent</strong>: This status means, HL7
                     							neither forbids nor endorses the use of this media type. All media
                     							types not mentioned in <a href="#domain-MediaType">Table
                        			6</a> have status indifferent by default.
                     							Since there is one required and several recommended media types for most
                     							practically relevant use cases, media types of this status should be used
                     							very conservatively.
                     						
                  </li>
                  <li><strong>deprecated</strong>: Deprecated media types
                     							should not be used, because these media types are flawed, because
                     							there are better alternatives, or because of certain risks. Such risks
                     							could be security risks, for example, the risk that such a media type
                     							could spread computer viruses. Not every flawed media type is marked
                     							as deprecated, though. A media type that is not mentioned in Table 6,
                     							and thus has status indifferent, may well be flawed.
                     						
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-MediaType">&nbsp;</a>
                     			Table
                     			6: Domain MediaType
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>status</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>text/plain&nbsp;</td>
                        <td>Plain Text&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>For any plain text.  This is the default and is equivalent to a character string (ST) data type.&nbsp;</td>
                     </tr>
                     <tr>
                        <td>text/x-hl7-ft&nbsp;</td>
                        <td>HL7 Text&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>For compatibility, this represents the HL7 v2.x FT data type.  Its use is recommended only for backward compatibility with
                           HL7 v2.x systems.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>text/html&nbsp;</td>
                        <td>HTML Text&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>For marked-up text according to the Hypertext Mark-up Language.  HTML markup is sufficient for typographically marking-up
                           most written-text documents.  HTML is platform independent and widely deployed.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>application/pdf&nbsp;</td>
                        <td>PDF&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>The Portable Document Format is recommended for written text that is completely laid out and read-only.  PDF is a platform
                           independent, widely deployed, and open specification with freely available creation and rendering tools.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>text/xml&nbsp;</td>
                        <td>XML Text&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>For structured character based data.  There is a risk that general SGML/XML is too powerful to allow a sharing of general
                           SGML/XML documents between different applications.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>text/rtf&nbsp;</td>
                        <td>RTF Text&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>The Rich Text Format is widely used to share word-processor documents.  However, RTF does have compatibility problems, as
                           it is quite dependent on the word processor.  May be useful if word processor edit-able text should be shared.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>application/msword&nbsp;</td>
                        <td>MSWORD&nbsp;</td>
                        <td>deprecated&nbsp;</td>
                        <td>This format is very prone to compatibility problems.  If sharing of edit-able text is required, text/plain, text/html or text/rtf
                           should be used instead.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>audio/basic&nbsp;</td>
                        <td>Basic Audio&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>This is a format for single channel audio, encoded using 8bit ISDN mu-law [PCM] at a sample rate of 8000 Hz.  This format
                           is standardized by: CCITT, Fascicle III.4 -Recommendation G.711.  Pulse Code Modulation (PCM) of Voice Frequencies.  Geneva,
                           1972.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>audio/mpeg&nbsp;</td>
                        <td>MPEG audio layer 3&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>MPEG-1 Audio layer-3 is an audio compression algorithm and file format                       defined in ISO 11172-3 and ISO
                           13818-3. MP3 has an adjustable sampling frequency for highly compressed telephone to CD quality audio.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>audio/k32adpcm&nbsp;</td>
                        <td>K32ADPCM Audio&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>ADPCM allows compressing audio data.  It is defined in the Internet specification RFC 2421 [ftp://ftp.isi.edu/in-notes/rfc2421.txt].
                           Its implementation base is unclear.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>image/png&nbsp;</td>
                        <td>PNG Image&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>Portable Network Graphics (PNG) [http://www.cdrom.com/pub/png] is a widely supported lossless image compression standard with
                           open source code available.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>image/gif&nbsp;</td>
                        <td>GIF Image&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>GIF is a popular format that is universally well supported. However GIF is patent encumbered and should therefore be used
                           with caution.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>image/jpeg&nbsp;</td>
                        <td>JPEG Image&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>This format is required for high compression of high color photographs.  It is a "lossy" compression, but the difference to
                           lossless compression is almost unnoticeable to the human vision.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>application/dicom&nbsp;</td>
                        <td>DICOM&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>Digital Imaging and Communications in Medicine (DICOM) MIME type defined in RFC3240 [http://ietf.org/rfc/rfc3240.txt].&nbsp;</td>
                     </tr>
                     <tr>
                        <td>image/g3fax&nbsp;</td>
                        <td>G3Fax Image&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>This is recommended only for fax applications.&nbsp;</td>
                     </tr>
                     <tr>
                        <td>image/tiff&nbsp;</td>
                        <td>TIFF Image&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>Although TIFF (Tag Image File Format) is an international standard it has many interoperability problems in practice.  Too
                           many different versions that are not handled by all software alike.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>video/mpeg&nbsp;</td>
                        <td>MPEG Video&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>MPEG is an international standard, widely deployed, highly efficient for high color video; open source code exists; highly
                           interoperable.&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>video/x-avi&nbsp;</td>
                        <td>X-AVI Video&nbsp;</td>
                        <td>deprecated&nbsp;</td>
                        <td>The AVI file format is just a wrapper for many different codecs; it is a source of many interoperability problems.&nbsp;</td>
                     </tr>
                     <tr>
                        <td>model/vrml&nbsp;</td>
                        <td>VRML Model&nbsp;</td>
                        <td>recommended&nbsp;</td>
                        <td>This is an openly standardized format for 3D models that can be useful for virtual reality applications such as anatomy or
                           biochemical research (visualization of the steric structure of macromolecules)&nbsp;
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The set of required media types is very small so that no undue
                  						requirements are forced on HL7 applications, especially legacy
                  						systems. In general, no HL7 application is forced to support any given
                  						kind of media other than written text. For example, many systems just
                  						do not want to receive audio data, because those systems can only show
                  						written text to their users. It is a matter of application conformance
                  						statements to say: "I will not handle audio". Only if a system claims
                  						to handle audio media, it must support the required media type for
                  						audio.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.charset"></a>2.4.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Charset : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						For character-based encoding types, this property specifies the
                  						character set and character encoding used. The charset shall be
                  						identified by an Internet Assigned Numbers Authority (IANA) 
                  						Charset Registration [<a href="http://www.iana.org/assignments/character-sets">http://www.iana.org/assignments/character-sets</a>] 
                  						in accordance with RFC 2978 [<a href="http://www.ietf.org/rfc/rfc2978.txt">http://www.ietf.org/rfc/rfc2978.txt</a>].
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The charset domain is maintained by the <em>Internet Assigned
                     						Numbers Authority</em> (IANA) [<a href="http://www.iana.org/assignments/character-sets">http://www.iana.org/assignments/character-sets</a>].
                  						The IANA source specifies names and multiple aliases for most character
                  						sets. For HL7's purposes, use of multiple alias names is not
                  						allowed. The standard name for HL7 is the one marked by IANA as
                  						"preferred for MIME."  If IANA has not marked one of the aliases as
                  						"preferred for MIME" the main name shall be the one used for HL7.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><a href="#domain-Charset">Table
                     			7</a> lists a few of the IANA defined
                  						character sets that are of interest to current HL7 members.
                  
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-Charset">&nbsp;</a>
                     			Table
                     			7: Domain Charset
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>EBCDIC</td>
                     <td>EBCDIC</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>ISO-10646-UCS-2</td>
                     <td>ISO-10646-UCS-2</td>
                     <td>Deprecated for HL7 use.</td>
                  </tr>
                  <tr>
                     <td>ISO-10646-UCS-4</td>
                     <td>ISO-10646-UCS-4</td>
                     <td>Deprecated for HL7 use.</td>
                  </tr>
                  <tr>
                     <td>ISO-8859-1</td>
                     <td>ISO-8859-1</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>ISO-8859-2</td>
                     <td>ISO-8859-2</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>ISO-8859-5</td>
                     <td>ISO-8859-5</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>JIS-2022-JP</td>
                     <td>JIS-2022-JP</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>US-ASCII</td>
                     <td>US-ASCII</td>
                     <td>Required for HL7 use.</td>
                  </tr>
                  <tr>
                     <td>UTF-7</td>
                     <td>UTF-7</td>
                     <td>HL7 is indifferent to the use of this Charset.</td>
                  </tr>
                  <tr>
                     <td>UTF-8</td>
                     <td>UTF-8</td>
                     <td>Required for Unicode support.</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							The above list is not complete let alone exclusive. In particular,
                  							international HL7 affiliates may make special recommendations about
                  							charsets to be used in their realm. These recommendations may add
                  							additional charsets and may reassign the recommendations status of a
                  							listed charset.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The charset property needs to be known where the data of the <em>ED</em> is character type
                  						data in any form. If the data is provided in-line, then the charset must be 
                  						known. If the data is provided as a reference, and the access method does not provide
                  						the charset for the data, typically as a mime header, then the charset must be 
                  						conveyed as part of the <em>ED</em>. 
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Interested readers may also want to consult the "Character Model for
                  						the World Wide Web" [<a href="http://www.w3.org/TR/charmod">http://www.w3.org/TR/charmod</a>] for a more complete
                  						discussion of character set and related issues
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.language"></a>2.4.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Language : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						For character based information the language property specifies the
                  						human language of the text.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The need for a language code for text data values is documented in RFC
                  						2277, IETF Policy on Character Sets and Languages
                  						[<a href="http://www.ietf.org/rfc/rfc2277.txt">http://www.ietf.org/rfc/rfc2277.txt</a>]. Further background
                  						information can be found in Using International Characters in Internet
                  						Mail [<a href="http://www.imc.org/mail-i18n.html">http://www.imc.org/mail-i18n.html</a>], a memo by the
                  						Internet Mail Consortium.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The principles of the code domain of this attribute are specified by
                  						the Internet standard RFC 3066 [<a href="http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3066.txt</a>].
                  						The RFC 3066 coding scheme is constructed from a primary subtag component encoded
                  						using the language codes of ISO 639, plus two codes for extensions
                  						for languages not represented in ISO 639.  The code optionally includes a
                  						second subtag component encoded using the two letter country codes of ISO
                  						3166, or a language code extension registered by the Internet Assigned
                  						Names Authority [<a href="http://www.iana.org/assignments/language-tags">http://www.iana.org/assignments/language-tags</a>].<a name="fn-src17"></a><a href="#fn17"><sup style="font-size: smaller">17</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						While Language tags usually alter the meaning of the text, the language does
                  						not alter the meaning of the characters in the text.<a name="fn-src18"></a><a href="#fn18"><sup style="font-size: smaller">18</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Representation of language tags to text is highly dependent on the
                  							ITS. An ITS may use the native way of language tagging provided by
                  							its target implementation technology. Some may have language
                  							information in a separate component, e.g., XML has the xml:lang tag
                  							for strings. Others may rely on language tags as part of the binary
                  							character string representation, e.g., ISO 10646 (Unicode) and its
                  							"plane-14" language tags.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The language tag should not be mandatory if it is not mandatory in the
                  						implementation technology. Semantically, language tagging of strings
                  						follows a default-logic. In circumstances where a realm may support
                  						multiple langauges, it is up to the realm to define rules to handle
                  						language where none is specified when no language is specified. If no
                  						other rule is specified, the local language of the reader is assumed.
                  						If a language is set for an entire message or document, that language
                  						is the default. If any information element or value that is superior in
                  						the syntax hierarchy specifies a language, that language is the default
                  						for all subordinate text values.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If language tags are present in the beginning of the encoded binary
                  						text (e.g., through Unicode's plane-14 tags) this is the source of the
                  						language property of the encapsulated data value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.compression"></a>2.4.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Compression : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Indicates whether the raw byte data is compressed, and what
                  						compression algorithm was used.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-CompressionAlgorithm">&nbsp;</a>
                     			Table
                     			8: Domain CompressionAlgorithm
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>status</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>DF&nbsp;</td>
                        <td>deflate&nbsp;</td>
                        <td>required&nbsp;</td>
                        <td>The deflate compressed data format as specified in RFC 1951 [http://www.ietf.org/rfc/rfc1951.txt].&nbsp;</td>
                     </tr>
                     <tr>
                        <td>GZ&nbsp;</td>
                        <td>gzip&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>A compressed data format that is compatible with the widely used GZIP utility as specified in RFC 1952 [http://www.ietf.org/rfc/rfc1952.txt]
                           (uses the deflate algorithm).&nbsp;
                        </td>
                     </tr>
                     <tr>
                        <td>ZL&nbsp;</td>
                        <td>zlib&nbsp;</td>
                        <td>indifferent&nbsp;</td>
                        <td>A compressed data format that also uses the deflate algorithm.  Specified as RFC 1950 [http://www.ietf.org/rfc/rfc1952.txt]&nbsp;</td>
                     </tr>
                     <tr>
                        <td>Z&nbsp;</td>
                        <td>compress&nbsp;</td>
                        <td>deprecated&nbsp;</td>
                        <td>Original UNIX compress algorithm and file format using the LZC algorithm (a variant of LZW).  Patent encumbered and less efficient
                           than deflate.&nbsp;
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <a class="termref" href="#dt-ST">ST</a> may never be compressed.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.reference"></a>2.4.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Reference : <a class="termref" href="#dt-TEL">TEL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A telecommunication address (<a class="termref" href="#dt-TEL">TEL</a>), such as a URL for HTTP or FTP,
                  						which will resolve to precisely the same binary data that could as
                  						well have been provided as inline data.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The semantic value of an encapsulated data value is the same,
                  						regardless whether the data is present inline data or just
                  						by-reference. However, an encapsulated data value without inline data
                  						behaves differently, since any attempt to examine the data requires
                  						the data to be downloaded from the reference. An encapsulated data
                  						value may have both inline data and a reference.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The reference must point to the same data as provided inline.
                  						It is an error if the data resolved through the reference does
                  						not match either the integrity check, in-line data, or data that
                  						had earlier been retrieved through the reference and then cached.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The reference may contain a usablePeriod to indicate that the
                  						data may only be available for a limited period of time. Whether
                  						the reference is limited by a usablePeriod or not, the content of
                  						the reference is fixed for all time. Any application using the
                  						reference must always receive the same data. The reference cannot
                  						be reused to send a different version of the same data, or different
                  						data.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						By-reference encapsulated data may not be allowed depending on the
                  						attribute or component that is declared encapsulated data.
                  						Values of type <a class="termref" href="#dt-ST">ST</a> must always be inline.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.integrityCheck"></a>2.4.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Integrity Check : <a class="termref" href="#dt-BIN">BIN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The integrity check is a short binary value representing a
                  						cryptographically strong checksum that is calculated over the binary
                  						data. The purpose of this property, when communicated with a reference
                  						is for anyone to validate later whether the reference still resolved
                  						to the same data that the reference resolved to when the encapsulated
                  						data value with reference was created.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						It is an error if the data resolved through the reference does not match
                  						the integrity check.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The integrity check is calculated according to the
                  						<a class="termref" href="#prop-ED.integrityCheckAlgorithm">integrityCheckAlgorithm</a>. By default,
                  						the <em>Secure Hash Algorithm-1</em> (SHA-1) shall be used.
                  						The integrity check is binary encoded according to the rules of
                  						the integrity check algorithm.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The integrity check is calculated over the raw binary data that is
                  						contained in the data component, or that is accessible through the
                  						reference. No transformations are made before the integrity check is
                  						calculated. If the data is compressed, the Integrity Check is
                  						calculated over the compressed data.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.integrityCheckAlgorithm"></a>2.4.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Integrity Check Algorithm : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the algorithm used to compute the integrityCheck
                  						value.<a name="fn-src19"></a><a href="#fn19"><sup style="font-size: smaller">19</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-IntegrityCheckAlgorithm">&nbsp;</a>
                     			Table
                     			9: Domain IntegrityCheckAlgorithm
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>SHA-1</td>
                     <td>secure hash algorithm - 1</td>
                     <td>This algorithm is defined in FIPS PUB 180-1: Secure Hash Standard.  As of April 17, 1995.</td>
                  </tr>
                  <tr>
                     <td>SHA-256</td>
                     <td>secure hash algorithm - 256</td>
                     <td>This algorithm is defined in FIPS PUB 180-2: Secure Hash Standard.</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.thumbnail"></a>2.4.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Thumbnail : <a class="termref" href="#dt-ED">ED</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						An abbreviated rendition of the full data. A thumbnail requires
                  						significantly fewer resources than the full data, while still
                  						maintaining some distinctive similarity with the full data. A
                  						thumbnail is typically used with by-reference encapsulated data. It
                  						allows a user to select data more efficiently before actually
                  						downloading through the reference.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Originally, the term thumbnail refers to an image in a lower
                  						resolution (or smaller size) than another image. However, the
                  						thumbnail concept can be metaphorically used for media types other
                  						than images. For example, a movie may be represented by a shorter
                  						clip; an audio-clip may be represented by another audio-clip that is
                  						shorter, has a lower sampling rate, or a lossy compression.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Thumbnails may not be allowed depending on the attribute or component
                  							that is declared encapsulated data. Values of type <a class="termref" href="#dt-ST">ST</a>
                  							never have thumbnails, and a thumbnail may not itself
                  							contain a thumbnail.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ED x)
      where x.thumbnail.nonNull {
   x.thumbnail.thumbnail.isNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							ITS's should consider the case where the thumbnail and the original
                  							both have the same properties of type, charset and compression. In
                  							this case, these properties need not be represented explicitly for the
                  							thumbnail but might be "inherited" from the main encapsulated data
                  							value to its thumbnail.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ED.equal"></a>2.4.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two values of type <em>ED</em> are equal if and only if their mediatype
                  						and data are equal. For those <em>ED</em> values
                  						with compressed data or referenced data, only the de-referenced and
                  						uncompressed data counts for the equality test. The compression, thumbnail
                  						and reference property themselves are excluded from the equality test.
                  						In addition the language property is excluded from the test, due to the
                  						problems this would introduce values of type <em>ED</em> where the language is not
                  						specified. If the <a class="termref" href="#prop-ED.mediaType">mediaType</a> is character based and the charset property
                  						is not equal, the charset property must be resolved through mapping of the
                  						data between the different character sets.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The integrity check algorithm and integrity check is excluded from the
                  						equality test. However, since equality of integrity check value is
                  						strong indication for equality of the data, the equality test can be
                  						practically based on the integrity check, given equal integrity check
                  						algorithm properties.
                  					
               </p>
            </td>
         </tr><a name="ST"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ST"></a>2.5 
               </h3>
            </td>
            <td class="body_col">
               <h3>Character String (ST) specializes <a class="termref" href="#dt-ED">ED</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					The character string data type stands for text data, primarily
                  					intended for machine processing (e.g., sorting, querying, indexing,
                  					etc.) Used for names, symbols, and formal expressions.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><a class="termref" href="#dt-ST">ST</a> is a restricted <a class="termref" href="#dt-ED">ED</a>,
                  					whose <a class="termref" href="#prop-ED.mediaType">ED.mediaType</a> property is fixed to <em>text/plain</em>,
                  					and whose data must be inlined and not compressed. Thus, the properties compression, reference,
                  					integrity check, algorithm, and thumbnail are not applicable. The character
                  					string data type is used when the appearance of text does not bear meaning,
                  					which is true for formalized text and all kinds of names.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-ST-prop-summary">&nbsp;</a>
                     			Table
                     			10: Property Summary of
                     Character String
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>mediaType</td>
                        <td>CS</td>
                        <td>
                           						Identifies the type of the encapsulated data and identifies a
                           						method to interpret or render the data.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>charset</td>
                        <td>CS</td>
                        <td>
                           						For character-based encoding types, this property specifies the
                           						character set and character encoding used. The charset shall be
                           						identified by an Internet Assigned Numbers Authority (IANA) 
                           						Charset Registration [<a href="http://www.iana.org/assignments/character-sets">http://www.iana.org/assignments/character-sets</a>] 
                           						in accordance with RFC 2978 [<a href="http://www.ietf.org/rfc/rfc2978.txt">http://www.ietf.org/rfc/rfc2978.txt</a>].
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>language</td>
                        <td>CS</td>
                        <td>
                           						For character based information the language property specifies the
                           						human language of the text.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>ST</em> data type interprets the encapsulated data
                  					as character data (as opposed to bits), depending on the charset
                  					property of the encapsulated data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-ST">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-ST"></a><pre>
type CharacterString alias ST specializes ED {
   INT  length;
   ST   headCharacter;
   ST   tailString;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						Because many of the properties of the encapsulated data are bound to a
                  						default value, an ITS need not represent these properties at all. In
                  						fact, if the character encoding is also fixed, the ITS only represents
                  						the encoded character data.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The headCharacter and tailString properties define <em>ST</em> as a sequence
                  					of entities each of which uniquely identifies one character from the
                  					joint set of all characters known by any language of the world.<a name="fn-src20"></a><a href="#fn20"><sup style="font-size: smaller">20</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The head of an <em>ST</em> is a string of only one character. An <em>ST</em>
                  					must have at least one character or else it is NULL. A
                  					zero-length <em>ST</em> is an exceptional value (NULL), not a proper
                  					value.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.headCharacter.notEmpty;
   x.headCharacter.length.equal(1);
   x.headCharacter.tailString.isEmpty;
   x.tailString.isEmpty.implies(x.length.equal(1));
   x.tailString.notEmpty.implies(x.length.equal(x.tailString.length.successor));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The length of an <em>ST</em> is the number of characters, not the number of
                  					encoded bytes, in the string. Byte encoding is an ITS issue and is not relevant on
                  					the application layer.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The following rules apply to whitespace contained within values of type <em>ST</em>:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     						TAB, space and end-of-line are all considered whitespace characters.
                     					
                  </li>
                  <li>
                     						Both preceding and trailing whitespace is significant.
                     					
                  </li>
                  <li>
                     						Different whitespace characters are not interchangable.
                     					
                  </li>
                  <li>
                     						Different representations of end-of-line are normalised according to the
                     						method described in the XML specification
                     						[<a href="http://www.w3.org/TR/2000/REC-xml-20001006#sec-line-ends">Section 2.11 End-of-Line Handling</a>]
                     					
                  </li>
                  <li>
                     						Sequences of whitespace cannot be compressed to shorter sequences.
                     					
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="requirement"><strong>Requirement</strong><p><em>ST</em> is a specialization of <a class="termref" href="#dt-ED">ED</a> so that any RIM attribute which has the type
                           						<a class="termref" href="#dt-ED">ED</a> can be constrained to a <em>ST</em>. The most important case is Act.text, which is
                           						an <a class="termref" href="#dt-ED">ED</a> to cater for the use of references and multimedia data, but is often
                           						constrained to plain text.
                           					
                        </p>
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.mediaType"></a>2.5.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Media Type : <a class="termref" href="#dt-CS">CS</a>, inherited from <a class="termref" href="#dt-ED">ED</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.mediaType.equal("text/plain");
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Fixed to be "text/plain".
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.charset"></a>2.5.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Charset : <a class="termref" href="#dt-CS">CS</a>, inherited from <a class="termref" href="#dt-ED">ED</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.charset.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em>ST</em> must have a known charset. 
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.language"></a>2.5.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Language : <a class="termref" href="#dt-CS">CS</a>, inherited from <a class="termref" href="#dt-ED">ED</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						For character based information the language property specifies the
                  						human language of the text.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The need for a language code for text data values is documented in RFC
                  						2277, IETF Policy on Character Sets and Languages
                  						[<a href="http://www.ietf.org/rfc/rfc2277.txt">http://www.ietf.org/rfc/rfc2277.txt</a>]. Further background
                  						information can be found in Using International Characters in Internet
                  						Mail [<a href="http://www.imc.org/mail-i18n.html">http://www.imc.org/mail-i18n.html</a>], a memo by the
                  						Internet Mail Consortium.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The principles of the code domain of this attribute are specified by
                  						the Internet standard RFC 3066 [<a href="http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3066.txt</a>].
                  						The RFC 3066 coding scheme is constructed from a primary subtag component encoded
                  						using the language codes of ISO 639, plus two codes for extensions
                  						for languages not represented in ISO 639.  The code optionally includes a
                  						second subtag component encoded using the two letter country codes of ISO
                  						3166, or a language code extension registered by the Internet Assigned
                  						Names Authority [<a href="http://www.iana.org/assignments/language-tags">http://www.iana.org/assignments/language-tags</a>].<a name="fn-src21"></a><a href="#fn21"><sup style="font-size: smaller">21</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						While Language tags usually alter the meaning of the text, the language does
                  						not alter the meaning of the characters in the text.<a name="fn-src22"></a><a href="#fn22"><sup style="font-size: smaller">22</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Representation of language tags to text is highly dependent on the
                  							ITS. An ITS may use the native way of language tagging provided by
                  							its target implementation technology. Some may have language
                  							information in a separate component, e.g., XML has the xml:lang tag
                  							for strings. Others may rely on language tags as part of the binary
                  							character string representation, e.g., ISO 10646 (Unicode) and its
                  							"plane-14" language tags.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The language tag should not be mandatory if it is not mandatory in the
                  						implementation technology. Semantically, language tagging of strings
                  						follows a default-logic. In circumstances where a realm may support
                  						multiple langauges, it is up to the realm to define rules to handle
                  						language where none is specified when no language is specified. If no
                  						other rule is specified, the local language of the reader is assumed.
                  						If a language is set for an entire message or document, that language
                  						is the default. If any information element or value that is superior in
                  						the syntax hierarchy specifies a language, that language is the default
                  						for all subordinate text values.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If language tags are present in the beginning of the encoded binary
                  						text (e.g., through Unicode's plane-14 tags) this is the source of the
                  						language property of the encapsulated data value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.compression"></a>2.5.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Compression : <a class="termref" href="#dt-CS">CS</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.compression.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em>ST</em> cannot be compressed.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.reference"></a>2.5.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Reference : <a class="termref" href="#dt-TEL">TEL</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.reference.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em>ST</em> may not reference content from some other location.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.integrityCheck"></a>2.5.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Integrity Check : <a class="termref" href="#dt-BIN">BIN</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.integrityCheck.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Integrity check code is not used with values of type <em>ST</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.integrityCheckAlgorithm"></a>2.5.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Integrity Check Algorithm : <a class="termref" href="#dt-CS">CS</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.integrityCheckAlgorithm.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Integrity check algorithm is not used with values of type <em>ST</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.thumbnail"></a>2.5.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Thumbnail : <a class="termref" href="#dt-ED">ED</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ST x)
      where x.nonNull {
   x.thumbnail.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em>ST</em> do not have thumbnails.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ST.literal"></a>2.5.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two variations of <em>ST</em> literals are defined, a token form
                  						and a quoted string.<a name="fn-src23"></a><a href="#fn23"><sup style="font-size: smaller">23</sup></a>
                  						The token form consists only of the lower case and upper case Latin
                  						alphabet, the ten decimal digits and the underscore. The quoted string
                  						can contain any character between double-quotes. The double quotes
                  						prevent a character string from being interpreted as some other
                  						literal. The token form allows keywords and names to be parsed from
                  						the data type specification language.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
ST.literal ST {
   ST : /"[^]+"/         { $.equal($1); }  /* quoted string */
      | /[a-zA-Z0-9_]+/  { $.equal($1); }; /* token form */
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Since <em>ST</em> literals are so fundamental to implementation
                  							technology, most ITS will specify some modified character string
                  							literal form. However, ITS designers must be aware of the interaction
                  							between the <em>ST</em> literal form and the literal forms
                  							defined for other data types. This is particularly critical if the
                  							other data type's literal form is structured with major components
                  							separated by break-characters (e.g., real number, physical quantity,
                  							set, and list literals, etc.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/dtUML-Concepts.gif" alt="The Concept Descriptor information model."><br>The Concept Descriptor information model.<br></td>
         </tr><a name="CD"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CD"></a>2.6 
               </h3>
            </td>
            <td class="body_col">
               <h3>Concept Descriptor (CD) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A <em>CD</em> represents any kind of concept usually by
                  					giving a code defined in a code system.
                  
                  					A <em>CD</em> can contain the original text or phrase that
                  					served as the basis of the coding and one or more translations into
                  					different coding systems.
                  
                  					A <em>CD</em> can also contain qualifiers to describe, e.g., the
                  					concept of a "left foot" as a postcoordinated term built from the
                  					primary code "FOOT" and the qualifier "LEFT".
                  
                  					In cases of an exceptional value, the <em>CD</em> need not contain a code
                  					but only the original text describing that concept.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-CD-prop-summary">&nbsp;</a>
                     			Table
                     			11: Property Summary of
                     Concept Descriptor
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>code</td>
                        <td>ST</td>
                        <td>
                           						The plain code symbol defined by the code system. For example,
                           						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystem</td>
                        <td>UID</td>
                        <td>
                           						Specifies the code system that defines the code.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemName</td>
                        <td>ST</td>
                        <td>
                           						The common name of the coding system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemVersion</td>
                        <td>ST</td>
                        <td>
                           						If applicable, a version descriptor defined specifically for the given
                           						code system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>displayName</td>
                        <td>ST</td>
                        <td>
                           						A name or title for the code, under which the sending system shows the
                           						code value to its users.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>originalText</td>
                        <td>ED</td>
                        <td>
                           						The text or phrase used as the basis for the coding.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>translation</td>
                        <td>SET&lt;CD&gt;</td>
                        <td>
                           						A set of other concept descriptors that translate this concept
                           						descriptor into other code systems.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>qualifier</td>
                        <td>LIST&lt;CR&gt;</td>
                        <td>
                           						Specifies additional codes that increase the specificity of the the
                           						primary code.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CD">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CD"></a><pre>
type ConceptDescriptor alias CD specializes ANY {
            ST        code;
            ST        displayName;
            UID       codeSystem;
            ST        codeSystemName;
            ST        codeSystemVersion;
            ED        originalText;
            LIST&lt;CR&gt;  qualifier;
            SET&lt;CD&gt;   translation;
            BL        equal(ANY x);
            BL        implies(CD x);
  demotion  ED;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>CD</em> is mostly used in one of its restricted or
                  					"profiled" forms, <a class="termref" href="#dt-CS">CS</a>, <a class="termref" href="#dt-CE">CE</a>, <a class="termref" href="#dt-CV">CV</a>.
                  					Use of the full concept descriptor data type is not common. It
                  					requires a conscious decision and documented rationale. In all other
                  					cases, one of the <em>CD</em> restrictions shall be
                  					used.<a name="fn-src24"></a><a href="#fn24"><sup style="font-size: smaller">24</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					All <em>CD</em> restrictions constrain certain properties.
                  					Properties may be constrained to the extent that
                  					only one value may be allowed for that property, in which case
                  					mentioning the property becomes redundant. Constraining a property to
                  					one value is referred to as suppressing that property. Although,
                  					conceptually a suppressed property is still semantically applicable,
                  					it is safe for an HL7 interface to assume the implicit default value
                  					without testing.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						In general, this is true of many types in this data types specification,
                  						however it is a frequently asked question concerning the <em>CD</em> descendents.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.code"></a>2.6.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The plain code symbol defined by the code system. For example,
                  						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em>CD</em> value has a non-NULL <em>code</em> property
                  						whose value is a character string that is a symbol defined by the
                  						coding system identified by <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>. Conversely, a
                  						<em>CD</em> value without a value for the code property, or with
                  						a value that is not from the cited coding system is an exceptional
                  						value (NULL of flavor <em>other</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.codeSystem"></a>2.6.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System : <a class="termref" href="#dt-UID">UID</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the code system that defines the code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Code systems shall be referred to by a <a class="termref" href="#dt-UID">UID</a>, which allows unambiguous 
                  						reference to standard HL7 codes, other standard code systems, as well as local
                  						codes. HL7 shall assign a <a class="termref" href="#dt-UID">UID</a> to each of its code
                  						tables as well as to external standard coding systems that are being
                  						used with HL7. Local sites must use their ISO Object Identifier
                  						(<a class="termref" href="#dt-OID">OID</a>) to construct a globally unique local coding
                  						system identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
                  						contain HL7 standard and external code system identifiers
                  						respectively. The HL7 Vocabulary Technical Committee maintains these
                  						two branches.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em>CD</em> value (i.e. a <em>CD</em>
                  						value that has a non-null code property) has a non-NULL <em>codeSystem</em>
                  						specifying the system of concepts that defines the code. In other
                  						words whenever there is a code there is also a code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although every non-NULL <em>CD</em> value has a defined code
                  							system, in some circumstances, the ITS representation for the
                  							<em>CD</em> value needs not explicitly mention the code
                  							system. For example, when the context mandates one and only one code
                  							system to be used specifying the code system explicitly would be
                  							redundant. However, in that case the <em>codeSystem</em> takes on that
                  							context-specific default value and is not NULL.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em>CD</em> of NULL-flavor <em>other</em> indicates that
                  						a concept could not be coded in the coding system specified. Thus, for
                  						these coding exceptions, the code system that did not contain the
                  						appropriate concept must be provided in <em>codeSystem</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code domains are qualified such that they include the portion of
                  						any pertinent local coding system that does not simply paraphrase the
                  						standard coding system (<em>coded with extensibility</em>, CWE.)
                  						If a CWE qualified field actually contains such a local code, the
                  						coding system must specify the local coding system from which the
                  						local code was taken. However, for CWE domains the local code is a
                  						valid member of the domain, so that local codes in CWE domains
                  						constitute neither an error nor an exceptional (NULL/other) value in
                  						the sense of this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.other {
   x.code.other;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.codeSystemName"></a>2.6.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Name : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The common name of the coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The code system name has no computational value. The purpose of a code
                  						system name is to assist an unaided human interpreter of a code value to
                  						interpret <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						It is suggested &#8212; though
                  						not absolutely required &#8212; that ITS provide for <em>codeSystemName</em> in
                  						order to annotate the <a class="termref" href="#dt-UID">UID</a> for human comprehension.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 systems must not functionally rely on <em>codeSystemName</em>. <em>codeSystemName</em> can
                  						never modify the meaning of <a class="termref" href="#prop-CD.codeSystem">codeSystem</a> and
                  						cannot exist without <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemName.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.codeSystemVersion"></a>2.6.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Version : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If applicable, a version descriptor defined specifically for the given
                  						code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall specify how these version strings are formed for each
                  						external code system. If HL7 has not specified how version strings are
                  						formed for a particular coding system, version designations have no
                  						defined meaning for such coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Different versions of one code system must be compatible. Whenever a
                  						code system changes in an incompatible way, it will constitute a new
                  						code system, not simply a different version, regardless of how the
                  						vocabulary publisher calls it.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the publisher of ICD-9 and ICD-10 calls these code
                  						systems, "revision 9" and "revision 10" respectively. However, ICD-10
                  						is a complete redesign of the ICD code, not a backward compatible
                  						version. Therefore, for the purpose of this data type specification,
                  						ICD-9 and ICD-10 are different code systems, not just different
                  						versions. By contrast, when LOINC updates from revision "1.0j" to
                  						"1.0k", HL7 would consider this to be just another version of LOINC,
                  						since LOINC revisions are backwards compatible.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemVersion.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.displayName"></a>2.6.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Display Name : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A name or title for the code, under which the sending system shows the
                  						code value to its users.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>displayName</em> is included both as a courtesy to an unaided human
                  						interpreter of a code value and as a documentation of the name used to
                  						display the concept to the user. The display name has no functional
                  						meaning; it can never exist without a code;  and it can never
                  						modify the meaning of <a class="termref" href="#prop-CD.code">code</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							HL7 offers a "print name" in it's predefined vocabulary domains. These
                  							values are suitable for use in the displayName.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Display names may not alter the meaning of the code value. Therefore,
                  							display names should not be presented to the user on a receiving
                  							application system without ascertaining that the display name
                  							adequately represents the concept referred to by the code
                  							value. Communication must not simply rely on the display name. The
                  							display name's main purpose is to support debugging of HL7 protocol
                  							data units (e.g., messages.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.displayName.nonNull.implies(x.code.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.originalText"></a>2.6.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Original Text : <a class="termref" href="#dt-ED">ED</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The text or phrase used as the basis for the coding.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The original text exists in a scenario where an originator of the
                  						information does not assign a code, but where the code is assigned
                  						later by a coder (post-coding.)  In the production of a concept
                  						descriptor, original text may thus exist without a code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although post-coding is often performed from free text information,
                  							such as documents, scanned images or dictation, multi-media data is
                  							explicitly not permitted as original text. Also, the original text
                  							property is not meant to be a link into the entire source
                  							document. The link between different artifacts of medical information
                  							(e.g., document and coded result) is outside the scope of this
                  							specification and is maintained elsewhere in the HL7 standards. The
                  							original text is an excerpt of the relevant information in the
                  							original sources, rather than a pointer or exact reproduction. Thus
                  							the original text is to be represented in plain text form.
                  
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em>CD</em> may have a non-NULL original text
                  						property despite having a NULL <a class="termref" href="#prop-CD.code">code</a>. Any <em>CD</em> value
                  						with <a class="termref" href="#prop-CD.code">code</a> of NULL signifies a coding exception. In this case,
                  						<em>originalText</em> is a name or description of the concept that was
                  						not coded. Such exceptional <em>CD</em> values may also contain <a class="termref" href="#prop-CD.translation">translation</a>s.
                  						Such translations directly encode the concept described in <em>originalText</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em>CD</em> can be demoted into an <a class="termref" href="#dt-ST">ST</a>
                  						value representing only the <em>originalText</em> of the <em>CD</em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.originalText.nonNull {
   ((ST)x).equal(x.originalText);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.translation"></a>2.6.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Translation : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CD">CD</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A set of other concept descriptors that translate this concept
                  						descriptor into other code systems.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>translation</em> is a set of other <em>CD</em>s that
                  						each translate the first <em>CD</em> into different code
                  						systems. Each element of the translation set was translated from the
                  						first <em>CD</em>. Each translation may, however, also contain
                  						translations. Thus, when a code is translated multiple times the
                  						information about which code served as the input to which translation
                  						will be preserved.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							The translations are quasi-synonyms of one real-world concept. Every
                  							translation in the set is supposed to express the same meaning "in
                  							other words."  However, exact synonymy rarely exists between two
                  							structurally different coding systems. For this reason, not all of the
                  							translations will be equally exact.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.qualifier"></a>2.6.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Qualifier : <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-CR">CR</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies additional codes that increase the specificity of the the
                  						primary code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The primary code and all the qualifiers together make up one
                  						concept. A <em>CD</em> with qualifiers is also called a
                  						<em>code phrase</em> or <em>postcoordinated expression</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Qualifiers constrain the meaning of the primary code, but cannot negate
                  						it or change it's meaning to that of another value in the primary coding
                  						system
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Qualifiers can only be used according to well-defined rules of
                  						post-coordination. A value of type <em>CD</em> may only have qualifiers if it's
                  						code system defines the use of such qualifiers or if there is a third
                  						code system that specifies how other code systems may be combined.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, SNOMED CT allows constructing concepts as a combination
                  						of multiple codes. SNOMED CT defines a concept "cellulitis (disorder)"
                  						(128045006) an attribute "finding site" (363698007) and another
                  						concept "foot structure (body structure)" (56459004). SNOMED CT allows
                  						one to combine these codes in a code phrase:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 1</caption>
                  <tr>
                     <td class="example"><pre>
&lt;observation&gt;
   ...
   &lt;value code="128045006" codeSystem="&amp;amp;SNOMED-CT;" displayName="cellulitis (disorder)"&gt;
      &lt;qualifier code="56459004" displayName="foot structure"&gt;
         &lt;name code="363698007" displayName="finding site"/&gt;
      &lt;/qualifier&gt;
   &lt;/value&gt;
   ...
&lt;/observation&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In this example, there is one code system, SNOMED-CT that defines the
                  						primary code and all the qualifiers and how these are used, which is why in our
                  						example representation the codeSystem does not need to be mentioned for the
                  						qualifier name and value (the codeSystem is inherited from the primary code.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						It is important to note that the allowable qualifiers are specified by
                  						the code system. For instance, in SNOMED CT, there is a defined set of
                  						qualifying attributes, and only Findings and Disorders can be
                  						qualified with the "finding site" attribute. Use of qualifiers outside
                  						the boundaries specified by the code system is a non-conformant use of
                  						the <em>CD</em> data type. Adherence to the rules specified by the code system
                  						enables post-coordinated expressions to be compared with
                  						pre-coordinated concepts (such as where one might compare the above
                  						code phrase to the pre-coordinated concept "cellulitis of foot
                  						(disorder)" (128276007), which is defined within SNOMED CT as having a
                  						finding site of foot structure).   <em>CD</em> does not provide
                  						for normalization of compositional expressions, therefore it is
                  						possible to create ambiguous expressions.  Users should understand
                  						that they must provide the additional constraints necessary to assure
                  						unambiguous data representation, if they are planning to create
                  						compositional expressions using <em>CD</em>.  Otherwise, they risk
                  						the inability to retrieve a complete set of all records corresponding
                  						to any given query.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Another common example is the U.S. Centers for Medicare and Medicaid
                  						Services (CMS) (previously known as the Health Care Financing
                  						Administration, HCFA) procedure codes. CMS procedure codes (HCPCS) are
                  						based on CPT-4 and add additional qualifiers to it. For example, the
                  						patient with above finding (plus peripheral arterial disease, diabetes
                  						mellitus, and a chronic skin lesion at the left great toe) may have an
                  						amputation of that toe. The CPT-4 concept is "Amputation, toe
                  						metatarsophalangeal joint" (28820) and a HCPCS qualifier needs to be
                  						added to indicate "left foot, great toe" (TA). Thus we code:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 2</caption>
                  <tr>
                     <td class="example"><pre>
&lt;procedure&gt;
   ...
   &lt;cd code="28820" codeSystem="&amp;amp;CP4;" displayName="Amputation, toe metatarsophalangeal joint"&gt;
      &lt;qualifier code="TA" codeSystem="&amp;amp;HCP;" displayName="left foot, great toe"/&gt;
   &lt;/cd&gt;
   ...
&lt;/procedure&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In this example, the code system of the qualifier (HCPCS) is different
                  						than the code system of the primary code (CPT-4.) It is only because
                  						there are well-defined rules that define how these codes can be
                  						combined, that the qualifier may be used. Note also, that the role
                  						name is optional, and for HCPCS codes there are no distinguished role
                  						names.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The order of qualifiers is preserved, particularly for the case where
                  						the coding system allows post-coordination but defines no role
                  						names. (e.g., some ICD-9CM codes, or the old SNOMED "multiaxial"
                  						coding.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.equal"></a>2.6.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The main use of concept descriptors is for the purpose of indexing,
                  						querying and decision-making based on a coded value. A semantically
                  						unambiguous specification of coded values therefore requires a clear
                  						definition of what equality of concept descriptor values means and how
                  						<em>CD</em> values should be compared. (For more details on
                  						comparing pre- and post-coordinated expressions, see Dolin RH,
                  						Spackman KA, Markwell D. Selective Retrieval of Pre- and
                  						Post-coordinated SNOMED Concepts. Fall AMIA 2002; 210-14, or the July
                  						2003 SNOMED CT Implementation Guide.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The equality of two <em>CD</em> values is determined solely
                  						based upon <a class="termref" href="#prop-CD.code">code</a> and <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						<a class="termref" href="#prop-CD.codeSystemVersion">codeSystemVersion</a> is
                  						excluded from the equality test.<a name="fn-src25"></a><a href="#fn25"><sup style="font-size: smaller">25</sup></a>
                  						If qualifiers are present, the qualifiers are included in the equality
                  						test. Translations are not included in the equality test.<a name="fn-src26"></a><a href="#fn26"><sup style="font-size: smaller">26</sup></a>
                  						Exceptional <em>CD</em> values are not equal even if they have
                  						the same NULL-flavor or the same original text.<a name="fn-src27"></a><a href="#fn27"><sup style="font-size: smaller">27</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(x.code.equal(y.code)
             .and(x.codeSystem.equal(y.codingSystem))
             .and(x.qualifier.equal(y.qualifier)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code systems define certain style options to their code
                  						values. For example, the U.S. National Drug Code (NDC) has a dash and
                  						a non-dash form. An example for the dash form may be 1234-5678-90 when
                  						the non-dash form is 01234567890. Another example for this problem is
                  						when certain ISO or ANSI code tables define optional alphanumeric and
                  						numeric forms of two or three character lengths all in one standard.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In the case where code systems provide for multiple representations,
                  						HL7 shall make a ruling about which is the preferred form. HL7 shall
                  						document that ruling where that respective external coding system is
                  						recognized. HL7 shall decide upon the preferred form based on criteria
                  						of practicality and common use. In absence of clear criteria of
                  						practicality and common use, the safest, most extensible, and least
                  						stylized (the least decorated) form shall be given
                  						preference.<a name="fn-src28"></a><a href="#fn28"><sup style="font-size: smaller">28</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CD.implies"></a>2.6.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Implies : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies whether this <em>CD</em> is a specialization of
                  						the operand <em>CD</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Naturally, concepts can be narrowed and widened to include or exclude
                  						other concepts. Many coding systems have an explicit notion of concept
                  						specialization and generalization. The HL7 vocabulary principles also
                  						provide for concept specialization for HL7 defined value sets.
                  						<em>implies</em> is a predicate that compares whether one
                  						concept is a specialization of another concept, and therefore implies
                  						that other concept.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						When writing predicates (e.g., conditional statements) that compare
                  						two codes, one should usually test for implication not equality of
                  						codes.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, in <a href="#domain-TelecommunicationAddressUse">Table
                     			20</a> the
                  						"telecommunication use" concepts: work (W), home (H), primary home
                  						(HP), and vacation home (HV) are defined, where both HP and HV imply
                  						H. When selecting any home phone number, one should test whether the
                  						given use-code <em>c</em>&nbsp;<em>implies</em> H. Testing for
                  						<em>c</em>&nbsp;<em>equal</em> H would only find unspecified home
                  						phone numbers, but not the primary home phone number.
                  
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Operationally, implication can be evaluated in one of two ways. The
                  						code system literals may be designed such that one single hierarchy is
                  						reflected in the code literal itself (e.g., ICD-9.) Apart from such
                  						special cases, however, a terminological knowledge base and an
                  						appropriate subsumption algorithm will be required to evaluate
                  						implication statements. For post-coordinated coding systems, designing
                  						such a subsumption algorithm is a non-trivial task.<a name="fn-src29"></a><a href="#fn29"><sup style="font-size: smaller">29</sup></a></p>
            </td>
         </tr><a name="CR"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CR"></a>2.7 
               </h3>
            </td>
            <td class="body_col">
               <h3>Concept Role (CR) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A concept qualifier code with optionally named role.  Both qualifier
                  					role and value codes must be defined by the coding system of the <a class="termref" href="#dt-CD">CD</a>
                  					containing the concept qualifier.  For example, if SNOMED RT defines a concept "leg", a
                  					role relation "has-laterality", and another concept "left", the concept role
                  					relation allows to add the qualifier "has-laterality: left" to a
                  					primary code "leg" to construct the meaning "left leg".
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-CR-prop-summary">&nbsp;</a>
                     			Table
                     			12: Property Summary of
                     Concept Role
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>name</td>
                        <td>CV</td>
                        <td>
                           						Specifies the manner in which the concept role value contributes to
                           						the meaning of a code phrase.  For example, if SNOMED RT defines a
                           						concept "leg", a role relation "has-laterality", and another concept
                           						"left", the concept role relation allows to add the qualifier
                           						"has-laterality: left" to a primary code "leg" to construct the
                           						meaning "left leg".  In this example, <em>name</em> is "has-laterality".
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>value</td>
                        <td>CD</td>
                        <td>
                           						The concept that modifies the primary code of a code phrase through
                           						the role relation.  For example, if SNOMED RT defines a concept "leg",
                           						a role relation "has-laterality", and another concept "left", the
                           						concept role relation allows adding the qualifier "has-laterality:
                           						left" to a primary code "leg" to construct the meaning "left leg".  In
                           						this example, value is "left".
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>inverted</td>
                        <td>BN</td>
                        <td>
                           						Indicates if the sense of name is inverted.  This can be used
                           						in cases where the underlying code system defines inversion but does
                           						not provide reciprocal pairs of role names. By default, inverted is
                           						<em>false</em>.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The use of qualifiers is strictly governed by the code system
                  					used. <a class="termref" href="#dt-CD">CD</a> does not permit using code
                  					qualifiers with code systems that do not provide for qualifiers
                  					(e.g. pre-coordinated systems, such as LOINC, ICD-10 PCS.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CR">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CR"></a><pre>
protected type ConceptRole alias CR specializes ANY {
   CV  name;
   BN  inverted;
   CD  value;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CR.name"></a>2.7.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Name : <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the manner in which the concept role value contributes to
                  						the meaning of a code phrase.  For example, if SNOMED RT defines a
                  						concept "leg", a role relation "has-laterality", and another concept
                  						"left", the concept role relation allows to add the qualifier
                  						"has-laterality: left" to a primary code "leg" to construct the
                  						meaning "left leg".  In this example, <em>name</em> is "has-laterality".
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If the parent <a class="termref" href="#prop-CD.codeSystem">CD.codeSystem</a> allows postcoordination
                  						but no role names (e.g. SNOMED) then <em>name</em> can be NULL.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CR.value"></a>2.7.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Value : <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The concept that modifies the primary code of a code phrase through
                  						the role relation.  For example, if SNOMED RT defines a concept "leg",
                  						a role relation "has-laterality", and another concept "left", the
                  						concept role relation allows adding the qualifier "has-laterality:
                  						left" to a primary code "leg" to construct the meaning "left leg".  In
                  						this example, <a class="termref" href="#prop-CR.value">value</a> is "left".
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>value</em> is of type <a class="termref" href="#dt-CD">CD</a> and thus can in turn have
                  						qualifiers. This allows qualifiers to nest. Qualifiers can only be
                  						used as far as the underlying code system defines them. It is not
                  						allowed to use any kind of qualifiers for code systems that do not
                  						explicitly allow and regulate such use of qualifiers.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CR x)
      where x.nonNull {
   x.value.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CR.inverted"></a>2.7.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Inversion Indicator : <a class="termref" href="#dt-BN">BN</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Indicates if the sense of <a class="termref" href="#prop-CR.name">name</a> is inverted.  This can be used
                  						in cases where the underlying code system defines inversion but does
                  						not provide reciprocal pairs of role names. By default, inverted is
                  						<em>false</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, a code system may define the role relation "causes"
                  						and the concepts "Streptococcus pneumoniae" and "Pneumonia". If
                  						that code system allows its roles to be inverted, one can construct
                  						the post-coordinated concept "Pneumococcus pneumonia" through
                  						"Pneumonia - causes, inverted - Streptococcus pneumoniae."
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Roles may only be inverted if the underlying coding system allows such
                  						inversion. Notably, if a coding system defines roles in inverse pairs
                  						or intentionally does not define certain inversions, the appropriate
                  						role code (e.g. "caused-by") must be used rather than inversion. It
                  						must be known whether the inverted property is <em>true</em> or
                  						<em>false</em>, since if it is NULL, the role cannot be interpreted.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b><em>inverted</em> should be conveyed in an indicator attribute,
                  							whose default value is <em>false</em>. That way the inverted
                  							indicator does not have to be sent when the role is not inverted.
                  						
               </blockquote>
            </td>
         </tr><a name="CS"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CS"></a>2.8 
               </h3>
            </td>
            <td class="body_col">
               <h3>Coded Simple Value (CS) specializes <a class="termref" href="#dt-CV">CV</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Coded data in its simplest form, where only the code is not predetermined.
                  					The code system and code system version are fixed by the context in which
                  					the <em>CS</em> value occurs. <em>CS</em> is used for coded attributes that have a single
                  					HL7-defined value set.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-CS-prop-summary">&nbsp;</a>
                     			Table
                     			13: Property Summary of
                     Coded Simple Value
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>code</td>
                        <td>ST</td>
                        <td>
                           						The plain code symbol defined by the code system. For example,
                           						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CS">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CS"></a><pre>
type CodedSimpleValue alias CS specializes CV {
            ST  code;
   literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>CS</em> can only be used in either of the following cases:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     						for a coded attribute which has a single HL7-defined code system, and
                     						where code additions to that value set require formal HL7 action (such
                     						as harmonization.) Such coded attributes must have type <em>CS</em>.
                     					
                  </li>
                  <li>
                     						for a property in this specification that is assigned to a single code
                     						system defined either in this specification or defined outside HL7 by a body
                     						that has authority over the concept and the maintenance of that code system.
                     					
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, since <a class="termref" href="#dt-ED">ED</a> subscribes to the MIME
                  					design, it trusts IETF to manage the media type. This includes that this
                  					specification subscribes to the extension mechanism built into the MIME media
                  					type code (e.g., "application/x-myapp").
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For <em>CS</em> values, the designation of the domain qualifier
                  					will always be CNE (<em>coded, non-extensible</em>) and the
                  					context will determine which HL7 values to use.<a name="fn-src30"></a><a href="#fn30"><sup style="font-size: smaller">30</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.code"></a>2.8.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.codeSystem"></a>2.8.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System : <a class="termref" href="#dt-UID">UID</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Every non-NULL <em>CS</em> value has a defined <em></em>.  The
                  						ITS representation of <em>CS</em> need not explicitly mention
                  						the code system, because the context mandates one and only one code
                  						system to be used. Specifying the code system explicitly would be
                  						redundant. However, <em></em> assumes the
                  						context-specific default value and is not NULL.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
   x.codeSystem.equal(CONTEXT.codeSystem);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em>CS</em> of NULL-flavor <em>other</em> indicates that a
                  						concept could not be coded in the coding system specified. In these cases,
                  						<a class="termref" href="#prop-CS.code">code</a> must be Null.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x)
      where x.other {
   x.code.isNull;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.codeSystemName"></a>2.8.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Name : <a class="termref" href="#dt-ST">ST</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.codeSystemName.equal(CONTEXT.codeSystemName);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.codeSystemVersion"></a>2.8.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Version : <a class="termref" href="#dt-ST">ST</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.codeSystemVersion.equal(CONTEXT.codeSystemVersion);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.displayName"></a>2.8.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Display Name : <a class="termref" href="#dt-ST">ST</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.displayName.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.originalText"></a>2.8.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Original Text : <a class="termref" href="#dt-ED">ED</a>, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.originalText.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.translation"></a>2.8.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Translation : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CD">CD</a>&gt;, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.translation.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.qualifier"></a>2.8.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Qualifier : <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-CR">CR</a>&gt;, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CS x) {
   x.qualifier.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CS.literal"></a>2.8.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
CS.literal ST {
   ST : /[a-zA-Z0-9_]+/  { $.equal($1); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The string literal form of <em>CS</em> is primarily defined for the purposes of
                  						this specification. The literal form is a string representation of the code
                  						for the codeSystem for the context of the <em>CS</em>. You
                  						cannot determine <a class="termref" href="#prop-CS.codeSystem">codeSystem</a> or
                  						<a class="termref" href="#prop-CS.codeSystemVersion">codeSystemVersion</a> from the literal itself,
                  						so the literal only has use where the context is known.
                  					
               </p>
            </td>
         </tr><a name="CV"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CV"></a>2.9 
               </h3>
            </td>
            <td class="body_col">
               <h3>Coded Value (CV) specializes <a class="termref" href="#dt-CE">CE</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Coded data, specifying only a code, code system, and optionally
                  					display name and original text. Used only as the type of
                  					properties of other	data types.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-CV-prop-summary">&nbsp;</a>
                     			Table
                     			14: Property Summary of
                     Coded Value
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>code</td>
                        <td>ST</td>
                        <td>
                           						The plain code symbol defined by the code system. For example,
                           						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystem</td>
                        <td>UID</td>
                        <td>
                           						Specifies the code system that defines the code.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemName</td>
                        <td>ST</td>
                        <td>
                           						The common name of the coding system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemVersion</td>
                        <td>ST</td>
                        <td>
                           						If applicable, a version descriptor defined specifically for the given
                           						code system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>displayName</td>
                        <td>ST</td>
                        <td>
                           						A name or title for the code, under which the sending system shows the
                           						code value to its users.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>originalText</td>
                        <td>ED</td>
                        <td>
                           						The text or phrase used as the basis for the coding.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CV">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CV"></a><pre>
type CodedValue alias CV specializes CE {
   ST   code;
   UID  codeSystem;
   ST   codeSystemName;
   ST   codeSystemVersion;
   ST   displayName;
   ED   originalText;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>CV</em> is used when any reasonable use case will require only a
                  					single code value to be sent. Thus, it should not be used in
                  					circumstances where multiple alternative codes for a given value are
                  					desired. This type may be used with both the CNE (<em>coded,
                     					non-extensible</em>) and the CWE (<em>coded, with
                     					extensibility</em>) domain qualifiers.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.code"></a>2.9.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The plain code symbol defined by the code system. For example,
                  						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value has a non-NULL <em>code</em> property
                  						whose value is a character string that is a symbol defined by the
                  						coding system identified by <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>. Conversely, a
                  						<em></em> value without a value for the code property, or with
                  						a value that is not from the cited coding system is an exceptional
                  						value (NULL of flavor <em>other</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.codeSystem"></a>2.9.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System : <a class="termref" href="#dt-UID">UID</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the code system that defines the code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Code systems shall be referred to by a <a class="termref" href="#dt-UID">UID</a>, which allows unambiguous 
                  						reference to standard HL7 codes, other standard code systems, as well as local
                  						codes. HL7 shall assign a <a class="termref" href="#dt-UID">UID</a> to each of its code
                  						tables as well as to external standard coding systems that are being
                  						used with HL7. Local sites must use their ISO Object Identifier
                  						(<a class="termref" href="#dt-OID">OID</a>) to construct a globally unique local coding
                  						system identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
                  						contain HL7 standard and external code system identifiers
                  						respectively. The HL7 Vocabulary Technical Committee maintains these
                  						two branches.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value (i.e. a <em></em>
                  						value that has a non-null code property) has a non-NULL <em>codeSystem</em>
                  						specifying the system of concepts that defines the code. In other
                  						words whenever there is a code there is also a code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although every non-NULL <em></em> value has a defined code
                  							system, in some circumstances, the ITS representation for the
                  							<em></em> value needs not explicitly mention the code
                  							system. For example, when the context mandates one and only one code
                  							system to be used specifying the code system explicitly would be
                  							redundant. However, in that case the <em>codeSystem</em> takes on that
                  							context-specific default value and is not NULL.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em></em> of NULL-flavor <em>other</em> indicates that
                  						a concept could not be coded in the coding system specified. Thus, for
                  						these coding exceptions, the code system that did not contain the
                  						appropriate concept must be provided in <em>codeSystem</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code domains are qualified such that they include the portion of
                  						any pertinent local coding system that does not simply paraphrase the
                  						standard coding system (<em>coded with extensibility</em>, CWE.)
                  						If a CWE qualified field actually contains such a local code, the
                  						coding system must specify the local coding system from which the
                  						local code was taken. However, for CWE domains the local code is a
                  						valid member of the domain, so that local codes in CWE domains
                  						constitute neither an error nor an exceptional (NULL/other) value in
                  						the sense of this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.other {
   x.code.other;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.codeSystemName"></a>2.9.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The common name of the coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The code system name has no computational value. The purpose of a code
                  						system name is to assist an unaided human interpreter of a code value to
                  						interpret <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						It is suggested &#8212; though
                  						not absolutely required &#8212; that ITS provide for <em>codeSystemName</em> in
                  						order to annotate the <a class="termref" href="#dt-UID">UID</a> for human comprehension.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 systems must not functionally rely on <em>codeSystemName</em>. <em>codeSystemName</em> can
                  						never modify the meaning of <a class="termref" href="#prop-CD.codeSystem">codeSystem</a> and
                  						cannot exist without <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemName.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.codeSystemVersion"></a>2.9.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Version : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If applicable, a version descriptor defined specifically for the given
                  						code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall specify how these version strings are formed for each
                  						external code system. If HL7 has not specified how version strings are
                  						formed for a particular coding system, version designations have no
                  						defined meaning for such coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Different versions of one code system must be compatible. Whenever a
                  						code system changes in an incompatible way, it will constitute a new
                  						code system, not simply a different version, regardless of how the
                  						vocabulary publisher calls it.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the publisher of ICD-9 and ICD-10 calls these code
                  						systems, "revision 9" and "revision 10" respectively. However, ICD-10
                  						is a complete redesign of the ICD code, not a backward compatible
                  						version. Therefore, for the purpose of this data type specification,
                  						ICD-9 and ICD-10 are different code systems, not just different
                  						versions. By contrast, when LOINC updates from revision "1.0j" to
                  						"1.0k", HL7 would consider this to be just another version of LOINC,
                  						since LOINC revisions are backwards compatible.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemVersion.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.displayName"></a>2.9.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Display Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A name or title for the code, under which the sending system shows the
                  						code value to its users.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>displayName</em> is included both as a courtesy to an unaided human
                  						interpreter of a code value and as a documentation of the name used to
                  						display the concept to the user. The display name has no functional
                  						meaning; it can never exist without a code;  and it can never
                  						modify the meaning of <a class="termref" href="#prop-CD.code">code</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							HL7 offers a "print name" in it's predefined vocabulary domains. These
                  							values are suitable for use in the displayName.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Display names may not alter the meaning of the code value. Therefore,
                  							display names should not be presented to the user on a receiving
                  							application system without ascertaining that the display name
                  							adequately represents the concept referred to by the code
                  							value. Communication must not simply rely on the display name. The
                  							display name's main purpose is to support debugging of HL7 protocol
                  							data units (e.g., messages.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.displayName.nonNull.implies(x.code.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.originalText"></a>2.9.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Original Text : <a class="termref" href="#dt-ED">ED</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The text or phrase used as the basis for the coding.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The original text exists in a scenario where an originator of the
                  						information does not assign a code, but where the code is assigned
                  						later by a coder (post-coding.)  In the production of a concept
                  						descriptor, original text may thus exist without a code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although post-coding is often performed from free text information,
                  							such as documents, scanned images or dictation, multi-media data is
                  							explicitly not permitted as original text. Also, the original text
                  							property is not meant to be a link into the entire source
                  							document. The link between different artifacts of medical information
                  							(e.g., document and coded result) is outside the scope of this
                  							specification and is maintained elsewhere in the HL7 standards. The
                  							original text is an excerpt of the relevant information in the
                  							original sources, rather than a pointer or exact reproduction. Thus
                  							the original text is to be represented in plain text form.
                  
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em></em> may have a non-NULL original text
                  						property despite having a NULL <a class="termref" href="#prop-CD.code">code</a>. Any <em></em> value
                  						with <a class="termref" href="#prop-CD.code">code</a> of NULL signifies a coding exception. In this case,
                  						<em>originalText</em> is a name or description of the concept that was
                  						not coded. Such exceptional <em></em> values may also contain <a class="termref" href="#prop-CD.translation">translation</a>s.
                  						Such translations directly encode the concept described in <em>originalText</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em></em> can be demoted into an <a class="termref" href="#dt-ST">ST</a>
                  						value representing only the <em>originalText</em> of the <em></em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.originalText.nonNull {
   ((ST)x).equal(x.originalText);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.translation"></a>2.9.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Translation : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CD">CD</a>&gt;, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CV x) {
   x.translation.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CV.qualifier"></a>2.9.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Qualifier : <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-CR">CR</a>&gt;, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CV x) {
   x.qualifier.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="CO"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CO"></a>2.10 
               </h3>
            </td>
            <td class="body_col">
               <h3>Coded Ordinal (CO) specializes <a class="termref" href="#dt-CV">CV</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Coded data, where the coding system from which the code comes is ordered.
                  					<em>CO</em> adds semantics related to ordering so that models
                  					that make use of such domains may introduce model elements that involve
                  					statements about the order of the terms in a domain.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CO">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CO"></a><pre>
type CodedOrdinal alias CO specializes CV {
   BL  lessOrEqual(CO o);
   BL  lessThan(CO o);
   BL  greaterThan(CO o);
   BL  greaterOrEqual(CO o);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The relative order of <em>CO</em> values need not be independently
                  					obvious in their literal representation. It is expected that an
                  					application will look up the ordering of these values from some
                  					table.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CO.lessOrEqual"></a>2.10.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Less-or-equal : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The ordering relation is based on lessOrEqual which is taken as
                  						primitive in this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						All other order relations can be derived from this one.
                  						Since <em>lessOrEqual</em> is primitive, this accomodates partial orderings.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Order relationships typically hold only within a single coding 
                  						system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CO.lessThan"></a>2.10.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Less-than : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CO x, y)
      where x.nonNull.and(y.nonNull) {
   x.lessThan(y).equal(y.lessOrEqual(x).and(x.equal(y).not));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CO.greaterThan"></a>2.10.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Greater-than : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CO x, y)
      where x.nonNull.and(y.nonNull) {
   x.greaterThan(y).equal(y.lessThan(x));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CO.greaterOrEqual"></a>2.10.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Greater-or-equal : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CO x, y)
      where x.nonNull.and(y.nonNull) {
   x.greaterOrEqual(y).equal(y.lessOrEqual(x));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="CE"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CE"></a>2.11 
               </h3>
            </td>
            <td class="body_col">
               <h3>Coded With Equivalents (CE) specializes <a class="termref" href="#dt-CD">CD</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Coded data that consists of a coded value and, optionally, coded
                  					value(s) from other coding systems that identify the same
                  					concept. Used when alternative codes may exist.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-CE-prop-summary">&nbsp;</a>
                     			Table
                     			15: Property Summary of
                     Coded With Equivalents
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>code</td>
                        <td>ST</td>
                        <td>
                           						The plain code symbol defined by the code system. For example,
                           						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystem</td>
                        <td>UID</td>
                        <td>
                           						Specifies the code system that defines the code.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemName</td>
                        <td>ST</td>
                        <td>
                           						The common name of the coding system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemVersion</td>
                        <td>ST</td>
                        <td>
                           						If applicable, a version descriptor defined specifically for the given
                           						code system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>displayName</td>
                        <td>ST</td>
                        <td>
                           						A name or title for the code, under which the sending system shows the
                           						code value to its users.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>originalText</td>
                        <td>ED</td>
                        <td>
                           						The text or phrase used as the basis for the coding.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>translation</td>
                        <td>SET&lt;CD&gt;</td>
                        <td>
                           						A set of other concept descriptors that translate this concept
                           						descriptor into other code systems.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-CE">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-CE"></a><pre>
type CodedWithEquivalents alias CE specializes CD {
   ST       code;
   UID      codeSystem;
   ST       codeSystemName;
   ST       codeSystemVersion;
   ST       displayName;
   ED       originalText;
   SET&lt;CV&gt;  translation;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>CE</em> is used when the use case indicates that alternative
                  					codes may exist and where it is useful to communicate these.
                  					<em>CE</em> provides for a primary code value, plus a set of
                  					alternative or equivalent representations.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.code"></a>2.11.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The plain code symbol defined by the code system. For example,
                  						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value has a non-NULL <em>code</em> property
                  						whose value is a character string that is a symbol defined by the
                  						coding system identified by <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>. Conversely, a
                  						<em></em> value without a value for the code property, or with
                  						a value that is not from the cited coding system is an exceptional
                  						value (NULL of flavor <em>other</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.codeSystem"></a>2.11.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System : <a class="termref" href="#dt-UID">UID</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the code system that defines the code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Code systems shall be referred to by a <a class="termref" href="#dt-UID">UID</a>, which allows unambiguous 
                  						reference to standard HL7 codes, other standard code systems, as well as local
                  						codes. HL7 shall assign a <a class="termref" href="#dt-UID">UID</a> to each of its code
                  						tables as well as to external standard coding systems that are being
                  						used with HL7. Local sites must use their ISO Object Identifier
                  						(<a class="termref" href="#dt-OID">OID</a>) to construct a globally unique local coding
                  						system identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
                  						contain HL7 standard and external code system identifiers
                  						respectively. The HL7 Vocabulary Technical Committee maintains these
                  						two branches.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value (i.e. a <em></em>
                  						value that has a non-null code property) has a non-NULL <em>codeSystem</em>
                  						specifying the system of concepts that defines the code. In other
                  						words whenever there is a code there is also a code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although every non-NULL <em></em> value has a defined code
                  							system, in some circumstances, the ITS representation for the
                  							<em></em> value needs not explicitly mention the code
                  							system. For example, when the context mandates one and only one code
                  							system to be used specifying the code system explicitly would be
                  							redundant. However, in that case the <em>codeSystem</em> takes on that
                  							context-specific default value and is not NULL.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em></em> of NULL-flavor <em>other</em> indicates that
                  						a concept could not be coded in the coding system specified. Thus, for
                  						these coding exceptions, the code system that did not contain the
                  						appropriate concept must be provided in <em>codeSystem</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code domains are qualified such that they include the portion of
                  						any pertinent local coding system that does not simply paraphrase the
                  						standard coding system (<em>coded with extensibility</em>, CWE.)
                  						If a CWE qualified field actually contains such a local code, the
                  						coding system must specify the local coding system from which the
                  						local code was taken. However, for CWE domains the local code is a
                  						valid member of the domain, so that local codes in CWE domains
                  						constitute neither an error nor an exceptional (NULL/other) value in
                  						the sense of this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.other {
   x.code.other;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.codeSystemName"></a>2.11.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The common name of the coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The code system name has no computational value. The purpose of a code
                  						system name is to assist an unaided human interpreter of a code value to
                  						interpret <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						It is suggested &#8212; though
                  						not absolutely required &#8212; that ITS provide for <em>codeSystemName</em> in
                  						order to annotate the <a class="termref" href="#dt-UID">UID</a> for human comprehension.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 systems must not functionally rely on <em>codeSystemName</em>. <em>codeSystemName</em> can
                  						never modify the meaning of <a class="termref" href="#prop-CD.codeSystem">codeSystem</a> and
                  						cannot exist without <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemName.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.codeSystemVersion"></a>2.11.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Version : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If applicable, a version descriptor defined specifically for the given
                  						code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall specify how these version strings are formed for each
                  						external code system. If HL7 has not specified how version strings are
                  						formed for a particular coding system, version designations have no
                  						defined meaning for such coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Different versions of one code system must be compatible. Whenever a
                  						code system changes in an incompatible way, it will constitute a new
                  						code system, not simply a different version, regardless of how the
                  						vocabulary publisher calls it.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the publisher of ICD-9 and ICD-10 calls these code
                  						systems, "revision 9" and "revision 10" respectively. However, ICD-10
                  						is a complete redesign of the ICD code, not a backward compatible
                  						version. Therefore, for the purpose of this data type specification,
                  						ICD-9 and ICD-10 are different code systems, not just different
                  						versions. By contrast, when LOINC updates from revision "1.0j" to
                  						"1.0k", HL7 would consider this to be just another version of LOINC,
                  						since LOINC revisions are backwards compatible.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemVersion.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.displayName"></a>2.11.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Display Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A name or title for the code, under which the sending system shows the
                  						code value to its users.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>displayName</em> is included both as a courtesy to an unaided human
                  						interpreter of a code value and as a documentation of the name used to
                  						display the concept to the user. The display name has no functional
                  						meaning; it can never exist without a code;  and it can never
                  						modify the meaning of <a class="termref" href="#prop-CD.code">code</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							HL7 offers a "print name" in it's predefined vocabulary domains. These
                  							values are suitable for use in the displayName.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Display names may not alter the meaning of the code value. Therefore,
                  							display names should not be presented to the user on a receiving
                  							application system without ascertaining that the display name
                  							adequately represents the concept referred to by the code
                  							value. Communication must not simply rely on the display name. The
                  							display name's main purpose is to support debugging of HL7 protocol
                  							data units (e.g., messages.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.displayName.nonNull.implies(x.code.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.originalText"></a>2.11.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Original Text : <a class="termref" href="#dt-ED">ED</a>, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The text or phrase used as the basis for the coding.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The original text exists in a scenario where an originator of the
                  						information does not assign a code, but where the code is assigned
                  						later by a coder (post-coding.)  In the production of a concept
                  						descriptor, original text may thus exist without a code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although post-coding is often performed from free text information,
                  							such as documents, scanned images or dictation, multi-media data is
                  							explicitly not permitted as original text. Also, the original text
                  							property is not meant to be a link into the entire source
                  							document. The link between different artifacts of medical information
                  							(e.g., document and coded result) is outside the scope of this
                  							specification and is maintained elsewhere in the HL7 standards. The
                  							original text is an excerpt of the relevant information in the
                  							original sources, rather than a pointer or exact reproduction. Thus
                  							the original text is to be represented in plain text form.
                  
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em></em> may have a non-NULL original text
                  						property despite having a NULL <a class="termref" href="#prop-CD.code">code</a>. Any <em></em> value
                  						with <a class="termref" href="#prop-CD.code">code</a> of NULL signifies a coding exception. In this case,
                  						<em>originalText</em> is a name or description of the concept that was
                  						not coded. Such exceptional <em></em> values may also contain <a class="termref" href="#prop-CD.translation">translation</a>s.
                  						Such translations directly encode the concept described in <em>originalText</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em></em> can be demoted into an <a class="termref" href="#dt-ST">ST</a>
                  						value representing only the <em>originalText</em> of the <em></em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.originalText.nonNull {
   ((ST)x).equal(x.originalText);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.translation"></a>2.11.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Translation : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CD">CD</a>&gt;, inherited from <a class="termref" href="#dt-CD">CD</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A set of other concept descriptors that translate this concept
                  						descriptor into other code systems.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>translation</em> is a set of other <em></em>s that
                  						each translate the first <em></em> into different code
                  						systems. Each element of the translation set was translated from the
                  						first <em></em>. Each translation may, however, also contain
                  						translations. Thus, when a code is translated multiple times the
                  						information about which code served as the input to which translation
                  						will be preserved.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							The translations are quasi-synonyms of one real-world concept. Every
                  							translation in the set is supposed to express the same meaning "in
                  							other words."  However, exact synonymy rarely exists between two
                  							structurally different coding systems. For this reason, not all of the
                  							translations will be equally exact.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-CE.qualifier"></a>2.11.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Qualifier : <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-CR">CR</a>&gt;, (fixed)
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CE x) {
   x.qualifier.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="SC"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-SC"></a>2.12 
               </h3>
            </td>
            <td class="body_col">
               <h3>Character String with Code (SC) specializes <a class="termref" href="#dt-ST">ST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A character string that optionally may have a code attached. The text
                  					must always be present if a code is present.  The code is often a
                  					local code.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-SC-prop-summary">&nbsp;</a>
                     			Table
                     			16: Property Summary of
                     Character String with Code
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>code</td>
                        <td>CE</td>
                        <td>
                           						A code representing the string data. For example, the string data may
                           						be a user-message out of a message-catalog where the code represents
                           						the identifier of the message in the message catalog.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-SC">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-SC"></a><pre>
type CharacterStringWithCode alias SC specializes ST {
   CE code;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>SC</em> is used in cases where coding is exceptional (e.g.,
                  					user text messages are essentially text messages, and a printable
                  					message is the important content. Yet, sometimes messages come from a
                  					catalog of canned messages, which <em>SC</em> allows to reference.  
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Any non-null <em>SC</em> value MAY have a code, however, a code MUST NOT be
                  						given without the text.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SC x)
      where x.nonNull {
   x.code.nonNull.implies(x.notEmpty);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SC.code"></a>2.12.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-CE">CE</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A code representing the string data. For example, the string data may
                  						be a user-message out of a message-catalog where the code represents
                  						the identifier of the message in the message catalog.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/dtUML-Identifiers.gif" alt="Instance Identifier data types."><br>Instance Identifier data types.<br></td>
         </tr><a name="UID"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-UID"></a>2.13 
               </h3>
            </td>
            <td class="body_col">
               <h3>Unique Identifier String (UID) specializes <a class="termref" href="#dt-ST">ST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A unique identifier string is a character string which identifies an
                  					object in a globally unique and timeless manner. The allowable formats
                  					and values and procedures of this data type are strictly controlled by
                  					HL7. At this time, user-assigned identifiers may be certain character
                  					representations of ISO Object Identifiers (<a class="termref" href="#dt-OID">OID</a>) and DCE Universally
                  					Unique Identifiers (<a class="termref" href="#dt-UUID">UUID</a>). HL7 also reserves the right to assign other
                  					forms of <em>UID</em>s (<a class="termref" href="#dt-RUID">RUID</a>), such as mnemonic identifiers for code systems.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The sole purpose of <em>UID</em> is to be a globally and timelessly unique
                  					identifier. The form of <em>UID</em>, whether it is an <a class="termref" href="#dt-OID">OID</a>,
                  					a <a class="termref" href="#dt-UUID">UUID</a> or a <a class="termref" href="#dt-RUID">RUID</a>, is entirely irrelevant.
                  					As far as HL7 is concerned, the
                  					only thing one can do with a <em>UID</em> is denote to the object for which it
                  					stands. Comparison of <em>UID</em>s is literal, i.e. if two <em>UID</em>s are literally
                  					identical, they are assumed to denote to the same object. If two <em>UID</em>s
                  					are not literally identical they <em>may</em> not denote to the
                  					same object.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-UID">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-UID"></a><pre>
type UniqueIdentifierString alias UID specializes ST { };</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					No difference in semantics is recognized between the different
                  					allowed forms of the <em>UID</em>. The different forms are not distinguished
                  					by a component within or aside from the identifier string itself.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Even though this specification recognizes no semantic difference
                  					between the different forms of the unique identifier forms, there are
                  					differences of how these identifiers are built and managed, which is
                  					the sole reason to define subtypes to the <em>UID</em> for each of the
                  					variants.
                  				
               </p>
            </td>
         </tr><a name="OID"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-OID"></a>2.14 
               </h3>
            </td>
            <td class="body_col">
               <h3>ISO Object Identifier (OID) specializes <a class="termref" href="#dt-UID">UID</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A globally unique string representing an ISO Object Identifier
                  					(OID) in a form that consists only of numbers and dots (e.g.,
                  					"2.16.840.1.113883.3.1"). According to ISO, <em>OID</em>s are paths in a tree
                  					structure, with the left-most number representing the root and the
                  					right-most number representing a leaf.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Each branch under the root corresponds to an assigning authority. Each
                  					of these assigning authorities may, in turn, designate its own set of
                  					assigning authorities that work under its auspices, and so on down the
                  					line. Eventually, one of these authorities assigns a unique (to it as
                  					an assigning authority) number that corresponds to a leaf node on the
                  					tree. The leaf may represent an assigning authority (in which case the
                  					root <em>OID</em> identifies the authority), or an instance of an object. An
                  					assigning authority owns a namespace, consisting of its sub-tree.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>OID</em>s are the preferred scheme for unique identifiers. <em>OID</em>s should
                  					always be used except if one of the inclusion criteria for other
                  					schemes apply.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					ISO/IEC 8824:1990(E) clause 28 defines the Object Identifier as
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  <p><strong>28.9</strong> The semantics of an
                     						object identifier value are defined by reference to an <strong>
                        						object identifier tree</strong>. An object identifier tree is a tree whose root
                     						corresponds to [the ISO/IEC 8824 standard] and whose vertices [i.e. nodes]
                     						correspond to administrative authorities responsible for allocating arcs [i.e.
                     						branches] from that vertex. Each arc from that tree is labeled by an object
                     						identifier component, which is [an integer number]. Each information object to
                     						be identified is allocated precisely one vertex (normally a leaf) and no other
                     						information object (of the same or a different type) is allocated to
                     						that same vertex. Thus an information object is uniquely and
                     						unambiguously identified by the sequence of [integer numbers] (object
                     						identifier components) labeling the arcs in a path from the root to
                     						the vertex allocated to the information object.
                     					
                  </p>
                  <p><strong>28.10</strong> An object identifier value is
                     						semantically an ordered list of object identifier component
                     						values. Starting with the root of the object identifier tree, each
                     						object identifier component value identifies an arc in the object
                     						identifier tree. The last object identifier component value identifies
                     						an arc leading to a vertex to which an information object has been
                     						assigned. It is this information object, which is identified by the
                     						object identifier value. [...]
                     					
                  </p>
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-OID">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-OID"></a><pre>
type ObjectIdentifier alias OID specializes UID, LIST&lt;INT&gt; {
           INT  leaf;
           OID  butLeaf;
           OID  value(namespace OID);
   literal ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					According to ISO/IEC 8824 an object identifier is a sequence of object
                  					identifier component values, which are integer numbers. These
                  					component values are ordered such that the root of the object
                  					identifier tree is the head of the list followed by all the arcs down
                  					to the leaf representing the information object identified by the
                  					OID. The fact that <em>OID</em> specializes <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-INT">INT</a>&gt;
                  					represents this path of object identifier component
                  					values from the root to the leaf.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The <strong>leaf</strong> and "<strong>butLeaf</strong>"
                  					properties take the opposite view. The
                  					leaf is the last object identifier component value in the list, and
                  					the "butLeaf" property is all of the OID <em>but</em> the
                  					<em>leaf</em>. In a sense, the leaf is the identifier value and
                  					all of the OID but the leaf refers to the namespace in which the leaf
                  					is unique and meaningful.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					However, what part of the OID is considered <strong>value</strong>
                  					and what is <strong>namespace</strong> may be viewed differently. In
                  					general, any OID component sequence to the left can be considered the namespace
                  					in which the rest of the sequence to the right is defined as a
                  					meaningful and unique identifier value. The value-property with a
                  					namespace OID as its argument represents this point of view.<a name="fn-src31"></a><a href="#fn31"><sup style="font-size: smaller">31</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(OID x)
      where x.nonNull {
   x.notEmpty;
   x.tail.isEmpty.implies(x.leaf.equal(x.tail));
   x.tail.notEmpty.implies(x.leaf.equal(x.tail.leaf);
   x.tail.isEmpty.implies(x.butLeaf.isNull);
   x.tail.notEmpty.implies(x.butLeaf.head.equal(x.head)
         .and(x.butLeaf.tail.equal(x.butLeaf(x.tail))));
   forall(OID v; OID n) where v.equal(x.value(n)) {
      n.isEmpty.implies(v.equal(x));
      n.notEmpty.implies(v.equal(x.value(n.tail)));
      };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-OID.procedures"></a>2.14.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>HL7-Assigned OIDs</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall establish an OID registry and assign OIDs in its branch for
                  						HL7 users and vendors upon their request. HL7 shall also assign OIDs
                  						to public identifier-assigning authorities both U.S. nationally (e.g.,
                  						the U.S. State driver license bureaus, U.S. Social Security
                  						Administration, HIPAA Provider ID registry, etc.) and internationally
                  						(e.g., other countries Social Security Administrations, Citizen ID
                  						registries, etc.) The HL7 registered OIDs must be used for these
                  						organizations, regardless whether these organizations have other OIDs
                  						assigned from other sources.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						When assigning OIDs to third parties or entities, HL7 shall
                  						investigate whether an OID is already assigned for such entities
                  						through other sources. It this is the case, HL7 shall record such OID
                  						in a catalog, but HL7 shall not assign a duplicate OID in the HL7
                  						branch. If possible, HL7 shall notify a third party when an OID is
                  						being assigned for that party in the HL7 branch.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Though HL7 shall exercise diligence before assigning an OID in the HL7
                  						branch to third parties, given the lack of a global OID registry
                  						mechanism, one cannot make absolutely certain that there is no
                  						preexisting OID assignment for such third-party entity. Also, a
                  						duplicate assignment can happen in the future through another
                  						source. If such cases of supplicate assignment become known to HL7,
                  						HL7 shall make efforts to resolve this situation. For continued
                  						interoperability in the meantime, the HL7 assigned OID shall be the
                  						preferred OID used.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						While most owners of an OID will "design" their namespace sub-tree in
                  						some meaningful way, there is no way to generally infer any meaning on
                  						the parts of an OID. HL7 does not standardize or require any namespace
                  						sub-structure. An OID owner, or anyone having knowledge about the
                  						logical structure of part of an OID, may still use that knowledge to
                  						infer information about the associated object; however, the techniques
                  						cannot be generalized.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-datyp2fig5.jpg" target="_blank" border="0">
                  							Example for a tree of ISO object identifiers. HL7's OID
                  							is 2.16.840.1.113883.
                  						 (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>An HL7 interface must not rely on any
                     						knowledge about the substructure of an OID for which it cannot control the
                     						assignment policies.</strong></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-OID.literal"></a>2.14.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The structured definition of the OID is provided mostly to be faithful
                  						to the OID specification. Within HL7, OIDs are used as UID strings
                  						only, i.e., the literal string value is the only thing that is
                  						communicated and is the only thing that a reciever should have to
                  						consider when working with UIDs in the scope of the HL7 specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
OID.literal ST {
   OID : INT "." OID { $.head.equal($1);
                       $.tail.equal($3); }
       | INT         { $.head.equal($1);
                       $.tail.isEmpty; }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For compatibility with the DICOM standard, the literal form of the OID
                  						should not exceed 64 characters. (see DICOM part 5, section 9).
                  					
               </p>
            </td>
         </tr><a name="UUID"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-UUID"></a>2.15 
               </h3>
            </td>
            <td class="body_col">
               <h3>DCE Universal Unique Identifier (UUID) specializes <a class="termref" href="#dt-UID">UID</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A globally unique string representing a DCE Universal Unique
                  					Identifier (UUID) in the common UUID format that consists of 5
                  					hyphen-separated groups of hexadecimal digits having 8, 4, 4, 4,
                  					and 12 places respectively.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Both the UUID and its string representation are defined by the Open
                  					Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					UUIDs are assigned based on Ethernet MAC addresses, the point in time
                  					of creation and some random component. This mix is believed to
                  					generate sufficiently unique identifiers without any organizational
                  					policy for identifier assignment (in fact this piggy-backs on the
                  					organization of MAC address assignment.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					UUIDs are <strong>not</strong> the preferred identifier
                  					scheme for use as HL7 UIDs. UUIDs may be used when identifiers are
                  					issued to objects representing individuals (e.g., entity instance
                  					identifiers, act event identifiers, etc.) For objects describing
                  					classes of things or events (e.g., catalog items), OIDs are the
                  					preferred identifier scheme.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-UUID">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-UUID"></a><pre>
type UniversalUniqueIdentifier alias UUID specializes UID {
   INT  timeLow;
   INT  timeMid;
   INT  timeHighAndVersion;
   INT  clockSequence;
   INT  node;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-UUID.literal"></a>2.15.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The structured definition of the UUID is provided mostly to be
                  						faithful to the UUID specification. Within HL7, UUIDs are used as UID
                  						strings only, i.e., the literal string value is the only thing that is
                  						communicated and is the only thing that a reciever should have to
                  						consider when working with UIDs in the scope of the HL7 specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form for the UUID is defined according to the original
                  						specification of the UUID. However, because the HL7 UIDs are case
                  						sensitive, for use with HL7, the hexadecimal digits A-F in UUIDs
                  						must be converted to upper case.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-UUID.literal">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-UUID.literal"></a><pre>
UUID.literal ST {
   UUID        : hex8 "-" hex4 "-" hex4 "-" hex4 "-" hex12 {
                    $.timeLow.equal($1);
                    $.timeMid.equal($3);
                    $.timeHighAndVersion.equal($5);
                    $.clockSequence.equal($7);
                    $.node.equal($9);
                    }

   INT hex4    : hexDigit hexDigit hexDigit hexDigit {
                    $.equal($1.times(16).plus($2)
                     .times(16).plus($3)
                     .times(16).plus($4);
                    }

   INT hex8    : hexDigit hexDigit hexDigit hexDigit
                       hexDigit hexDigit hexDigit hexDigit {
                    $.equal($1.times(16).plus($2)
                     .times(16).plus($3)
                     .times(16).plus($4)
                     .times(16).plus($5)
                     .times(16).plus($6)
                     .times(16).plus($7)
                     .times(16).plus($8);
                     }

   INT hex12    : hexDigit hexDigit hexDigit hexDigit
                        hexDigit hexDigit hexDigit hexDigit
                        hexDigit hexDigit hexDigit hexDigit {
                     $.equal($1.times(16).plus($2)
                      .times(16).plus($3)
                      .times(16).plus($4)
                      .times(16).plus($5)
                      .times(16).plus($6)
                      .times(16).plus($7)
                      .times(16).plus($8)
                      .times(16).plus($9)
                      .times(16).plus($10)
                      .times(16).plus($11)
                      .times(16).plus($12);
                     }

   INT hexDigit : "0"     { $.equal(0); }
                | "1"     { $.equal(1); }
                | "2"     { $.equal(2); }
                | "3"     { $.equal(3); }
                | "4"     { $.equal(4); }
                | "5"     { $.equal(5); }
                | "6"     { $.equal(6); }
                | "7"     { $.equal(7); }
                | "8"     { $.equal(8); }
                | "9"     { $.equal(9); }
                | "A"     { $.equal(10); }
                | "B"     { $.equal(11); }
                | "C"     { $.equal(12); }
                | "D"     { $.equal(13); }
                | "E"     { $.equal(14); }
                | "F"     { $.equal(15); }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							The output of UUID related programs and functions may use all sorts of
                  							forms, upper case, lower case, and with or without the hyphens that
                  							group the digits. This variate output must be postprocessed to conform
                  							to the HL7 specification, i.e., the hyphens must be inserted for the
                  							8-4-4-4-12 grouping and all hexadecimal digits must be converted to
                  							upper case.
                  						
               </blockquote>
            </td>
         </tr><a name="RUID"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-RUID"></a>2.16 
               </h3>
            </td>
            <td class="body_col">
               <h3>HL7 Reserved Identifier Scheme (RUID) specializes <a class="termref" href="#dt-UID">UID</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A globally unique string defined exclusively by HL7. Identifiers in
                  					this scheme are only defined by balloted HL7 specifications. Local
                  					communities or systems must never use such reserved identifiers based
                  					on bilateral negotiations.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					HL7 reserved identifiers are strings that consist only of (US-ASCII)
                  					letters, digits and hyphens, where the first character must be a
                  					letter. HL7 may assign these reserved identifiers as mnemonic
                  					identifiers for major concepts of interest to HL7.
                  				
               </p>
            </td>
         </tr><a name="II"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-II"></a>2.17 
               </h3>
            </td>
            <td class="body_col">
               <h3>Instance Identifier (II) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An identifier that uniquely identifies a thing or object. Examples
                  					are object identifier for HL7 RIM objects, medical record number,
                  					order id, service catalog item id, Vehicle Identification Number
                  					(VIN), etc. Instance identifiers are defined based on ISO object
                  					identifiers.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-II-prop-summary">&nbsp;</a>
                     			Table
                     			17: Property Summary of
                     Instance Identifier
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>root</td>
                        <td>UID</td>
                        <td>
                           						A unique identifier that guarantees the global uniqueness of the
                           						instance identifier. The root alone may be the entire instance
                           						identifier.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>extension</td>
                        <td>ST</td>
                        <td>
                           						A character string as a unique identifier within the scope of the
                           						identifier root.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>assigningAuthorityName</td>
                        <td>ST</td>
                        <td>
                           						A human readable name or mnemonic for the assigning authority. The Assigning
                           						Authority Name has no computational value. The purpose of a Assigning Authority
                           						Name is to assist an unaided human interpreter of an II value to interpret
                           						the authority. Note: no automated processing must depend on the assigning
                           						authority name to be present in any form.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>displayable</td>
                        <td>BL</td>
                        <td>
                           						Specifies if the identifier is intended for human
                           						display and data entry (displayable = true) as opposed to pure machine
                           						interoperation (displayable = false).
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-II">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-II"></a><pre>
type InstanceIdentifier alias II specializes ANY {
   ST   extension;
   UID  root;
   ST   assigningAuthorityName;
   BL   equal(ANY x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-II.root"></a>2.17.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Root : <a class="termref" href="#dt-UID">UID</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A unique identifier that guarantees the global uniqueness of the
                  						instance identifier. The root alone may be the entire instance
                  						identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In the presence of a non-null extension, the root is commonly
                  						interpreted as the "assigning authority", that is, it is supposed that
                  						the root somehow refers to an organization that assigns identifiers
                  						sent in the extension. However, the root does not have to be an
                  						organizational UID, it can also be a UID specifically registered for
                  						an identifier scheme.<a name="fn-src32"></a><a href="#fn32"><sup style="font-size: smaller">32</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(II x)
      where x.nonNull {
   root.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-II.extension"></a>2.17.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Extension : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A character string as a unique identifier within the scope of the
                  						identifier root.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The extension is a character string that is unique in the namespace
                  						designated by the root. If a non-NULL extension is exists, the root
                  						specifies a namespace (sometimes called "assigning authority" or
                  						"identifier type".)  The extension property may be NULL in which case
                  						the root <a class="termref" href="#dt-OID">OID</a> is the complete unique identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The root and extension scheme effectively means that the concatenation
                  						of root and extension must be a globally unique identifier for the
                  						item that this II value identifies.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						It is recommended that systems use the <a class="termref" href="#dt-OID">OID</a> scheme for external
                  						identifiers of their communicated objects. The extension property is
                  						mainly provided to accommodate legacy alphanumeric identifier schemes.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some identifier schemes define certain style options to their code
                  						values. For example, the U.S. Social Security Number (SSN) is normally
                  						written with dashes that group the digits into a pattern
                  						"123-12-1234". However, the dashes are not meaningful and a SSN can
                  						just as well be represented as "123121234" without the dashes.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In the case where identifier schemes provide for multiple
                  						representations, HL7 shall make a ruling about which is the preferred
                  						form. HL7 shall document that ruling where that respective external
                  						identifier scheme is recognized. HL7 shall decide upon the preferred
                  						form based on criteria of practicality and common use. In absence of
                  						clear criteria of practicality and common use, the safest, most
                  						extensible, and least stylized (the least decorated) form shall be
                  						given preference.<a name="fn-src33"></a><a href="#fn33"><sup style="font-size: smaller">33</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 may also decide to map common external identifiers to the value
                  						portion of the II.root <a class="termref" href="#dt-OID">OID</a>. For example, the U.S. SSN could be
                  						represented as 2.16.840.1.113883.4.1.123121234. The criteria of
                  						practicality and common use will guide HL7's decision on each
                  						individual case.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-II.assigningAuthorityName"></a>2.17.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Assigning Authority Name : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A human readable name or mnemonic for the assigning authority. The Assigning
                  						Authority Name has no computational value. The purpose of a Assigning Authority
                  						Name is to assist an unaided human interpreter of an II value to interpret
                  						the authority. Note: no automated processing must depend on the assigning
                  						authority name to be present in any form.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-II.displayable"></a>2.17.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Displayable : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies if the identifier is intended for human
                  						display and data entry (displayable = true) as opposed to pure machine
                  						interoperation (displayable = false).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-II.equal"></a>2.17.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two instance identifiers are equal if and only if their root and extension
                  						properties are equal.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(II x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(x.root.equal(y.root)
             .and(x.extension.equal(y.extension)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/dtUML-Tel.gif" alt="URL And TEL data types"><br>URL And TEL data types<br></td>
         </tr><a name="URL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-URL"></a>2.18 
               </h3>
            </td>
            <td class="body_col">
               <h3>Universal Resource Locator (URL) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A telecommunications address specified according to Internet standard
                  					RFC 2396 [<a href="http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2396.txt</a>]. The
                  					URI specifies the protocol and the contact point defined by that
                  					protocol for the resource.  Notable uses of the telecommunication
                  					address data type are for telephone and telefax numbers, e-mail
                  					addresses, Hypertext references, FTP references, etc.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The Internet standard RFC 2396 [<a href="http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2396.txt</a>] defines a URI as
                  					follows:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  <p>
                     						Just as there are many different methods of access to resources, there
                     						are several schemes for describing the location of such resources.
                     						The generic syntax for URLs provides a framework for
                     						new schemes to be established using protocols other than those defined
                     						in this document.
                     					
                  </p>
                  <p>
                     						URLs are used to "locate" resources, by providing an abstract
                     						identification of the resource location. Having located a resource, a
                     						system may perform a variety of operations on the resource, as might
                     						be characterized by such words as "access", "update", "replace", "find
                     						attributes". In general, only the "access" method needs to be
                     						specified for any URL scheme.
                     					
                  </p>
                  <p>
                     						By agreement, it is permissable to use a URI in place of a URL. In these
                     						cases, it is still expected that the resources identified is accessible
                     						by some agreed method. A common use of URI's is to refer to SOAP attachments
                     					
                  </p>
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-URL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-URL"></a><pre>
protected type UniversalResourceLocator alias URL specializes ANY {
           CS  scheme;
           ST  address;
   literal ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-URL.scheme"></a>2.18.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Scheme : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Identifies the protocol used to interpret the address string and 
                  						to access the resource so addressed.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some URL schemes are registered by the <em>Internet Assigned Numbers
                     						Authority</em> (IANA) [http://www.iana.org], however IANA only
                  						registers URL schemes that are defined in Internet RFC documents. In
                  						fact there are a number of URL schemes defined outside RFC documents,
                  						part of which are registered with the World Wide Web Consortium
                  						(W3C).<a name="fn-src34"></a><a href="#fn34"><sup style="font-size: smaller">34</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Similar to the <a class="termref" href="#prop-ED.mediaType">ED.mediaType</a>, HL7 makes
                  						suggestions about <em>scheme</em> values classifying them as
                  						<em>required</em>, <em>recommended</em>, <em>other</em>,
                  						and <em>deprecated</em>. Any scheme not mentioned has status
                  						<em>other</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-URLScheme">&nbsp;</a>
                     			Table
                     			18: Domain URLScheme
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>fax</td>
                     <td>Fax</td>
                     <td>A telephone number served by a fax device [http://www.ietf.org/rfc/rfc3966.txt and http://www.ietf.org/rfc/rfc2806.txt].</td>
                  </tr>
                  <tr>
                     <td>file</td>
                     <td>File</td>
                     <td>Host-specific local file names [RCF 1738].  Note that the file scheme works only for local files.  There is little use for
                        exchanging local file names between systems, since the receiving system likely will not be able to access the file.
                     </td>
                  </tr>
                  <tr>
                     <td>ftp</td>
                     <td>FTP</td>
                     <td>The File Transfer Protocol (FTP) [http://www.ietf.org/rfc/rfc1738.txt].</td>
                  </tr>
                  <tr>
                     <td>http</td>
                     <td>HTTP</td>
                     <td>Hypertext Transfer Protocol [http://www.ietf.org/rfc/rfc2368.txt].</td>
                  </tr>
                  <tr>
                     <td>mailto</td>
                     <td>Mailto</td>
                     <td>Electronic mail address [http://www.ietf.org/rfc/rfc2368.txt].</td>
                  </tr>
                  <tr>
                     <td>mllp</td>
                     <td>MLLP</td>
                     <td>								The traditional HL7 Minimal Lower Layer Protocol.
                        								The URL has the form of a common IP URL e.g.,
                        								mllp://&lt;host&gt;:&lt;port&gt;/ with &lt;host&gt; being the IP address or DNS hostname
                        								and &lt;port&gt; being a port number on which the MLLP protocol is
                        								served.
                        
                     </td>
                  </tr>
                  <tr>
                     <td>modem</td>
                     <td>Modem</td>
                     <td>A telephone number served by a modem device  [http://www.ietf.org/rfc/rfc3966.txt and http://www.ietf.org/rfc/rfc2806.txt].</td>
                  </tr>
                  <tr>
                     <td>nfs</td>
                     <td>NFS</td>
                     <td>Network File System protocol [http://www.ietf.org/rfc/rfc2224.txt].  Some sites use NFS servers to share data files.</td>
                  </tr>
                  <tr>
                     <td>tel</td>
                     <td>Telephone</td>
                     <td>A voice telephone number [http://www.ietf.org/rfc/rfc3966.txt and http://www.ietf.org/rfc/rfc2806.txt].</td>
                  </tr>
                  <tr>
                     <td>telnet</td>
                     <td>Telnet</td>
                     <td>Reference to interactive sessions [http://www.ietf.org/rfc/rfc1738.txt].  Some sites, (e.g., laboratories) have TTY based
                        remote query sessions that can be accessed through telnet.
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Note that this specification explicitly limits itself to URLs.
                  						Universal Resource Names (URN) are not covered by this specification. URNs are a
                  						kind of identifier scheme for other than accessible resources. This specification,
                  						however, is only concerned with accessible resources, which belong into the
                  						<a class="termref" href="#dt-URL">URL</a> category.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-URL.address"></a>2.18.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Address : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The address is a character string whose format is entirely defined by
                  						the <a class="termref" href="#prop-URL.scheme">scheme</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-URL.literal"></a>2.18.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						While conceptually URL has the properties scheme and address,
                  						the common appearance of a URL is as a string literal formed according
                  						to the Internet standard. The general syntax of the URL literal is:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-URL.literal">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-URL.literal"></a><pre>
URL.literal ST {
   URL : /[a-z0-9+.-]+/ ":" ST   { $.scheme.equal($1);
                                   $.address.equal($3); }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col"><br><b class="heading">Telephone and FAX Numbers</b><p></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Note that there is no special data type for telephone numbers,
                  						telephone numbers are <a class="termref" href="#dt-TEL">TEL</a>s and are specified as <em>URL</em>s.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The telephone number <em>URL</em> is defined in Internet RFC 2806
                  						[<a href="http://www.ietf.org/rfc/rfc2806.txt">http://www.ietf.org/rfc/rfc2806.txt</a>]. Its definition is
                  						summarized in this subsection. This summary does not override or
                  						change any of the Internet specification's rulings.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The voice telephone <em>URL</em>s begin with "tel:" and fax URLs begin with
                  						"fax:"
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <a class="termref" href="#prop-URL.address">address</a> is the telephone number in
                  						accordance with ITU-T E.123 <em>Telephone Network and ISDN
                     						Operation, Numbering, Routing and Mobile Service: Notation for
                     						National and International Telephone Numbers (1993)</em>. While HL7
                  						does not add or withdraw from the URL specification, the preferred
                  						subset of the <a class="termref" href="#prop-URL.address">address</a> address syntax is
                  						given as follows:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
proctected type TelephoneURL specializes URL {
   literal ST {
      URL                 : /(tel)|(fax)/ ":" address   { $.scheme.equal($1);
                                                          $.address.equal($3); };
      ST address          : "+" phoneDigits
      ST phoneDigits      : digitOrSeparator phoneDigits
                          | digitOrSeparator
      ST digitOrSeparator : digit
                          | separator;
      ST digit            : /[0..9]/;
      ST separator        : /[().-]/;
      };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The global absolute telephone numbers starting with the "+" and
                  						country code are preferred. Separator characters serve as decoration
                  						but have no bearing on the meaning of the telephone number. For
                  						example: "tel:+13176307960" and "tel:+1(317)630-7960" are both the
                  						same telephone number; "fax:+49308101724" and "fax:+49(30)8101-724"
                  						are both the same fax number.
                  					
               </p>
            </td>
         </tr><a name="TEL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-TEL"></a>2.19 
               </h3>
            </td>
            <td class="body_col">
               <h3>Telecommunication Address (TEL) specializes <a class="termref" href="#dt-URL">URL</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A telephone number (voice or fax), e-mail address, or other locator
                  					for a resource mediated by telecommunication equipment. The address is
                  					specified as a Universal Resource Locator (URL) qualified by time
                  					specification and use codes that help in deciding which address to use
                  					for a given time and purpose.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-TEL-prop-summary">&nbsp;</a>
                     			Table
                     			19: Property Summary of
                     Telecommunication Address
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>useablePeriod</td>
                        <td>GTS</td>
                        <td>
                           						Specifies the periods of time during which the telecommunication
                           						address can be used.  For a telephone number, this can indicate the
                           						time of day in which the party can be reached on that telephone.  For
                           						a web address, it may specify a time range in which the web content is
                           						promised to be available under the given address.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>use</td>
                        <td>SET&lt;CS&gt;</td>
                        <td>
                           						One or more codes advising a system or user which telecommunication
                           						address in a set of like addresses to select for a given
                           						telecommunication need.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The semantics of a telecommunication address is that a communicating
                  					entity (the responder) listens and responds to that address, and
                  					therefore can be contacted by an other communicating entity (the
                  					initiator.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The responder of a telecommunication address may be an automatic
                  					service that can respond with information (e.g., FTP or HTTP
                  					services.)  In such case a telecommunication address is a reference to
                  					that information accessible through that address. A telecommunication
                  					address value can thus be resolved to some information (in the form of
                  					encapsulated data, <a class="termref" href="#dt-ED">ED</a>.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-TEL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-TEL"></a><pre>
type TelecommunicationAddress alias TEL specializes URL {
   GTS      useablePeriod;
   SET&lt;CS&gt;  use;
   BL       equal(ANY x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The telecommunication address is an extension of the Universal
                  					Resource Locator (<a class="termref" href="#dt-URL">URL</a>) specified according to Internet
                  					standard RFC 2396 [<a href="http://www.ietf.org/rfc/rfc2396.txt">http://www.ietf.org/rfc/rfc2396.txt</a>].
                  					The <a class="termref" href="#dt-URL">URL</a> specifies the protocol and the contact point
                  					defined by that protocol for the resource. Notable use cases for the
                  					telecommunication address data type are for telephone and fax numbers,
                  					e-mail addresses, Hypertext references, FTP references, etc.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TEL.useablePeriod"></a>2.19.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Useable Period : <a class="termref" href="#dt-GTS">GTS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the periods of time during which the telecommunication
                  						address can be used.  For a telephone number, this can indicate the
                  						time of day in which the party can be reached on that telephone.  For
                  						a web address, it may specify a time range in which the web content is
                  						promised to be available under the given address.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TEL.use"></a>2.19.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Use Code : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CS">CS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						One or more codes advising a system or user which telecommunication
                  						address in a set of like addresses to select for a given
                  						telecommunication need.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-TelecommunicationAddressUse">&nbsp;</a>
                     			Table
                     			20: Domain TelecommunicationAddressUse
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <th colspan="3"></th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;H</td>
                     <td>home address</td>
                     <td>A communication address at a home, attempted contacts for business purposes might intrude privacy and chances are one will
                        contact family or other household members instead of the person one wishes to call.  Typically used with urgent cases, or
                        if no other contacts are available.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;HP</td>
                     <td>primary home</td>
                     <td>The primary home, to reach a person after business hours.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;HV</td>
                     <td>vacation home</td>
                     <td>A vacation home, to reach a person while on vacation.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;WP</td>
                     <td>work place</td>
                     <td>An office address.  First choice for business related contacts during business hours.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;DIR</td>
                     <td>Direct</td>
                     <td>Indicates a work place address or telecommunication address that reaches the individual or organization directly without intermediaries.
                        For phones, often referred to as a 'private line'.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;PUB</td>
                     <td>Public</td>
                     <td>Indicates a work place address or telecommunication address that is a 'standard' address which may reach a reception service,
                        mail-room, or other intermediary prior to the target entity.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;BAD</td>
                     <td>bad address</td>
                     <td>A flag indicating that the address is bad, in fact, useless.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;TMP</td>
                     <td>temporary address</td>
                     <td>A temporary address, may be good for visit or mailing.  Note that an address history can provide more detailed information.</td>
                  </tr>
                  <tr>
                     <td>AS</td>
                     <td>answering service</td>
                     <td>An automated answering machine used for less urgent cases and if the main purpose of contact is to leave a message or access
                        an automated announcement.
                     </td>
                  </tr>
                  <tr>
                     <td>EC</td>
                     <td>emergency contact</td>
                     <td>A contact specifically designated to be used for emergencies.  This is the first choice in emergencies, independent of any
                        other use codes.
                     </td>
                  </tr>
                  <tr>
                     <td>MC</td>
                     <td>mobile contact</td>
                     <td>A telecommunication device that moves and stays with its owner.  May have characteristics of all other use codes, suitable
                        for urgent matters, not the first choice for routine business.
                     </td>
                  </tr>
                  <tr>
                     <td>PG</td>
                     <td>pager</td>
                     <td>A paging device suitable to solicit a callback or to leave a very short message.</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The telecommunication use code is not a complete classification for
                  							equipment types or locations. Its main purpose is to suggest or
                  							discourage the use of a particular telecommunication address. There
                  							are no easily defined rules that govern the selection of a
                  							telecommunication address.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TEL.equal"></a>2.19.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Two telecommunication address values are considered equal if both
                  							their <a class="termref" href="#dt-URL">URL</a>s are equal. Use code and valid time are
                  							excluded from the equality test.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TEL x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(((URL)x).equal((URL)y));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-Names.gif" target="_blank" border="0">
                  					Data types for Postal Address and Entity Names (Person,
                  					Organization, and Trivial Names) are all based on extensions of
                  					a character string.
                  				 (link to graphic opens in a  new window)</a></td>
         </tr><a name="ADXP"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ADXP"></a>2.20 
               </h3>
            </td>
            <td class="body_col">
               <h3>Address Part (ADXP) specializes <a class="termref" href="#dt-ST">ST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A character string that may have a type-tag signifying its role in the
                  					address. Typical parts that exist in about every address are street,
                  					house number, or post box, postal code, city, country but other roles
                  					may be defined regionally, nationally, or on an enterprise level
                  					(e.g. in military addresses). Addresses are usually broken up into
                  					lines, which are indicated by special line-breaking delimiter elements
                  					(e.g., DEL).
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-ADXP-prop-summary">&nbsp;</a>
                     			Table
                     			21: Property Summary of
                     Address Part
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>partType</td>
                        <td>CS</td>
                        <td>
                           						Specifies whether an address part names the street, city, country,
                           						postal code, post box, etc. If the type is NULL the address part is
                           						unclassified and would simply appear on an address label as is.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-ADXP">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-ADXP"></a><pre>
protected type AddressPart alias ADXP specializes ST {
   CS  type;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ADXP.partType"></a>2.20.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Address Part Type : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies whether an address part names the street, city, country,
                  						postal code, post box, etc. If the type is NULL the address part is
                  						unclassified and would simply appear on an address label as is.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-AddressPartType">&nbsp;</a>
                     			Table
                     			22: Domain AddressPartType
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>ADL</td>
                     <td>additional locator</td>
                     <td>This can be a unit designator, such as apartment number, suite number, or floor. There may be several unit designators in
                        an address (e.g., "3rd floor, Appt. 342"). This can also be a designator pointing away from the location, rather than specifying
                        a smaller location within some larger one (e.g., Dutch "t.o." means "opposite to" for house boats located across the street
                        facing houses).
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;UNID</td>
                     <td>unit identifier</td>
                     <td>The number or name of a specific unit contained within a building or complex, as assigned by that building or complex.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;UNIT</td>
                     <td>unit designator</td>
                     <td>Indicates the type of specific unit contained within a building or complex.  E.g. Appartment, Floor</td>
                  </tr>
                  <tr>
                     <td>DAL</td>
                     <td>delivery address line</td>
                     <td>A delivery address line is frequently used instead of breaking out delivery mode, delivery installation, etc.  An address
                        generally has only a delivery address line or a street address line, but not both.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DINST</td>
                     <td>delivery installation type</td>
                     <td>Indicates the type of delivery installation (the facility to which the mail will be delivered prior to final shipping via
                        the delivery mode.) Example: post office, letter carrier depot, community mail center, station, etc.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DINSTA</td>
                     <td>delivery installation area</td>
                     <td>The location of the delivery installation, usually a town or city, and is only required if the area is different from the
                        municipality. Area to which mail delivery service is provided from any postal facility or service such as an individual letter
                        carrier, rural route, or postal route.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DINSTQ</td>
                     <td>delivery installation qualifier</td>
                     <td>A number, letter or name identifying a delivery installation.  E.g., for Station A, the delivery installation qualifier would
                        be 'A'.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DMOD</td>
                     <td>delivery mode</td>
                     <td>Indicates the type of service offered, method of delivery.  For example: post office box, rural route, general delivery, etc.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DMODID</td>
                     <td>delivery mode identifier</td>
                     <td>Represents the routing information such as a letter carrier route number.  It is the identifying number of the designator
                        (the box number or rural route number).
                     </td>
                  </tr>
                  <tr>
                     <td>SAL</td>
                     <td>street address line</td>
                     <td></td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;BNR</td>
                     <td>building number</td>
                     <td>The number of a building, house or lot alongside the street.  Also known as "primary street number".  This does not number
                        the street but rather the building.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;BNN</td>
                     <td>building number numeric</td>
                     <td>The numeric portion of a building number</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;BNS</td>
                     <td>building number suffix</td>
                     <td>Any alphabetic character, fraction or other text that may appear after the numeric portion of a building number</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;STR</td>
                     <td>street name</td>
                     <td></td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;STB</td>
                     <td>street name base</td>
                     <td>The base name of a roadway or artery recognized by a municipality (excluding street type and direction)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;STTYP</td>
                     <td>street type</td>
                     <td>The designation given to the street.  (e.g. Street, Avenue, Crescent, etc.)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;DIR</td>
                     <td>direction</td>
                     <td>Direction (e.g., N, S, W, E)</td>
                  </tr>
                  <tr>
                     <td>CAR</td>
                     <td>care of</td>
                     <td>The name of the party who will take receipt at the specified address, and will take on responsibility for ensuring delivery
                        to the target recipient
                     </td>
                  </tr>
                  <tr>
                     <td>CEN</td>
                     <td>census tract</td>
                     <td>A geographic sub-unit delineated for demographic purposes.</td>
                  </tr>
                  <tr>
                     <td>CNT</td>
                     <td>country</td>
                     <td>Country</td>
                  </tr>
                  <tr>
                     <td>CPA</td>
                     <td>county or parish</td>
                     <td>A sub-unit of a state or province. (49 of the United States of America use the term "county;" Louisiana uses the term "parish".)</td>
                  </tr>
                  <tr>
                     <td>CTY</td>
                     <td>municipality</td>
                     <td>The name of the city, town, village, or other community or delivery center</td>
                  </tr>
                  <tr>
                     <td>DEL</td>
                     <td>delimiter</td>
                     <td>Delimiters are printed without framing white space.  If no value component is provided, the delimiter appears as a line break.</td>
                  </tr>
                  <tr>
                     <td>POB</td>
                     <td>post box</td>
                     <td>A numbered box located in a post station.</td>
                  </tr>
                  <tr>
                     <td>PRE</td>
                     <td>precinct</td>
                     <td>A subsection of a municipality</td>
                  </tr>
                  <tr>
                     <td>STA</td>
                     <td>state or province</td>
                     <td>A sub-unit of a country with limited sovereignty in a federally organized country.</td>
                  </tr>
                  <tr>
                     <td>ZIP</td>
                     <td>postal code</td>
                     <td>A postal code designating a region defined by the postal service.</td>
                  </tr>
               </table>
            </td>
         </tr><a name="AD"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-AD"></a>2.21 
               </h3>
            </td>
            <td class="body_col">
               <h3>Postal Address (AD) specializes <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-ADXP">ADXP</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Mailing and home or office addresses. A sequence of address parts,
                  					such as street or post office Box, city, postal code, country, etc.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>AD</em> is primarily used to communicate data that will allow
                  					printing mail labels, that will allow a person to physically visit
                  					that address. The postal address data type is not supposed to be a
                  					container for additional information that might be useful for finding
                  					geographic locations (e.g., GPS coordinates) or for performing
                  					epidemiological studies. Such additional information is captured by
                  					other, more appropriate HL7 elements.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-AD-prop-summary">&nbsp;</a>
                     			Table
                     			23: Property Summary of
                     Postal Address
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>use</td>
                        <td>SET&lt;CS&gt;</td>
                        <td>
                           						A set of codes advising a system or user which address in a set of
                           						like addresses to select for a given purpose.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>useablePeriod</td>
                        <td>GTS</td>
                        <td>
                           						A General Timing Specification (GTS) specifying the periods of time
                           						during which the address can be used.  This is used to specify
                           						different addresses for different times of the week or year.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>isNotOrdered</td>
                        <td>BL</td>
                        <td>
                           						A boolean value specifying whether the order of the address parts is known
                           						or not. While the address parts are always a Sequence, the order in which
                           						they are presented may or may not be known. Where this matters, the
                           						isNotOrdered property can be used to convey this information.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>formatted</td>
                        <td>ST</td>
                        <td>
                           						A character string value with the address formatted in lines and with
                           						proper spacing. This is only a semantic property to define the
                           						function of some of the address part types.
                           <p>
                              								Remember that semantic properties are bare of all control flow
                              								semantics. The formatted could be implemented
                              								as a "procedure" that would "return" the formatted address, but it
                              								would not usually be a variable to which one could assign a formatted
                              								address. However, HL7 does not define applications but only the
                              								semantics of exchanged data values. Hence, the semantic model
                              								abstracts from concepts like "procedure", "return", and "assignment"
                              								but speaks only of property and value.
                              							
                           </p>
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Addresses are conceptualized as text with added logical mark-up. The
                  					mark-up may break the address into lines and may describe in detail
                  					the role of each address part if it is known. Address parts occur in
                  					the address in the order in which they would be printed on a mailing
                  					label. The approach is similar to HTML or XML markup of text (but it
                  					is not technically limited to XML representations.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Addresses are essentially sequences of address parts, but add a "use"
                  					code and a valid time range for information about if and when the
                  					address can be used for a given purpose.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-AD">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-AD"></a><pre>
type PostalAddress alias AD specializes LIST&lt;ADXP&gt; {
   SET&lt;CS&gt;  use;
   GTS      useablePeriod;
   BL       isNotOrdered;
   BL       equal(ANY x);
   ST       formatted;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-AD.use"></a>2.21.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Use Code : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CS">CS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A set of codes advising a system or user which address in a set of
                  						like addresses to select for a given purpose.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-PostalAddressUse">&nbsp;</a>
                     			Table
                     			24: Domain PostalAddressUse
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <th colspan="3"></th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;H</td>
                     <td>home address</td>
                     <td>A communication address at a home, attempted contacts for business purposes might intrude privacy and chances are one will
                        contact family or other household members instead of the person one wishes to call.  Typically used with urgent cases, or
                        if no other contacts are available.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;HP</td>
                     <td>primary home</td>
                     <td>The primary home, to reach a person after business hours.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;HV</td>
                     <td>vacation home</td>
                     <td>A vacation home, to reach a person while on vacation.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;WP</td>
                     <td>work place</td>
                     <td>An office address.  First choice for business related contacts during business hours.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;DIR</td>
                     <td>Direct</td>
                     <td>Indicates a work place address or telecommunication address that reaches the individual or organization directly without intermediaries.
                        For phones, often referred to as a 'private line'.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;PUB</td>
                     <td>Public</td>
                     <td>Indicates a work place address or telecommunication address that is a 'standard' address which may reach a reception service,
                        mail-room, or other intermediary prior to the target entity.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;BAD</td>
                     <td>bad address</td>
                     <td>A flag indicating that the address is bad, in fact, useless.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;TMP</td>
                     <td>temporary address</td>
                     <td>A temporary address, may be good for visit or mailing.  Note that an address history can provide more detailed information.</td>
                  </tr>
                  <tr>
                     <th colspan="3">Identifies the different representations of a name.  The representation may affect how the name is used.  (E.g. use of Ideographic
                        for formal communications.)
                     </th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;ABC</td>
                     <td>Alphabetic</td>
                     <td>Alphabetic transcription of name (Japanese: romaji)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;IDE</td>
                     <td>Ideographic</td>
                     <td>Ideographic representation of name (e.g., Japanese kanji, Chinese characters)</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;SYL</td>
                     <td>Syllabic</td>
                     <td>Syllabic transcription of name (e.g., Japanese kana, Korean hangul)</td>
                  </tr>
                  <tr>
                     <td>PHYS</td>
                     <td>physical visit address</td>
                     <td>Used primarily to visit an address.</td>
                  </tr>
                  <tr>
                     <td>PST</td>
                     <td>postal address</td>
                     <td>Used to send mail.</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An address without specific use code might be a default address useful
                  						for any purpose, but an address with a specific use code would be
                  						preferred for that respective purpose.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-AD.useablePeriod"></a>2.21.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Useable Period : <a class="termref" href="#dt-GTS">GTS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A General Timing Specification (GTS) specifying the periods of time
                  						during which the address can be used.  This is used to specify
                  						different addresses for different times of the week or year.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-AD.isNotOrdered"></a>2.21.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Is Not Ordered : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A boolean value specifying whether the order of the address parts is known
                  						or not. While the address parts are always a Sequence, the order in which
                  						they are presented may or may not be known. Where this matters, the
                  						isNotOrdered property can be used to convey this information.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-AD.equal"></a>2.21.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two address values are considered equal if both contain the same
                  						address parts, independent of ordering. Use code and valid time are
                  						excluded from the equality test.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(AD x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal((
      forall(ADXP p) where x.contains(p) {
	     y.contains(p);
	     }).and.(
            forall(ADXP p) where x.contains(p) {
	           y.contains(p);
	           }));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-AD.formatted"></a>2.21.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Formatting Address : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A character string value with the address formatted in lines and with
                  						proper spacing. This is only a semantic property to define the
                  						function of some of the address part types.<a name="fn-src36"></a><a href="#fn36"><sup style="font-size: smaller">36</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <em>AD</em> data type's main purpose is to capture postal addresses,
                  						such that one can visit that address or send mail to it. Humans will
                  						look at addresses in printed form, such as on a mailing label. The
                  						<em>AD</em> data type defines precise rules of how its data is
                  						formatted.<a name="fn-src37"></a><a href="#fn37"><sup style="font-size: smaller">37</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Addresses are ordered lists of address parts. Each address part is
                  						printed in the order of the list from left to right and top to bottom
                  						(or in any other language-specific reading direction, which to
                  						determine is outside the scope of this specification.)  Every address
                  						part value is printed. Most address parts are framed by white
                  						space. The following six rules govern the setting of whitespace.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     							Whitespace never accumulates, i.e. two subsequent spaces are the same
                     							as one. Subsequent line breaks can be reduced to one. Whitespace
                     							around a line break is not significant.
                     						
                  </li>
                  <li>
                     							Literals may contain explicit whitespace, subject to the same white
                     							space reduction rules. There is no notion of a literal line break
                     							within the text of a single address part.
                     						
                  </li>
                  <li>
                     							Leading and trailing explicit whitespace is insignificant in all
                     							address parts, except for delimiter (DEL) address parts.
                     						
                  </li>
                  <li>
                     							By default, an address part is surrounded by implicit whitespace.
                     						
                  </li>
                  <li>
                     							Delimiter (DEL) address parts are not surrounded by any implicit white
                     							space.
                     						
                  </li>
                  <li>
                     							Leading and trailing explicit whitespace is significant in delimiter
                     							(DEL) address parts.
                     						
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						This means that all address parts are generally surrounded by white
                  						space, but whitespace does never accumulate. Delimiters are never
                  						surrounded by implicit whitespace and every whitespace contributed
                  						by preceding or succeeding address parts is discarded, whether it was
                  						implicit or explicit.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The following shows examples of addresses in the XML ITS form.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  <p>
                     							1050 W Wishard Blvd,<br>
                     							RG 5th floor,<br>
                     							Indianapolis, IN 46240.
                     						
                  </p>
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Can be encoded in any of the following forms:<a name="fn-src38"></a><a href="#fn38"><sup style="font-size: smaller">38</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The first form would result from a system that only stores addresses
                  						as free text or in a list of fields line1, line2, etc.:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 3</caption>
                  <tr>
                     <td class="example"><pre>
&lt;addr use="WP"&gt;
   1050 W Wishard Blvd,
   RG 5th floor,
   Indianapolis, IN 46240
&lt;/addr&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The second form is more specific about the role of the address parts
                  						than the first one:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 4</caption>
                  <tr>
                     <td class="example"><pre>
&lt;addr use="WP"&gt;
   &lt;streetAddressLine&gt;1050 W Wishard Blvd&lt;/streetAddressLine&gt;,
   &lt;streetAddressLine&gt;RG 5th floor&lt;/streetAddressLine&gt;,
   &lt;city&gt;Indianapolis&lt;/city&gt;,
   &lt;state&gt;IN&lt;/state&gt;
   &lt;postalCode&gt;46240&lt;/postalCode&gt;
&lt;/addr&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						This form is the typical form seen in the U.S., where street address
                  						is sometimes separated, and city, state and ZIP code are always
                  						separated.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The third is even more specific:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 5</caption>
                  <tr>
                     <td class="example"><pre>
&lt;addr use="WP"&gt;
   &lt;houseNumber&gt;1050&lt;/houseNumber&gt;
   &lt;direction&gt;W&lt;/direction&gt;
   &lt;streetName&gt;Wishard Blvd&lt;/streetName&gt;,
   &lt;additionalLocator&gt;RG 5th floor&lt;/additionalLocator&gt;,
   &lt;city&gt;Indianapolis&lt;/city&gt;,
   &lt;state&gt;IN&lt;/state&gt;
   &lt;postalCode&gt;46240&lt;/postalCode&gt;
&lt;/addr&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The latter form above is not used in the USA. However, it is useful
                  						in Germany, where many systems keep house number as a distinct
                  						field. For example, the German address:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  						Windsteiner Weg 54a,<br>
                  						D-14165 Berlin
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						would most likely be encoded as follows<a name="fn-src39"></a><a href="#fn39"><sup style="font-size: smaller">39</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 6</caption>
                  <tr>
                     <td class="example"><pre>
&lt;addr use="HP"&gt;
   &lt;streetName&gt;Windsteiner Weg&lt;/streetName&gt;
   &lt;houseNumber&gt;54a&lt;/houseNumber&gt;,
   &lt;country&gt;D&lt;/country&gt;-
   &lt;postalCode&gt;14165&lt;/postalCode&gt;
   &lt;city&gt;Berlin&lt;/city&gt;
&lt;/addr&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="ENXP"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ENXP"></a>2.22 
               </h3>
            </td>
            <td class="body_col">
               <h3>Entity Name Part (ENXP) specializes <a class="termref" href="#dt-ST">ST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A character string token representing a part of a name. May have a
                  					type code signifying the role of the part in the whole entity name,
                  					and a qualifier code for more detail about the name part type.
                  					Typical name parts for person names are given names, and family names,
                  					titles, etc.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-ENXP-prop-summary">&nbsp;</a>
                     			Table
                     			25: Property Summary of
                     Entity Name Part
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>partType</td>
                        <td>CS</td>
                        <td>
                           						Indicates whether the name part is a given name, family name, prefix,
                           						suffix, etc.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>qualifier</td>
                        <td>SET&lt;CS&gt;</td>
                        <td>
                           						The qualifier is a set of codes each of which specifies a certain
                           						subcategory of the name part in addition to the main name part type.
                           						For example, a given name may be flagged as a nickname, a family name
                           						may be a pseudonym or a name of public records.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-ENXP">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-ENXP"></a><pre>
protected type EntityNamePart alias ENXP specializes ST {
   CS       type;
   SET&lt;CS&gt;  qualifier;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ENXP.partType"></a>2.22.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Name Part Type : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Indicates whether the name part is a given name, family name, prefix,
                  						suffix, etc.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-EntityNamePartType">&nbsp;</a>
                     			Table
                     			26: Domain EntityNamePartType
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>FAM</td>
                     <td>family</td>
                     <td>Family name, this is the name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the
                        first name of his father.
                     </td>
                  </tr>
                  <tr>
                     <td>GIV</td>
                     <td>given</td>
                     <td>Given name (don't call it "first name" since this given names do not always come first)</td>
                  </tr>
                  <tr>
                     <td>PFX</td>
                     <td>prefix</td>
                     <td>A prefix has a strong association to the immediately following name part. A prefix has no implicit trailing white space (it
                        has implicit leading white space though). Note that prefixes can be inverted.
                     </td>
                  </tr>
                  <tr>
                     <td>SFX</td>
                     <td>suffix</td>
                     <td>A suffix has a strong association to the immediately preceding name part. A prefix has no implicit leading white space (it
                        has implicit trailing white space though). Suffices can not be inverted.
                     </td>
                  </tr>
                  <tr>
                     <td>DEL</td>
                     <td>delimiter</td>
                     <td>A delimiter has no meaning other than being literally printed in this name representation.  A delimiter has no implicit leading
                        and trailing white space.
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Not every name part must have a type code, if the type code is
                  						unknown, not applicable, or simply undefined this is expressed by a
                  						NULL value (type.isNull). For example, a name may be "Rogan Sulma" and
                  						it may not be clear which one is a given name or which is a last name,
                  						or whether Rogan may be a title.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Entity names are conceptualized as text with added mark-up. The
                  						mark-up may describe in detail the role of each name part if it is
                  						known. Name parts occur in the order in which they would be printed on
                  						a mailing label. The model is similar to HTML or XML markup of text.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-ENXP.qualifier"></a>2.22.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Qualifier : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CS">CS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The qualifier is a set of codes each of which specifies a certain
                  						subcategory of the name part in addition to the main name part type.
                  						For example, a given name may be flagged as a nickname, a family name
                  						may be a pseudonym or a name of public records.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-EntityNamePartQualifier">&nbsp;</a>
                     			Table
                     			27: Domain EntityNamePartQualifier
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <th colspan="3"></th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;LS</td>
                     <td>Legal status</td>
                     <td>For organizations a suffix indicating the legal status, e.g., "Inc.", "Co.", "AG", "GmbH", "B.V." "S.A.",  "Ltd." etc.</td>
                  </tr>
                  <tr>
                     <th colspan="3"></th>
                  </tr>
                  <tr>
                     <th colspan="3">&nbsp;&nbsp;</th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;AC</td>
                     <td>academic</td>
                     <td>Indicates that a prefix like "Dr." or a suffix like "M.D." or "Ph.D." is an academic title.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;NB</td>
                     <td>nobility</td>
                     <td>In Europe and Asia, there are still people with nobility titles (aristocrats).  German "von" is generally a nobility title,
                        not a mere voorvoegsel.  Others are "Earl of" or "His Majesty King of..." etc.  Rarely used nowadays, but some systems do
                        keep track of this.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;PR</td>
                     <td>professional</td>
                     <td>Primarily in the British Imperial culture people tend to have an abbreviation of their professional organization as part of
                        their credential suffices.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;VV</td>
                     <td>voorvoegsel</td>
                     <td>A Dutch "voorvoegsel" is something like "van" or "de" that might have indicated nobility in the past but no longer so. Similar
                        prefixes exist in other languages such as Spanish, French or Portugese.
                     </td>
                  </tr>
                  <tr>
                     <th colspan="3">&nbsp;&nbsp;</th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;AD</td>
                     <td>adopted</td>
                     <td>The name the person was given at the time of adoption.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;BR</td>
                     <td>birth</td>
                     <td>A name that a person had shortly after being born. Usually for family names but may be used to mark given names at birth that
                        may have changed later.
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;SP</td>
                     <td>spouse</td>
                     <td>The name assumed from the partner in a marital relationship (hence the "M"). Usually the spouse's family name. Note that no
                        inference about gender can be made from the existence of spouse names.
                     </td>
                  </tr>
                  <tr>
                     <th colspan="3">&nbsp;&nbsp;</th>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;&nbsp;&nbsp;CL</td>
                     <td>callme</td>
                     <td>A callme name is (usually a given name) that is preferred when a person is directly addressed.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;IN</td>
                     <td>initial</td>
                     <td>Indicates that a name part is just an initial. Initials do not imply a trailing period since this would not work with non-Latin
                        scripts.  Initials may consist of more than one letter, e.g., "Ph." could stand for "Philippe" or "Th." for "Thomas".
                     </td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;TITLE</td>
                     <td>title</td>
                     <td>Indicates that a prefix or a suffix is a title that applies to the whole name, not just the adjacent name part.</td>
                  </tr>
               </table>
            </td>
         </tr><a name="EN"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-EN"></a>2.23 
               </h3>
            </td>
            <td class="body_col">
               <h3>Entity Name (EN) specializes <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-ENXP">ENXP</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A name for a person, organization, place or thing. A sequence of name
                  					parts, such as given name or family name, prefix, suffix, etc.
                  					Examples for entity name values are "Jim Bob Walton, Jr.", "Health
                  					Level Seven, Inc.", "Lake Tahoe", etc. An entity name may be as simple
                  					as a character string or may consist of several entity name parts,
                  					such as, "Jim", "Bob", "Walton", and "Jr.", "Health Level Seven" and
                  					"Inc.", "Lake" and "Tahoe".
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-EN-prop-summary">&nbsp;</a>
                     			Table
                     			28: Property Summary of
                     Entity Name
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>use</td>
                        <td>SET&lt;CS&gt;</td>
                        <td>
                           						A set of codes advising a system or user which name in a set of
                           						names to select for a given purpose.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>validTime</td>
                        <td>IVL&lt;TS&gt;</td>
                        <td>
                           						An interval of time specifying the time during which the name is or
                           						was used for the entity. This accomodates the fact that people change
                           						names for people, places and things.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>formatted</td>
                        <td>ST</td>
                        <td>
                           						A character string value with the entity name formatted with
                           						proper spacing. This is only a semantic property to define the
                           						function of some of the name part types.
                           <p>
                              								Remember that semantic properties are bare of all control flow
                              								semantics. The formatted could be implemented
                              								as a "procedure" that would "return" the formatted name, but it would
                              								not usually be a variable to which one could assign a formatted
                              								name. However, HL7 does not define applications but only the semantics
                              								of exchanged data values. Hence, the semantic model abstracts from
                              								concepts like "procedure", "return", and "assignment" but speaks only
                              								of property and value.
                              							
                           </p>
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Entity names are conceptualized as text with added logical mark-up.
                  					Name parts occur in a natural order in which they would be displayed,
                  					as opposed to in a order detemined by name part. The ordeing of the
                  					name parts is significant a feature that replaces the need for a
                  					separate "display name" property. Applications may change that
                  					ordering of name parts to account for their user's customary ordering
                  					of name parts. The approach is similar to HTML or XML markup of text
                  					(but it is not technically limited to XML representations.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Entity names are essentially sequences of entity name parts, but add a
                  					"use" code and a valid time range for information about when the name
                  					was used and how to choose between multiple aliases that may be valid
                  					at the same point in time.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-EN">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-EN"></a><pre>
type EntityName alias EN specializes LIST&lt;ENXP&gt; {
   SET&lt;CS&gt;  use;
   IVL&lt;TS&gt;  validTime;
   BL       equal(ANY x);
   ST       formatted;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EN.use"></a>2.23.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Use Code : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CS">CS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A set of codes advising a system or user which name in a set of
                  						names to select for a given purpose.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-EntityNameUse">&nbsp;</a>
                     			Table
                     			29: Domain EntityNameUse
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>C</td>
                     <td>License</td>
                     <td>As recorded on a license, record, certificate, etc. (only if different from legal name)</td>
                  </tr>
                  <tr>
                     <td>I</td>
                     <td>Indigenous/Tribal</td>
                     <td>e.g. Chief Red Cloud</td>
                  </tr>
                  <tr>
                     <td>L</td>
                     <td>Legal</td>
                     <td>Known as/conventional/the one you use</td>
                  </tr>
                  <tr>
                     <td>P</td>
                     <td>pseudonym</td>
                     <td>A self asserted name that the person is using or has used.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;A</td>
                     <td>Artist/Stage</td>
                     <td>Includes writer's pseudonym, stage name, etc</td>
                  </tr>
                  <tr>
                     <td>R</td>
                     <td>Religious</td>
                     <td>e.g. Sister Mary Francis, Brother John</td>
                  </tr>
                  <tr>
                     <td>SRCH</td>
                     <td>search</td>
                     <td>A name intended for use in searching or matching.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;PHON</td>
                     <td>phonetic</td>
                     <td>A name spelled phonetically.</td>
                  </tr>
                  <tr>
                     <td>&nbsp;&nbsp;SNDX</td>
                     <td>Soundex</td>
                     <td>A name spelled according to the SoundEx algorithm.</td>
                  </tr>
                  <tr>
                     <td>ABC</td>
                     <td>Alphabetic</td>
                     <td>Alphabetic transcription of name (Japanese: romaji)</td>
                  </tr>
                  <tr>
                     <td>SYL</td>
                     <td>Syllabic</td>
                     <td>Syllabic transcription of name (e.g., Japanese kana, Korean hangul)</td>
                  </tr>
                  <tr>
                     <td>IDE</td>
                     <td>Ideographic</td>
                     <td>Ideographic representation of name (e.g., Japanese kanji, Chinese characters)</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A name without specific use code might be a default name useful for
                  						any purpose, but a name with a specific use code would be preferred
                  						for that respective purpose.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EN.validTime"></a>2.23.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Valid Time : <a class="termref" href="#dt-IVL">IVL</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						An interval of time specifying the time during which the name is or
                  						was used for the entity. This accomodates the fact that people change
                  						names for people, places and things.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>EN</em> conforms to the history item data type extension (<a class="termref" href="#dt-HXIT">HXIT</a>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EN.equal"></a>2.23.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two name values are considered equal if both conatain the same name
                  						parts, independent of ordering. Use code and valid time are excluded
                  						from the equality test.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(EN x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal((
      forall(ENXP p) where x.contains(p) {
	     y.contains(p);
	     }).and.(
            forall(ENXP p) where x.contains(p) {
	           y.contains(p);
	           }));</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EN.formatted"></a>2.23.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Formatting Entity Names : <a class="termref" href="#dt-ST">ST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A character string value with the entity name formatted with
                  						proper spacing. This is only a semantic property to define the
                  						function of some of the name part types.<a name="fn-src41"></a><a href="#fn41"><sup style="font-size: smaller">41</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <em>EN</em> data type's main purpose is to capture names of people,
                  						places, and things (entities), so that one can address and refer to
                  						these entities in speech and writing. Humans will look at names in
                  						printed form, such as on a mailing label. The <em>EN</em> data type
                  						therefore defines precise rules of how its data is
                  						formatted.<a name="fn-src42"></a><a href="#fn42"><sup style="font-size: smaller">42</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Entity names are ordered lists of entity name parts. Each entity name
                  						part is printed in the order of the list from left to right (or in any
                  						other language-specific reading direction.)  Every entity name part
                  						(except for those marked "invisible") is printed. Most entity name
                  						parts are framed by whitespace. The following six rules govern the
                  						setting of whitespace.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     							Whitespace never accumulates, i.e. two subsequent spaces are the same
                     							as one.
                     						
                  </li>
                  <li>
                     							Literals may contain explicit whitespace subject to the same white
                     							space reduction rules.
                     						
                  </li>
                  <li>
                     							Except for <em>prefix</em>, <em>suffix</em> and
                     							<em>delimiter</em> name parts, every name part is surrounded by
                     							implicit whitespace. Leading and trailing explicit whitespace is
                     							insignificant in all those name parts.
                     						
                  </li>
                  <li>
                     							Delimiter name parts are not surrounded by any implicit white
                     							space. Leading and trailing explicit whitespace is significant in
                     							delimiter name parts.
                     						
                  </li>
                  <li>
                     							Prefix name parts only have implicit leading whitespace but no
                     							implicit trailing whitespace. Trailing explicit whitespace is
                     							significant in prefix name parts.
                     						
                  </li>
                  <li>
                     							Suffix name parts only have implicit trailing whitespace but no
                     							implicit leading whitespace. Leading explicit whitespace is
                     							significant in suffix name parts.
                     						
                  </li>
                  <li>
                     							This means that all entity name parts are generally surrounded by
                     							whitespace, but whitespace does never accumulate. Delimiters are never
                     							surrounded by implicit whitespace, prefixes are not followed by
                     							implicit whitespace and suffixes are not preceded by implicit white
                     							space. Every whitespace contributed by preceding or succeeding name
                     							parts around those special name parts is discarded, whether it was
                     							implicit or explicit.
                     						
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Examples"></a>2.23.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Examples</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A very simple encoding of  "Adam A. Everyman" would be:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 7</caption>
                  <tr>
                     <td class="example"><pre>
&lt;name&gt;
   &lt;given&gt;Adam&lt;/given&gt;
   &lt;given&gt;A.&lt;/given&gt;
   &lt;family&gt;Everyman&lt;/family&gt;
&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						None of the special qualifiers need to be mentioned if they are
                  						unknown or irrelevant. The next example shows extensive use of
                  						multiple given names, prefixes, suffixes, for academic degrees,
                  						nobility titles, <em>vorvoegsels</em> ("van"), and professional
                  						designations.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 8</caption>
                  <tr>
                     <td class="example"><pre>
&lt;name&gt;
   &lt;prefix qualifier="AC"&gt;Dr. phil. &lt;/prefix&gt;
   &lt;given&gt;Regina&lt;/given&gt;
   &lt;given&gt;Johanna&lt;/given&gt;
   &lt;given&gt;Maria&lt;/given&gt;
   &lt;prefix qualifier="NB"&gt;Gr&amp;auml;fin &lt;/prefix&gt;
   &lt;family qualifier="BR"&gt;Hochheim&lt;/family&gt;-&lt;family qualifier="SP"&gt;Weilenfels&lt;/family&gt;
   &lt;suffix qualifier="PR"&gt;NCFSA&lt;/suffix&gt;
&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The next example is an organization name, "Health Level Seven, Inc."
                  						in simple string form:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 9</caption>
                  <tr>
                     <td class="example"><pre>&lt;name&gt;Health Level Seven, Inc.&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						and as a fully parsed name
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 10</caption>
                  <tr>
                     <td class="example"><pre>&lt;name&gt;Health Level Seven, &lt;suffix qualifier="LS"&gt;Inc.&lt;/suffix&gt;&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The following example shows a Japanese name in the three forms:
                  						ideographic (Kanji), syllabic (Hiragana), and alphabetic (Romaji).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 11</caption>
                  <tr>
                     <td class="example"><pre>
&lt;name use="IDE"&gt;
   &lt;family&gt;&#26408;&#26449;&lt;/family&gt;
   &lt;given&gt;&#36890;&#30007;&lt;/given&gt;
&lt;/name&gt;
&lt;name use="SYL"&gt;
   &lt;family&gt;&#12365;&#12416;&#12425;&lt;/family&gt;
   &lt;given&gt;&#12415;&#12385;&#12362;&lt;/given&gt;
&lt;/name&gt;
&lt;name use="ABC"&gt;
   &lt;family&gt;KIMURA&lt;/family&gt;
   &lt;given&gt;MICHIO&lt;/given&gt;
&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="TN"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-TN"></a>2.24 
               </h3>
            </td>
            <td class="body_col">
               <h3>Trivial Name (TN) specializes <a class="termref" href="#dt-EN">EN</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A restriction of entity name that is effectively a simple string used
                  					for a simple name for things and places.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>TN</em> is an <a class="termref" href="#dt-EN">EN</a> that consists of only one name
                  					part without any name part type or qualifier. The <em>TN</em>, and its
                  					single name part are therefore equivalent to a simple character
                  					string. This equivalence is expressed by a defined demotion to
                  					<a class="termref" href="#dt-ST">ST</a> and promotion from <a class="termref" href="#dt-ST">ST</a>.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-TN">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-TN"></a><pre>
type TrivialName alias TN specializes EN {
   demotion   ST;
   promotion  TN (ST x);
};

invariant(TN x) where x.nonNull {
   x.head.nonNull;
   x.tail.isEmpty;
   x.formatted.equal(x.head);
};

invariant(ST x) {
   ((TN)x).head.equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Trivial names are typically used for places and things, such as
                  					<em>Lake Erie</em> or <em>Washington-Reagan National Airport</em>:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 12</caption>
                  <tr>
                     <td class="example"><pre>
&lt;name&gt;Lake Erie&lt;/name&gt;
&lt;name&gt;Washington-Reagan National Airport&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="PN"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-PN"></a>2.25 
               </h3>
            </td>
            <td class="body_col">
               <h3>Person Name (PN) specializes <a class="termref" href="#dt-EN">EN</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An <a class="termref" href="#dt-EN">EN</a> used when the named Entity
                  					is a Person. A sequence of name parts, such as given name or
                  					family name, prefix, suffix, etc. A name part is a restriction of
                  					entity name part that only allows those entity name parts qualifiers
                  					applicable to person names. Since the structure of entity name is
                  					mostly determined by the requirements of person name, the restriction
                  					is very minor.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Since most of the functionality of entity name is in support of person
                  					names, the person name (PN) is only a very minor
                  					restriction on the entity name part qualifier.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-PN">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-PN"></a><pre>
type PersonName alias PN specializes EN;

invariant(PN this) {
   forall(ENXP part)
         where this.contains(part) {
      part.qualifier.contains("LS").not;
      }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="ON"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-ON"></a>2.26 
               </h3>
            </td>
            <td class="body_col">
               <h3>Organization Name (ON) specializes <a class="termref" href="#dt-EN">EN</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An <a class="termref" href="#dt-EN">EN</a> used when the named Entity
                  					is an Organization. A sequence of name parts.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A name for an organization, such as "Health Level Seven, Inc."  An
                  					organization name consists only of untyped name parts, prefixes,
                  					suffixes, and delimiters.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-ON">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-ON"></a><pre>
type OrganizationName alias ON specializes EN;

invariant(ON this) {
   forall(ENXP part)
         where this.contains(part) {
      part.type.implies("FAM").not;
      part.type.implies("GIV").not;
      }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="PN-examples"></a>2.26.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Examples</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The following is the organization name, "Health Level Seven, Inc." in
                  						a simple string form:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 13</caption>
                  <tr>
                     <td class="example"><pre>&lt;name&gt;Health Level Seven, Inc.&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						And with the legal status "Inc." as a distinguished name part:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <caption>Example 14</caption>
                  <tr>
                     <td class="example"><pre>&lt;name&gt;Health Level Seven, &lt;suffix qualifier="LS"&gt;Inc.&lt;/suffix&gt;&lt;/name&gt;</pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-Quantities.gif" target="_blank" border="0">Quantity Data Types (link to graphic opens in a  new window)</a></td>
         </tr><a name="QTY"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-QTY"></a>2.27 
               </h3>
            </td>
            <td class="body_col">
               <h3>Abstract Type Quantity (QTY) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					The quantity data type is an abstract generalization for all data
                  					types (1) whose value set has an order relation (less-or-equal) and
                  					(2) where difference is defined in all of the data type's totally
                  					ordered value subsets.  The quantity type abstraction is needed in
                  					defining certain other types, such as the interval and the probability
                  					distribution.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-QTY">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-QTY"></a><pre>
abstract type Quantity alias QTY specializes ANY {
   BL    lessOrEqual(QTY x);
   BL    compares(QTY x);
   TYPE  diffType;
   QTY   minus(QTY x);
   QTY   plus(QTY x);
   BL    isZero;
   BL    lessThan(QTY x);
   BL    greaterOrEqual(QTY x);
   BL    greaterThan(QTY x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.lessOrEqual"></a>2.27.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Ordering: less-or-equal : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate expressing an order relation that is reflexive, asymmetric
                  						and transitive, between this quantity and another quantity.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <em>lessOrEqual</em> relation is defined on any totally ordered partition
                  						of the quantity data type. A totally ordered partition is a subset of
                  						the data types's defined values where all elements have a defined
                  						order (e.g., the integer and real numbers are totally ordered.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						By contrast, a partially ordered set is a set where some, but not all
                  						pairs of elements are comparable through the order relation (e.g., a
                  						tree structure or the set of physical quantities is a partially
                  						ordered set.)  Two data values <em>x</em> and <em>y</em> of an
                  						ordered type are comparable (<em>x</em>.compares(<em>y</em>))
                  						if the less-or-equal relation holds in either way (<em>x</em>
                  						&#8804; <em>y</em> or <em>y</em> &#8804; <em>x</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A partial order relation generates totally ordered subsets whose union
                  						is the entire set (e.g., the set of all length is a totally ordered
                  						subset of the set of all physical quantities.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, a tree structure is partially ordered, where the root is
                  						considered less or equal to a leaf, but there may not be an order
                  						among the leafs. Also, physical quantities are partially ordered,
                  						since an order exists only among quantities of the same dimension
                  						(e.g., between two lengths, but not between a length and a time.)  A
                  						totally ordered subset of a tree is a path that transitively connects
                  						a leaf to the root. The physical dimension of time is a totally
                  						ordered subset of physical quantities.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (QTY x, y, z)
   where x.nonNull.and(y.nonNull).and(z.nonNull) {
      x.lessOrEqual(x);                                  /* reflexive */
      x.lessOrEqual(y).implies(y.lessOrEqual(x)).not;    /* asymmetric */
      x.lessOrEqual(y).and(y.lessOrEqual(z))
       .implies(x.lessOrEqual(z))                        /* transitive */
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.equal"></a>2.27.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Equality is a reflexive, symmetric, and transitive relation between
                  						any two data values. Only proper values can be equal, null values
                  						never are equal (even if they have the same null flavor.)
                  			        
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(ANY x, y, z)
      where x.nonNull.and(y.nonNull).and(z.nonNull) {
   x.equal(x);                                         /* reflexivity */
   x.equal(y).equal(y.equal(x));                       /* symmetry */
   x.equal(y).and(y.equal(z)).implies(x.equal(z))      /* transitivity */
   x.equal(y).implies(x.dataType.equal(y.dataType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						How equality is determined must be defined for each data type. If
                  						nothing else is specified, two data values are equal if they are
                  						indistinguishable, that is, if they differ in none of their semantic
                  						properties. A data type can "override" this general definition of
                  						equality, by specifying its own equal relationship. This overriding
                  						of the equality relation can be used to exclude semantic properties
                  						from the equality test. If a data type excludes semantic properties
                  						from its definition of equality, this implies that certain properties
                  						(or aspects of properties) that are not part of the equality test are
                  						not essential to the meaning of the value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example the physical quantity has the two semantic properties (1)
                  						a real number and (2) a coded unit of measure. The equality test,
                  						however, must account for the fact that, e.g., 1 meter equals 100
                  						centimeters; independent equality of the two semantic properties is
                  						too strong a criterion for the equality test. Therefore, physical
                  						quantity must override the equality definition.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.compares"></a>2.27.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Comparability : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating if this value and the operand can be compared
                  						as to which is greater than the other.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two quantities are comparable if they are both elements of a common
                  						totally ordered partition of their data types' value space. The
                  						definition is based on <a class="termref" href="#prop-QTY.lessOrEqual">lessOrEqual</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (QTY x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.compares(y).equal(x.lessOrEqual(y).or(y.lessOrEqual(x)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.diffType"></a>2.27.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The type of the difference between 2 values of a specific QTY data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x) {
   x.diffType.implies(QTY)
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The type will be some data type that further specializes QTY
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.minus"></a>2.27.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Difference : <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A quantity expressing the "distance" of this quantity from the operand
                  						quantity, that must be comparable. The data type of the difference
                  						quantity is related to the operand quantities but need not be the
                  						same.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x, y) {
   x.minus(y).implies(x.diffType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The result of minus has the data type returned by the
                  						diffType property of the instance.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A difference is defined in an ordered set if it is semantically
                  						meaningful to state that &#916; is the difference between the values
                  						<em>x</em> and <em>y</em>. This difference &#916; must be
                  						meaningful independently from the values <em>x</em> and
                  						<em>y</em>. This independence exists if for all values
                  						<em>u</em> one can meaningfully derive a value <em>v</em> such
                  						that &#916; would also be the difference between <em>u</em> and
                  						<em>v</em>. The judgment for what is <em>meaningful</em>
                  						cannot be defined formally.<a name="fn-src43"></a><a href="#fn43"><sup style="font-size: smaller">43</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>minus</em> has a data type that can express the difference between
                  						two values for which the ordering relation is defined (i.e., two
                  						elements of a common totally ordered subset.)  For example, the
                  						difference data type of integer number is integer number, but the
                  						difference type of point in time is a physical quantity in the
                  						dimension of time. A difference data type is a totally ordered data
                  						type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The difference between two values <em>x</em> minus <em>y</em>
                  						must be defined for all <em>x</em> and <em>y</em> in a common
                  						totally ordered subset of the data type's value set. Zero is the
                  						difference between a value and itself.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x, y)
      where x.compares(y) {
   x.minus(y).nonNull;
   x.minus(x).isZero;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If x and y are not comparable, then the difference will be Null
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x, y)
      where x.compares(y).Not {
   x.minus(y).notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.plus"></a>2.27.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The sum of this quantity and its operand. The operand must be of a
                  						data type that can express the difference between two values of this
                  						quantity's data type.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x, y)
      where x.compares(y) {
   x.plus(y.minus(x)).equal(y);
   y.dataType.implies(x.diffType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Q: what is the relationship between
                  						  {y.dataType.implies(x.diffType)}
                  						and
                  						  {x.compares(y)}?
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If <em>y</em> is not a valid type for the difference between two
                  						values of the type of <em>x</em>, the the result of the operation
                  						will be NULL.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x, y)
      where y.dataType.implies(x.diffType).not {
   x.plus(y).notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.isZero"></a>2.27.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>The Zero-Quantity : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The neutral element in the difference and addition operations, i.e.,
                  						if a quantity is zero, addition to, or subtraction from any other
                  						comparable quantity will result in that other quantity.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(QTY x) {
   x.minus(x).isZero;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.lessThan"></a>2.27.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Ordering: less-than : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate expressing an order relation that is asymmetric and
                  						transitive, between this quantity and another quantity. The ordering
                  						is the same as <a class="termref" href="#prop-QTY.lessOrEqual">lessOrEqual</a>, but irreflexive.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (QTY x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.lessThan(y).equal(x.lessOrEqual(y)
                .and(x.equal(y).not));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.greaterOrEqual"></a>2.27.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Ordering: greater-or-equal : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate expressing an order relation that is reflexive, asymmetric
                  						and transitive, between this quantity and another quantity. This is
                  						the inverse order of <a class="termref" href="#prop-QTY.lessOrEqual">lessOrEqual</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (QTY x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.greaterOrEqual(y).equal(y.lessOrEqual(x));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-QTY.greaterThan"></a>2.27.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Ordering: greater-than : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate expressing an order relation that is asymmetric and
                  						transitive, between this quantity and another quantity. This
                  						is the invese of <a class="termref" href="#prop-QTY.lessThan">lessThan</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (QTY x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.greaterThan(y).equal(y.lessThan(x));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="INT"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-INT"></a>2.28 
               </h3>
            </td>
            <td class="body_col">
               <h3>Integer Number (INT) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Integer numbers (-1,0,1,2, 100, 3398129, etc.) are precise numbers
                  					that are results of counting and enumerating. Integer numbers are
                  					discrete, the set of integers is infinite but countable.  No arbitrary
                  					limit is imposed on the range of integer numbers. Two NULL flavors are
                  					defined for the positive and negative infinity.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-INT">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-INT"></a><pre>
type IntegerNumber alias INT specializes QTY {
           INT  successor;
           INT  times(INT x);
           INT  predecessor;
           INT  negated;
           BL   isNegative;
           BL   nonNegative;
           INT  dividedBy(INT x);
           INT  remainder(INT x);
           BL   isOne;
  literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Since the integer number data type includes all of the semantics of
                  					the mathematical integer number concept, the basic operations plus
                  					(addition) and times (multiplication) are defined. These operations
                  					are defined here as characterizing operations in the sense of ISO
                  					11404, and because these operations are needed in other parts of this
                  					specification, namely the semantics of the literal form.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The traditional recursive definitions of addition and multiplication
                  					are due to Grassmann, and use the notion of <a class="termref" href="#prop-INT.successor">successor</a>.<a name="fn-src44"></a><a href="#fn44"><sup style="font-size: smaller">44</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, o, i)
      where x.nonNull.and(o.isZero) {
   x.lessThan(x.successor);
   x.plus(o).equal(x);
   x.plus(y.successor).equal(x.plus(y).successor);
   x.times(o).equal(o);
   x.times(y.successor).equal(x.times(y)).plus(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.successor"></a>2.28.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Successor : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The <em>INT</em> value that is greater than this <em>INT</em> value but
                  						where no <em>INT</em> value exists between this value and its successor.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y)
      where x.successor(y) {
   x.lessThan(y).and.not(exists(INT z) {
      x.lessThan(z);
      z.lessThan(y);
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.diffType"></a>2.28.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x) {
   x.diffType.implies(INT);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The difference between two <em>INT</em> values is also a <em>INT</em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.plus"></a>2.28.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-INT">INT</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y, o)
      where x.nonNull.and(y.nonNull).and(o.isZero) {
   x.plus(o).equal(x);
   x.plus(y.successor).equal(x.plus(y).successor);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.times"></a>2.28.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Multiplication : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The result of multiplying this integer with the operand, equivalent to
                  						repeated additions of this integer.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y, i, o)
      where x.compares(y).and(o.isZero).and(i.isOne) {
   x.times(o).equal(o);
   x.times(i).equal(x);
   x.times(y.successor).equal(x.times(y)).plus(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.predecessor"></a>2.28.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Predecessor : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The inverse of <a class="termref" href="#prop-INT.successor">successor</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y)
      where x.successor(y) {
   x.successor.predecessor.equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.negated"></a>2.28.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Negation : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The inverse element of the <em>INT</em> value, another <em>INT</em> value,
                  						which, when added to that value yields zero (the neutral element.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x)
      where x.nonNull {
   x.plus(x.negated).isZero;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.nonNegative"></a>2.28.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Non-Negative : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating whether the <em>INT</em> zero (neutral element) is
                  						less or equal to this <em>INT</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, o)
      where x.nonNull.and(o.isZero) {
   x.nonNegative.equal(o.lessOrEqual(x));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.isNegative"></a>2.28.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Negative : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating whether this <em>INT</em> is less than zero (not
                  						non-negative.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x)
      where x.nonNull {
   x.isNegative.equal(x.nonNegative.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.dividedBy"></a>2.28.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Integer Division : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The integer division operation of this integer (dividend) with another
                  						integer (divisor) is the integer number of times the divisor fits into
                  						the dividend.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT dividend, divisor, o, i)
      where divisor.isZero.not.and(o.isZero) {
   dividend.isZero.implies(dividend.dividedBy(divisor).equal(o));
   dividend.isZero.not.implies(dividend.dividedBy(divisor).equal(
      absolute(dividend).minus(absolute(divisor)).dividedBy(absolute(divisor))
                        .successor.times(sign(dividend)
                        .times(sign(divisor)))));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.remainder"></a>2.28.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Remainder : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The remainder of the integer division.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y)
      where x.nonNull.and(y.nonNull) {
   x.reminder(y).equal(x.minus(x.dividedBy(z).times(y)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						This definition of the remainder matches the C and Java programming
                  						languages.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.isOne"></a>2.28.11 
               </h4>
            </td>
            <td class="body_col">
               <h4>Neutral Element of Multiplication : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating if this value is the number one, i.e., the
                  						neutral element of multiplication. There is exactly one integer
                  						that has this property.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x, y)
      where x.nonNull.and(y.nonNull) {
   x.isOne.and(y.isOne).implies(x.equal(y));
   x.isOne.and(y.isZero).implies(x.equal(y).not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-INT.literal"></a>2.28.12 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form of an integer is a simple decimal number, i.e. a
                  						string of decimal digits.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
INT.literal ST {
   INT digit : "0"         { $.isZero; }
             | "1"         { $.equal(0.successor); }
             | "2"         { $.equal(1.successor); }
             | "3"         { $.equal(2.successor); }
             | "4"         { $.equal(3.successor); }
             | "5"         { $.equal(4.successor); }
             | "6"         { $.equal(5.successor); }
             | "7"         { $.equal(6.successor); }
             | "8"         { $.equal(7.successor); }
             | "9"         { $.equal(8.successor); };

  INT uint   : digit       { $.equal($1); }
             | uint digit  { $.equal($1.times(9.successor).plus($2)); };

  INT        : uint        { $.equal($1); }
             | "+" uint    { $.equal($2); }
             | "-" uint    { $.equal($2.negated); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="REAL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-REAL"></a>2.29 
               </h3>
            </td>
            <td class="body_col">
               <h3>Real Number (REAL) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Fractional numbers. Typically used whenever quantities are measured,
                  					estimated, or computed from other real numbers.  The typical
                  					representation is decimal, where the number of significant decimal
                  					digits is known as the precision.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The term "Real number" in this specification is used to mean that
                  					fractional values are covered without necessarily implying the full
                  					set of the mathematical real numbers that would include irrational
                  					numbers such as &#961;, Euler's number, etc.<a name="fn-src45"></a><a href="#fn45"><sup style="font-size: smaller">45</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						This specification defines the real number data type in the broadest
                  						sense possible. However, it does not imply that any conforming ITS or
                  						implementation must be able to represent the full range of Real
                  						numbers, which would not be possible in any finite
                  						implementation. HL7's current use cases for the Real number data type
                  						are measured and estimated quantities and monetary amounts. These use
                  						cases can be handled with a restricted Real value space, rational
                  						numbers, and even just very limited decimals (scaled integers.)
                  						However, we declare the representations of the real value space as
                  						floating point, rational, scaled integer, or digit string, and their
                  						various limitations to be out of the scope of this specification.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This specification offers two choices for a number data type. The
                  					choice is made as follows: Any number attribute is a real if it is not
                  					known for sure that it is an integer. A number is an integer if it is
                  					<em>always</em> counted, typically representing an ordinal
                  					number. If there are conceivable use cases where such a number would
                  					be estimated or averaged, it is not always an integer and thus should
                  					use the Real data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-REAL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-REAL"></a><pre>
type RealNumber alias REAL specializes QTY {
             REAL  negated;
             REAL  times(REAL x);
             REAL  inverted;
             BL    isOne;
             REAL  power(REAL x);
  literal    ST;
             INT   precision;
  demotion   INT;
  promotion  REAL  (INT x);
  promotion  PQ;
  promotion  RTO;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The algebraic operations are specified here as characterizing
                  					operations in the sense of ISO 11404, and because these operations are
                  					needed in other parts of this specification.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Unlike the integer numbers, the real numbers semantics are not
                  					inductively constructed but only intuitively described by their axioms
                  					of their algebraic properties. The completeness axioms are
                  					intentionally left out so as to make no statement about irrational
                  					numbers.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.compares"></a>2.29.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Comparability : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The value set of <em>REAL</em> is totally ordered.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, y)
      where x.nonNull.and(y.nonNull) {
   x.compares(y);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.diffType"></a>2.29.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x) {
   x.diffType.implies(REAL);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The difference between two <em>REAL</em> values is also a <em>REAL</em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.plus"></a>2.29.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-QTY">QTY</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, y, z, o)
      where x.nonNull.and(y.nonNull).and(z.nonNull).and(o.isZero) {
   x.plus(o).equal(x);                             /* neutral element */
   x.plus(y).plus(z).equal(x.plus(y.plus(z)));     /* associative */
   x.plus(y).equal(y.plus(x));                     /* commutative */
   z.lessOrEqual(x).and(z.lessOrEqual(y)
                   .implies(z.lessOrEqual(x.plus(y));
   x.lessOrEqual(y).implies(x.plus(z)
                   .lessOrEqual(y.plus(z)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.negated"></a>2.29.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Negation (Inverse Element of Addition) : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A <em>REAL</em> value, which, when added to another <em>REAL</em> value yields
                  						zero (the neutral element of addition.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x)
      where x.nonNull {
   x.plus(x.negated).isZero;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.isOne"></a>2.29.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Neutral Element of Multiplication : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating if this value is the number one, i.e., the
                  						neutral element of multiplication. There is exactly one real number
                  						that has this property.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, y)
      where x.nonNull.and(y.nonNull) {
   x.isOne.and(y.isOne).implies(x.equal(y));
   x.isOne.and(y.isZero).implies(x.equal(y).not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.times"></a>2.29.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Multiplication : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						An operation in <em>REAL</em> that forms an abelian group and is related
                  						to addition by the law of distribution.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, y, z, i, o)
      where x.nonNull.and(y.nonNull).and(z.nonNull)
             .and(i.isOne).and(o.isZero) {
   x.times(o).equal(o);
   x.times(i).equal(x);                                      /* neutral element */
   x.times(y).times(z).equal(x.times(y.times(z)));           /* associative */
   x.times(y).equal(y.times(x));                             /* commutative */
   x.times(y.plus(z)).equal(x.times(y).plus(x.times(z));     /* distributive */
   o.lessOrEqual(x).and(o.lessOrEqual(y).implies(o.lessOrEqual(x.times(y));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.inverted"></a>2.29.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Inverse Element of Multiplication : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A <em>REAL</em> value, which, when muliplied with another <em>REAL</em> value
                  						yields one (the neutral element of multiplication). Zero (the neutral
                  						element of addition) has no inverse element.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, i)
      where x.isZero.not.and(i.isOne) {
   x.times(x.inverted).equal(i);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.INT"></a>2.29.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Homomorphism of INT into REAL : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <a class="termref" href="#dt-INT">INT</a> and <em>REAL</em> data types are related by a
                  						homomorphism that maps every value in <a class="termref" href="#dt-INT">INT</a> to a value
                  						in <em>REAL</em> whereby the algebraic properties of <a class="termref" href="#dt-INT">INT</a>
                  						are preserved. This means, an integer can be promoted to a real and a
                  						real can be demoted to an integer by means of rounding off the
                  						fractional part.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT n, m)
      where n.nonNull.and(m.nonNull) {
   ((REAL)n.plus(m)).equal(((REAL)n).plus((REAL)m));
   ((REAL)n.times(m)).equal(((REAL)n).times((REAL)m));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.power"></a>2.29.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exponentiation : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The basis of exponentiation is the iterative multiplication of a 
                  						real number, and extended to rational exponents as the inverse
                  						operation.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						We only list certain common properties of exponentiation.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(REAL x, y, z, o, i)
      where x.nonNull.and(y.nonNull).and(z.nonNull)
             .and(o.isZero).and.(i.isOne) {
   forall(INT n)
         where n.nonNull {
      n.greaterThan(o).implies(
         x.power(n).equal(x.times(x.power(n.predecessor))));
      n.lessThan(o).implies(
         x.power(n).equal(x.power(n.negated).inverted);
      }
      x.power(o).equal(i);
      x.power(i).equal(x);
      x.power(y).power(z).equal(x.power(y.times(z)));
      x.power(y).times(x.power(z)).equal(x.power(y.plus(z)));
      x.power(y).inverted.equal(x.power(y.negated));
      x.power(y).power(y.inverted).equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.literal"></a>2.29.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form of an real is a string of decimal digits with
                  						optional leading "+" or "-" sign, and optional decimal point, and
                  						optional exponential notation using a case insensitive "e" between the
                  						mantissa and the exponent. The number of significant digits must
                  						conform to the precision property.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
REAL.literal ST {
   REAL            : mantissa                   { $.equal($1); }
                   | mantissa /[eE]/ INT        { $.equal($1.times(10.power($3)); };

   REAL mantissa   : /0*/ 0                     { $.isZero;
                                                  $.precision.equal(1); }
                   | /0*/ "." /0*/              { $.isZero;
                                                  $.precision.equal($3.length.successor); }
                   | /0*/ "." /0*/ fractional   { $.equal($4);
                                                  $.precision.equal($4.precision); }
                   | integer                    { $.equal($1); }
                   | integer "." fractional     { $.equal($1.plus($2));
                                                  $.precision.equal(
                                                  $1.precision.plus($3.precision)); };

   REAL integer    : uintval                    { $.equal($2); }
                   | "+" uintval                { $.equal($1.times($2)); }
                   | "-" uintval                { $.equal($1.times($2).negated); };

   REAL uintval    : /0*/ uint                  { $.equal($2); };

   REAL uint       : digit                      { $.equal($1);
                                                  $.precision.equal(1); }
                   | uint digit                 { $.equal($1.times(10).plus($2));
                                                  $.precision.equal(
                                                     $1.precision.successor); };

   REAL fractional : digit                      { $.equal($1.times(10.inverted));
                                                  $.precision.equal(1); }
                   | digit fractional           { $.equal(
                                                  $1.plus($2.times(10.inverted));
                                                  $.precision.equal(
                                                     $1.precision.successor); };

   INT digit       : /[0-9]/                    { $.equal($1); }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Examples of real literals for two thousand are 2000, 2000., 2e3,
                  						2.0e+3, +2.0e+3.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Note that the literal form does not carry type information. For
                  						example, "2000" is a valid representation of both a real number and an
                  						integer number. No trailing decimal point is used to disambiguate from
                  						integer numbers. An ITS that uses this literal form must recover the
                  						type information from other sources.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.precision"></a>2.29.11 
               </h4>
            </td>
            <td class="body_col">
               <h4>Precision of the Decimal Form : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The number of significant digits of the decimal representation.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Precision is formally defined based on the <a class="termref" href="#prop-REAL.literal">literal</a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The precision attribute is only the precision of a decimal digit
                  						representation, <em>not the accuracy of the real number
                     						value</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The purpose of the precision property for the real number data type is
                  						to faithfully capture the whole information presented to humans in a
                  						number. The amount of decimal digits shown conveys information about
                  						the uncertainty (i.e., precision and accuracy) of a measured value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b> 
                  							The precision of the representation is independent from uncertainty
                  							(precision accuracy) of a measurement result. If the uncertainty of a
                  							measurement result is important, one should specify uncertain values 
                  							as <a class="termref" href="#dt-PPD">PPD</a>.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The rules for what digits are significant are as follows:
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     							All non-zero digits are significant.
                     						
                  </li>
                  <li>
                     							All zeroes to the right of a significant digit are significant.
                     						
                  </li>
                  <li>
                     							When all digits in the number are zero the zero-digit immediately left
                     							to the decimal point is significant (and because of rule 2, all
                     							following zeroes are thus significant too.)
                     						
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							These rules of significance differ slightly from the more casual rules
                  							taught in school. Notably trailing zeroes before the decimal point are
                  							consistently regarded significant here. Elsewhere, e.g., 2000 is
                  							ambiguous as to whether the zeroes are significant. This deviation
                  							from the common custom is warranted for the purpose of unambiguous
                  							communication.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="table-REAL.precision.examples">&nbsp;</a>
                     			Table
                     			30: Examples for the Precision of Real Number Literals.
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">Literal</th>
                        <th colspan="1">Number of Significant Digits</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">2000</td>
                        <td colspan="1">has 4 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">2e3</td>
                        <td colspan="1">
                           									has 1 significant digit, used if one would naturally say 
                           									"2000" but precision is only 1.
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">0.001</td>
                        <td colspan="1">has 1 significant digit.</td>
                     </tr>
                     <tr>
                        <td colspan="1">1e-3</td>
                        <td colspan="1">
                           									has 1 significant digit, use this if one would naturally
                           									say "0.001" but precision is only 1.
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">0</td>
                        <td colspan="1">has 1 significant digit.</td>
                     </tr>
                     <tr>
                        <td colspan="1">0.0</td>
                        <td colspan="1">has 2 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">000.0</td>
                        <td colspan="1">has 2 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">0.00</td>
                        <td colspan="1">has 3 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">4.10</td>
                        <td colspan="1">has 3 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">4.09</td>
                        <td colspan="1"> has 3 significant digits.</td>
                     </tr>
                     <tr>
                        <td colspan="1">4.1</td>
                        <td colspan="1">has 2 significant digits.</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The precision of the representation <em>should</em> match the
                  						uncertainty of the value. However, precision of the representation and
                  						uncertainty of the value are separate independent concepts. Refer to
                  						<a class="termref" href="#dt-PPD_REAL">PPD&lt;REAL&gt;</a> for details about uncertain real numbers.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example "0.123" has 3 significant digits <em>in the
                     						representation</em>, but the <em>uncertainty of the value</em>
                  						may be in any digit shown or not shown, i.e., the uncertainty may be
                  						0.123&plusmn;0.0005, 0.123&plusmn;0.005 or
                  						0.123&plusmn;0.00005, etc. Note that ITS representations
                  						<em>should</em> adjust their representational precision with the
                  						uncertainty of the value. However, since the precision in the digit
                  						string is granular to 0.5 the least significant digit, while
                  						uncertainty may be anywhere between these "grid lines",
                  						0.123&plusmn;0.005 would also be an adequate representation for the
                  						value between 0.118 and 0.128.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							On a character based Implementation Technology the ITS need not
                  							represent the precision as an explicit attribute if numbers are
                  							represented as decimal digit strings. In that case, the ITS must abide
                  							by the rules of an unambiguous determination of significant digits. A
                  							number representation must not produce more or less significant digits
                  							than were originally in that number. Conformance can be tested through
                  							round-trip encoding &#8212; decoding &#8212; encoding.
                  						
               </blockquote>
            </td>
         </tr><a name="RTO"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-RTO"></a>2.30 
               </h3>
            </td>
            <td class="body_col">
               <h3>Ratio (RTO) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A quantity constructed as the quotient of a numerator quantity divided
                  					by a denominator quantity. Common factors in the numerator and
                  					denominator are not automatically cancelled out.  The <em>RTO</em> data
                  					type supports titers (e.g., "1:128") and other quantities produced by
                  					laboratories that truly represent ratios. Ratios are not simply
                  					"structured numerics", particularly blood pressure measurements
                  					(e.g. "120/60") are not ratios. In many cases the <a class="termref" href="#dt-REAL">REAL</a>
                  					should be used instead of the <em>RTO</em>.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Ratios are different from rational numbers, i.e., in ratios common
                  					factors in the numerator and denominator never cancel out.  A ratio of
                  					two real or integer numbers is not automatically reduced to a real
                  					number.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-RTO-prop-summary">&nbsp;</a>
                     			Table
                     			31: Property Summary of
                     Ratio
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>numerator</td>
                        <td>N</td>
                        <td>
                           						The quantity that is being divided in the ratio.  The default is the
                           						integer number 1 (one.)
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>denominator</td>
                        <td>D</td>
                        <td>
                           						The quantity that devides the numerator in the ratio.  The default is
                           						the integer number 1 (one.)  The denominator must not be zero.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b> 
                  						This data type is not defined to generally represent rational
                  						numbers. It is used only if common factors in numerator and
                  						denominator are not supposed to cancel out. This is only rarely the
                  						case. For observation values, ratios occur almost exclusively with
                  						titers.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-RTO">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-RTO"></a><pre>
type Ratio&lt;QTY N, QTY D&gt; alias RTO specializes QTY {
   N         numerator;
   D         denominator;
   demotion  REAL;
   demotion  PQ;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The default value for both numerator and denominator is the integer
                  					number 1 (one.) The denominator may not be zero.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b> 
                  						This data type is defined as a generic data type (see
                  						<a href="#generics">Generic Data Types
                     			(&sect;
                     			1.9.5 )</a>) but discussed in the context of the other
                  						quantity-related data types. The reason for defining <em>RTO</em> as a
                  						generic data type is so that it can be constrained precisely as to
                  						what the numerator and denominator types should be.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-RTO.numerator"></a>2.30.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Numerator : <a class="termref" href="#dt-N">N</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The quantity that is being divided in the ratio.  The default is the
                  						integer number 1 (one.)
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-RTO.denominator"></a>2.30.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Denominator : <a class="termref" href="#dt-D">D</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The quantity that devides the numerator in the ratio.  The default is
                  						the integer number 1 (one.)  The denominator must not be zero.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(RTO x)
      where x.nonNull {
   x.denominator.isZero.not;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-RTO.literal"></a>2.30.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A ratio literal form exists for all ratios where both numerator and
                  						denominators have literal forms. A ratio is simply the numerator
                  						literal a colon as separator followed by the denominator literal. When
                  						the colon and denominator are missing, the integer number 1 is assumed
                  						as the denominator.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
RTO.literal ST {
   RTO : QTY          { $.numerator.equal($1);
                        $.denominator.equal((INT)1); };
       | QTY ":" QTY  { $.numerator.equal($1);
                        $.denominator.equal($3); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the rubella virus antibody titer value 1:64 could be
                  						represented using the literal "1:64".
                  					
               </p>
            </td>
         </tr><a name="PQ"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-PQ"></a>2.31 
               </h3>
            </td>
            <td class="body_col">
               <h3>Physical Quantity (PQ) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A dimensioned quantity expressing the result of measuring.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-PQ-prop-summary">&nbsp;</a>
                     			Table
                     			32: Property Summary of
                     Physical Quantity
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>value</td>
                        <td>REAL</td>
                        <td>
                           						The magnitude of the quantity measured in terms of the unit.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>unit</td>
                        <td>CS</td>
                        <td>
                           						The unit of measure specified in the Unified Code for Units of Measure
                           						(UCUM) [<a href="http://aurora.rg.iupui.edu/UCUM">http://aurora.rg.iupui.edu/UCUM</a>].
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>translation</td>
                        <td>SET&lt;PQR&gt;</td>
                        <td>
                           						An alternative representation of the same physical quantity expressed
                           						in a different unit, of a different unit code system and possibly with
                           						a different value.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>canonical</td>
                        <td>PQ</td>
                        <td>
                           						A physical quantity expressed in a canonical unit. In any given unit
                           						system has every physical dimension can be assigned one canonical unit
                           						Defining the canonical unit is not subject of this specification, only
                           						asserting that such a canonical unit exists (and can be arbitrarily
                           						chosen) for every physical quantity. An abstract physical quantity is
                           						equal to its canonical form.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>diffType</td>
                        <td>TYPE</td>
                        <td>
                           						The type of the difference between 2 values of a specific QTY data type.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>toPQ</td>
                        <td>REAL</td>
                        <td></td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-PQ">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-PQ"></a><pre>
type PhysicalQuantity alias PQ specializes QTY {
            REAL      value;
            CS        unit;
            BL        equal(ANY x)
            BL        lessOrEqual(PQ x);
            BL        compares(PQ x);
            PQ        canonical;
            SET&lt;PQR&gt;  translation;

            PQ        negated;
            PQ        times(REAL x);
            PQ        times(PQ x);
            PQ        inverted;
            PQ        power(INT x);
            BL        isOne;

  literal   ST;
  demotion  REAL;

            REAL      originalValue;
            CV        originalUnit;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.value"></a>2.31.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Maginitude Value : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The magnitude of the quantity measured in terms of the unit.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.unit"></a>2.31.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Unit of Measure : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The unit of measure specified in the Unified Code for Units of Measure
                  						(UCUM) [<a href="http://aurora.rg.iupui.edu/UCUM">http://aurora.rg.iupui.edu/UCUM</a>].
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Equality of physical quantities does not require the values and units
                  							to be equal independently. Value and unit is only how we represent
                  							physical quantities. For example, 1 m equals 100 cm. Although the
                  							units are different and the values are different, the physical
                  							quantities are equal!  Therefore one should never expect a particular
                  							unit for a physical quantity but instead provide automated conversion
                  							between different comparable units.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.translation"></a>2.31.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Translation : <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-PQR">PQR</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						An alternative representation of the same physical quantity expressed
                  						in a different unit, of a different unit code system and possibly with
                  						a different value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Physical quantities semantically are the results of measurement
                  					acts. Although physical quantities are represented as pairs of value
                  					and unit, semantically, a physical quantity is more than that. To find
                  					out whether two physical quantities are equal, it is not enough to
                  					compare equality of their two values and units independently. For
                  					example, 100 cm equals 1 m although neither values nor units are
                  					equal. To define equality we introduce the notion of a canonical form.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.canonical"></a>2.31.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Canonical Form : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A physical quantity expressed in a canonical unit. In any given unit
                  						system has every physical dimension can be assigned one canonical unit
                  						Defining the canonical unit is not subject of this specification, only
                  						asserting that such a canonical unit exists (and can be arbitrarily
                  						chosen) for every physical quantity. An abstract physical quantity is
                  						equal to its canonical form.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y)
      where x.nonNull.and(y.nonNull) {
   x.canonical.equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, for a unit system based on the Syst&egrave;me
                  						International (SI) one can define the canonical form as (a) the
                  						product of only the base units; (b) without prefixes; where (c) only
                  						multiplication and exponents are used (no division operation); and (d)
                  						where the seven base units appear in a defined ordering (e.g., m, s,
                  						g...) Thus, 1 mm Hg would be expressed as 133322 m<sup>-1</sup>
                  						s<sup>-2</sup>. As can be seen, the rules how to build the canonical
                  						form of units may be quite complex. However, for the semantic
                  						specification it doesn't matter how the canonical form is built, nor
                  						what specific canonical form is chosen, only that <em>some</em>
                  						canonical form <em>could</em> be defined.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.equal"></a>2.31.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two physical quantities are equal if each their values and their units
                  						of their canonical forms are equal.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(x.canonical.value
             .equal(y.canonical.value).and(
                x.canonical.unit.equal(y.canonical.unit)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.compares"></a>2.31.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Comparability : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Two physical quantities compare each other (and have an ordering and
                  						difference) if the units of their canonical forms are equal.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y)
      where x.nonNull.and(y.nonNull) {
   x.compares(y).equal(x.canonical.unit.equal(y.canonical.unit));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.diffType"></a>2.31.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x) {
   x.diffType.implies(PQ);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The difference between 2 Physical Quantities is another Physical Quantity with
                  						the same units
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y)
      where x.compares(y) {
   x.minus(y).canonical.unit.implies(x.canonical.unit);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.isOne"></a>2.31.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Neutral Element of Multiplication : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A predicate indicating if this value is the number one, i.e., the
                  						neutral element of multiplication. There is exactly one physical
                  						quantity that has this property and is called <em>the unity</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y)
      where x.nonNull.and(y.nonNull) {
   x.isOne.and(y.isOne).implies(x.equal(y));
   x.isOne.and(y.isZero).implies(x.equal(y).not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.times"></a>2.31.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Multiplication : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The product of two physical quantities is the product of their values
                  						times the product of their units.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, y, z, i, o)
      where x.nonNull.and(y.nonNull).and(z.nonNull)
             .and(o.isZero).and(i.isOne) {
   x.times(o).equal(o);
   x.times(i).equal(x);             /* neutral element */
   x.times(y).times(z).equal(
            x.times(y.times(z)));   /* associative */
   x.times(y).equal(y.times(x));    /* commutative */
   o.lessOrEqual(x).and(o.lessOrEqual(y).implies(o.lessOrEqual(x.times(y));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.inverted"></a>2.31.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Inverse Element of Multiplication : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A <em>PQ</em> value, which, when muliplied with another <em>PQ</em> value
                  						yields one (the neutral element of multiplication). Zero (the neutral
                  						element of addition) has no inverse element.  The quotient of two
                  						comparable quantities is comparable to the unity (the unit 1).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ this, that, one)
      where this.nonNull.and(that.nonNull).and(one.isOne) {
   this.times(this.inverted).equal(one);
   this.compares(that).implies(this.times(that.inverted).equal(one));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.timesREAL"></a>2.31.11 
               </h4>
            </td>
            <td class="body_col">
               <h4>Real Multiplication : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Multiplication with a real number forms a scaled quantity. A scaled
                  						quantity is comparable to its original quantity.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						If two quantities <em>Q</em><sub>1</sub> and
                  						<em>Q</em><sub>2</sub> compare each other, there
                  						exists a real number <em>r</em> such that <em>r</em><strong>1</strong> = <em>Q</em><sub>1</sub> / <em>Q</em><sub>2</sub>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x; REAL r)
      where x.nonNull.and(r.nonNull) {
   x.times(r).value.equal(x.value.times(r));
   x.times(r).compares(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-REAL.PQ"></a>2.31.12 
               </h4>
            </td>
            <td class="body_col">
               <h4>Homomorphism of REAL into PQ : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <a class="termref" href="#dt-REAL">REAL</a> value can be converted to a <em>PQ</em> value
                  						with the unity, i.e. the unit <strong>1</strong> (one).
                  						Likewise, a physical quantity that compares the unity can be converted
                  						to a real number.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PQ x, unity) 
      where x.nonNull.and.unity.isOne.and(x.compares(unity)) {
   unity.times((REAL)x).equal(x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.power"></a>2.31.13 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exponentiation : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A physical quantity can be raised to an integer power.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (PQ x, i; INT n, o) 
      where x.nonNull.and(i.isOne).and(n.nonNull.and(o.isZero) {
   x.power(o).equal(i);
   n.greaterThan(o).implies(
      x.power(n).equal(x.times(x.power(n.predecessor))));
   n.lessThan(o).implies(
      x.power(n).equal(x.power(n.negated).inverted);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.plus"></a>2.31.14 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Two physical quantities that compare each other can be added.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (PQ x, y)
      where x.compares(y) {
   x.canonical.plus(y.canonical).value.equal(
      x.canonical.value.plus(y.canonical.value));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQ.literal"></a>2.31.15 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form for a physical quantity is a real number literal
                  						followed by optional whitespace and a character string representing a
                  						valid code in the Unified Code for Units of Measure (UCUM)
                  						[<a href="http://aurora.rg.iupui.edu/UCUM">http://aurora.rg.iupui.edu/UCUM</a>].
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
PQ.literal ST {
   PQ       : REAL unit    { $.value.equal($1);
                             $.unit.equal($2); }
   CS  unit : ST           { $.value.equal($1);
                             $.codeSystem.equal(2.16.840.1.113883.6.8); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, 20 minutes is "20 min".
                  					
               </p>
            </td>
         </tr><a name="PQR"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-PQR"></a>2.32 
               </h3>
            </td>
            <td class="body_col">
               <h3>Physical Quantity Representation (PQR) specializes <a class="termref" href="#dt-CV">CV</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An extension of the coded value data type representating a physical
                  					quantity using a unit from any code system. Used to show alternative
                  					representation for a physical quantity.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-PQR-prop-summary">&nbsp;</a>
                     			Table
                     			33: Property Summary of
                     Physical Quantity Representation
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>value</td>
                        <td>REAL</td>
                        <td>
                           						The magnitude of the measurement value in terms of the unit
                           						specified by this code.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>code</td>
                        <td>ST</td>
                        <td>
                           						The plain code symbol defined by the code system. For example,
                           						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystem</td>
                        <td>UID</td>
                        <td>
                           						Specifies the code system that defines the code.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemName</td>
                        <td>ST</td>
                        <td>
                           						The common name of the coding system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>codeSystemVersion</td>
                        <td>ST</td>
                        <td>
                           						If applicable, a version descriptor defined specifically for the given
                           						code system.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>displayName</td>
                        <td>ST</td>
                        <td>
                           						A name or title for the code, under which the sending system shows the
                           						code value to its users.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>originalText</td>
                        <td>ED</td>
                        <td>
                           						The text or phrase used as the basis for the coding.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type PhysicalQuantityRepresentation alias PQR specializes CV {
   REAL  value;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.value"></a>2.32.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Value : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The magnitude of the measurement value in terms of the unit
                  						specified by this code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.code"></a>2.32.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The plain code symbol defined by the code system. For example,
                  						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value has a non-NULL <em>code</em> property
                  						whose value is a character string that is a symbol defined by the
                  						coding system identified by <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>. Conversely, a
                  						<em></em> value without a value for the code property, or with
                  						a value that is not from the cited coding system is an exceptional
                  						value (NULL of flavor <em>other</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The plain code symbol defined by the code system. For example,
                  						"784.0" is the code symbol of the ICD-9 code "784.0" for headache.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value has a non-NULL <em>code</em> property
                  						whose value is a character string that is a symbol defined by the
                  						coding system identified by <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>. Conversely, a
                  						<em></em> value without a value for the code property, or with
                  						a value that is not from the cited coding system is an exceptional
                  						value (NULL of flavor <em>other</em>).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.nonNull {
   x.code.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.codeSystem"></a>2.32.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System : <a class="termref" href="#dt-UID">UID</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the code system that defines the code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Code systems shall be referred to by a <a class="termref" href="#dt-UID">UID</a>, which allows unambiguous 
                  						reference to standard HL7 codes, other standard code systems, as well as local
                  						codes. HL7 shall assign a <a class="termref" href="#dt-UID">UID</a> to each of its code
                  						tables as well as to external standard coding systems that are being
                  						used with HL7. Local sites must use their ISO Object Identifier
                  						(<a class="termref" href="#dt-OID">OID</a>) to construct a globally unique local coding
                  						system identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
                  						contain HL7 standard and external code system identifiers
                  						respectively. The HL7 Vocabulary Technical Committee maintains these
                  						two branches.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value (i.e. a <em></em>
                  						value that has a non-null code property) has a non-NULL <em>codeSystem</em>
                  						specifying the system of concepts that defines the code. In other
                  						words whenever there is a code there is also a code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although every non-NULL <em></em> value has a defined code
                  							system, in some circumstances, the ITS representation for the
                  							<em></em> value needs not explicitly mention the code
                  							system. For example, when the context mandates one and only one code
                  							system to be used specifying the code system explicitly would be
                  							redundant. However, in that case the <em>codeSystem</em> takes on that
                  							context-specific default value and is not NULL.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em></em> of NULL-flavor <em>other</em> indicates that
                  						a concept could not be coded in the coding system specified. Thus, for
                  						these coding exceptions, the code system that did not contain the
                  						appropriate concept must be provided in <em>codeSystem</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code domains are qualified such that they include the portion of
                  						any pertinent local coding system that does not simply paraphrase the
                  						standard coding system (<em>coded with extensibility</em>, CWE.)
                  						If a CWE qualified field actually contains such a local code, the
                  						coding system must specify the local coding system from which the
                  						local code was taken. However, for CWE domains the local code is a
                  						valid member of the domain, so that local codes in CWE domains
                  						constitute neither an error nor an exceptional (NULL/other) value in
                  						the sense of this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.other {
   x.code.other;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						Specifies the code system that defines the code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Code systems shall be referred to by a <a class="termref" href="#dt-UID">UID</a>, which allows unambiguous 
                  						reference to standard HL7 codes, other standard code systems, as well as local
                  						codes. HL7 shall assign a <a class="termref" href="#dt-UID">UID</a> to each of its code
                  						tables as well as to external standard coding systems that are being
                  						used with HL7. Local sites must use their ISO Object Identifier
                  						(<a class="termref" href="#dt-OID">OID</a>) to construct a globally unique local coding
                  						system identifier.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Under HL7's branch, 2.16.840.1.113883, the sub-branches 5 and 6
                  						contain HL7 standard and external code system identifiers
                  						respectively. The HL7 Vocabulary Technical Committee maintains these
                  						two branches.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A non-exceptional <em></em> value (i.e. a <em></em>
                  						value that has a non-null code property) has a non-NULL <em>codeSystem</em>
                  						specifying the system of concepts that defines the code. In other
                  						words whenever there is a code there is also a code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although every non-NULL <em></em> value has a defined code
                  							system, in some circumstances, the ITS representation for the
                  							<em></em> value needs not explicitly mention the code
                  							system. For example, when the context mandates one and only one code
                  							system to be used specifying the code system explicitly would be
                  							redundant. However, in that case the <em>codeSystem</em> takes on that
                  							context-specific default value and is not NULL.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.code.nonNull {
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An exceptional <em></em> of NULL-flavor <em>other</em> indicates that
                  						a concept could not be coded in the coding system specified. Thus, for
                  						these coding exceptions, the code system that did not contain the
                  						appropriate concept must be provided in <em>codeSystem</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Some code domains are qualified such that they include the portion of
                  						any pertinent local coding system that does not simply paraphrase the
                  						standard coding system (<em>coded with extensibility</em>, CWE.)
                  						If a CWE qualified field actually contains such a local code, the
                  						coding system must specify the local coding system from which the
                  						local code was taken. However, for CWE domains the local code is a
                  						valid member of the domain, so that local codes in CWE domains
                  						constitute neither an error nor an exceptional (NULL/other) value in
                  						the sense of this specification.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.other {
   x.code.other;
   x.codeSystem.nonNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.codeSystemName"></a>2.32.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The common name of the coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The code system name has no computational value. The purpose of a code
                  						system name is to assist an unaided human interpreter of a code value to
                  						interpret <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						It is suggested &#8212; though
                  						not absolutely required &#8212; that ITS provide for <em>codeSystemName</em> in
                  						order to annotate the <a class="termref" href="#dt-UID">UID</a> for human comprehension.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 systems must not functionally rely on <em>codeSystemName</em>. <em>codeSystemName</em> can
                  						never modify the meaning of <a class="termref" href="#prop-CD.codeSystem">codeSystem</a> and
                  						cannot exist without <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemName.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The common name of the coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The code system name has no computational value. The purpose of a code
                  						system name is to assist an unaided human interpreter of a code value to
                  						interpret <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  						It is suggested &#8212; though
                  						not absolutely required &#8212; that ITS provide for <em>codeSystemName</em> in
                  						order to annotate the <a class="termref" href="#dt-UID">UID</a> for human comprehension.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 systems must not functionally rely on <em>codeSystemName</em>. <em>codeSystemName</em> can
                  						never modify the meaning of <a class="termref" href="#prop-CD.codeSystem">codeSystem</a> and
                  						cannot exist without <a class="termref" href="#prop-CD.codeSystem">codeSystem</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemName.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.codeSystemVersion"></a>2.32.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Code System Version : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If applicable, a version descriptor defined specifically for the given
                  						code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall specify how these version strings are formed for each
                  						external code system. If HL7 has not specified how version strings are
                  						formed for a particular coding system, version designations have no
                  						defined meaning for such coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Different versions of one code system must be compatible. Whenever a
                  						code system changes in an incompatible way, it will constitute a new
                  						code system, not simply a different version, regardless of how the
                  						vocabulary publisher calls it.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the publisher of ICD-9 and ICD-10 calls these code
                  						systems, "revision 9" and "revision 10" respectively. However, ICD-10
                  						is a complete redesign of the ICD code, not a backward compatible
                  						version. Therefore, for the purpose of this data type specification,
                  						ICD-9 and ICD-10 are different code systems, not just different
                  						versions. By contrast, when LOINC updates from revision "1.0j" to
                  						"1.0k", HL7 would consider this to be just another version of LOINC,
                  						since LOINC revisions are backwards compatible.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemVersion.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If applicable, a version descriptor defined specifically for the given
                  						code system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						HL7 shall specify how these version strings are formed for each
                  						external code system. If HL7 has not specified how version strings are
                  						formed for a particular coding system, version designations have no
                  						defined meaning for such coding system.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Different versions of one code system must be compatible. Whenever a
                  						code system changes in an incompatible way, it will constitute a new
                  						code system, not simply a different version, regardless of how the
                  						vocabulary publisher calls it.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, the publisher of ICD-9 and ICD-10 calls these code
                  						systems, "revision 9" and "revision 10" respectively. However, ICD-10
                  						is a complete redesign of the ICD code, not a backward compatible
                  						version. Therefore, for the purpose of this data type specification,
                  						ICD-9 and ICD-10 are different code systems, not just different
                  						versions. By contrast, when LOINC updates from revision "1.0j" to
                  						"1.0k", HL7 would consider this to be just another version of LOINC,
                  						since LOINC revisions are backwards compatible.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.codeSystemVersion.nonNull.implies(x.codeSystem.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.displayName"></a>2.32.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Display Name : <a class="termref" href="#dt-ST">ST</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A name or title for the code, under which the sending system shows the
                  						code value to its users.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>displayName</em> is included both as a courtesy to an unaided human
                  						interpreter of a code value and as a documentation of the name used to
                  						display the concept to the user. The display name has no functional
                  						meaning; it can never exist without a code;  and it can never
                  						modify the meaning of <a class="termref" href="#prop-CD.code">code</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							HL7 offers a "print name" in it's predefined vocabulary domains. These
                  							values are suitable for use in the displayName.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Display names may not alter the meaning of the code value. Therefore,
                  							display names should not be presented to the user on a receiving
                  							application system without ascertaining that the display name
                  							adequately represents the concept referred to by the code
                  							value. Communication must not simply rely on the display name. The
                  							display name's main purpose is to support debugging of HL7 protocol
                  							data units (e.g., messages.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.displayName.nonNull.implies(x.code.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A name or title for the code, under which the sending system shows the
                  						code value to its users.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>displayName</em> is included both as a courtesy to an unaided human
                  						interpreter of a code value and as a documentation of the name used to
                  						display the concept to the user. The display name has no functional
                  						meaning; it can never exist without a code;  and it can never
                  						modify the meaning of <a class="termref" href="#prop-CD.code">code</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							HL7 offers a "print name" in it's predefined vocabulary domains. These
                  							values are suitable for use in the displayName.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Display names may not alter the meaning of the code value. Therefore,
                  							display names should not be presented to the user on a receiving
                  							application system without ascertaining that the display name
                  							adequately represents the concept referred to by the code
                  							value. Communication must not simply rely on the display name. The
                  							display name's main purpose is to support debugging of HL7 protocol
                  							data units (e.g., messages.)
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x) {
   x.displayName.nonNull.implies(x.code.nonNull);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PQR.originalText"></a>2.32.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Original Text : <a class="termref" href="#dt-ED">ED</a>, inherited from <a class="termref" href="#dt-CV">CV</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The text or phrase used as the basis for the coding.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The original text exists in a scenario where an originator of the
                  						information does not assign a code, but where the code is assigned
                  						later by a coder (post-coding.)  In the production of a concept
                  						descriptor, original text may thus exist without a code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although post-coding is often performed from free text information,
                  							such as documents, scanned images or dictation, multi-media data is
                  							explicitly not permitted as original text. Also, the original text
                  							property is not meant to be a link into the entire source
                  							document. The link between different artifacts of medical information
                  							(e.g., document and coded result) is outside the scope of this
                  							specification and is maintained elsewhere in the HL7 standards. The
                  							original text is an excerpt of the relevant information in the
                  							original sources, rather than a pointer or exact reproduction. Thus
                  							the original text is to be represented in plain text form.
                  
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em></em> may have a non-NULL original text
                  						property despite having a NULL <a class="termref" href="#prop-CD.code">code</a>. Any <em></em> value
                  						with <a class="termref" href="#prop-CD.code">code</a> of NULL signifies a coding exception. In this case,
                  						<em>originalText</em> is a name or description of the concept that was
                  						not coded. Such exceptional <em></em> values may also contain <a class="termref" href="#prop-CD.translation">translation</a>s.
                  						Such translations directly encode the concept described in <em>originalText</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em></em> can be demoted into an <a class="termref" href="#dt-ST">ST</a>
                  						value representing only the <em>originalText</em> of the <em></em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.originalText.nonNull {
   ((ST)x).equal(x.originalText);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The text or phrase used as the basis for the coding.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The original text exists in a scenario where an originator of the
                  						information does not assign a code, but where the code is assigned
                  						later by a coder (post-coding.)  In the production of a concept
                  						descriptor, original text may thus exist without a code.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							Although post-coding is often performed from free text information,
                  							such as documents, scanned images or dictation, multi-media data is
                  							explicitly not permitted as original text. Also, the original text
                  							property is not meant to be a link into the entire source
                  							document. The link between different artifacts of medical information
                  							(e.g., document and coded result) is outside the scope of this
                  							specification and is maintained elsewhere in the HL7 standards. The
                  							original text is an excerpt of the relevant information in the
                  							original sources, rather than a pointer or exact reproduction. Thus
                  							the original text is to be represented in plain text form.
                  
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Values of type <em></em> may have a non-NULL original text
                  						property despite having a NULL <a class="termref" href="#prop-CD.code">code</a>. Any <em></em> value
                  						with <a class="termref" href="#prop-CD.code">code</a> of NULL signifies a coding exception. In this case,
                  						<em>originalText</em> is a name or description of the concept that was
                  						not coded. Such exceptional <em></em> values may also contain <a class="termref" href="#prop-CD.translation">translation</a>s.
                  						Such translations directly encode the concept described in <em>originalText</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em></em> can be demoted into an <a class="termref" href="#dt-ST">ST</a>
                  						value representing only the <em>originalText</em> of the <em></em> value.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(CD x)
      where x.originalText.nonNull {
   ((ST)x).equal(x.originalText);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="MO"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-MO"></a>2.33 
               </h3>
            </td>
            <td class="body_col">
               <h3>Monetary Amount (MO) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An <em>MO</em> is a quantity expressing the amount of money in some
                  					currency. Currencies are the units in which monetary amounts are
                  					denominated in different economic regions. While the monetary amount
                  					is a single kind of quantity (money) the exchange rates between the
                  					different units are variable.  This is the principle difference
                  					between <a class="termref" href="#dt-PQ">PQ</a> and <em>MO</em>, and the reason why
                  					currency units are not physical units.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-MO-prop-summary">&nbsp;</a>
                     			Table
                     			34: Property Summary of
                     Monetary Amount
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>value</td>
                        <td>REAL</td>
                        <td>
                           							The magnitude of the <em>MO</em> in terms of currency.
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>currency</td>
                        <td>CS</td>
                        <td>
                           							The currency unit as defined in ISO 4217.
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>diffType</td>
                        <td>TYPE</td>
                        <td>
                           						The type of the difference between 2 values of a specific QTY data type.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-MO">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-MO"></a><pre>
type MonetaryAmount alias MO specializes QTY {
           REAL  value;
           CS    currency;
           MO    negated;
           MO    times(REAL x);
   literal ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.value"></a>2.33.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Value : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The magnitude of the <em>MO</em> in terms of <a class="termref" href="#prop-MO.currency">currency</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b><em>MO</em> values are usually precise to 0.01 (one cent, penny, paisa,
                  								etc.)  For large amounts, it is important not to store <em>MO</em> values
                  								in floating point registers, since this may lose
                  								precision. However, this specification does not define the internal
                  								storage of <a class="termref" href="#dt-REAL">REAL</a> as fixed or floating point numbers.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><a class="termref" href="#prop-REAL.precision">REAL.precision</a> is the precision of
                  							the decimal representation, not the precision of the value. <a class="termref" href="#dt-REAL">REAL</a>
                  							has no notion of uncertainty or accuracy. For example,
                  							"1.99 USD" (precision 3) times 7 is "13.93 USD" (precision 4) and
                  							should not be rounded to "13.9" to keep the precision constant.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.currency"></a>2.33.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Currency : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The currency unit as defined in ISO 4217.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-Currency">&nbsp;</a>
                     			Table
                     			35: Domain Currency
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>ARS</td>
                     <td>Argentine Peso</td>
                     <td>Argentine Peso, monetary currency of Argentina</td>
                  </tr>
                  <tr>
                     <td>AUD</td>
                     <td>Australian Dollar</td>
                     <td>Australian Dollar, monetary currency of Australia</td>
                  </tr>
                  <tr>
                     <td>BRL</td>
                     <td>Brazilian Real</td>
                     <td>Brazilian Real, monetary currency of Brazil</td>
                  </tr>
                  <tr>
                     <td>CAD</td>
                     <td>Canadian Dollar</td>
                     <td>Canadian Dollar, monetary currency of Canada</td>
                  </tr>
                  <tr>
                     <td>CHF</td>
                     <td>Swiss Franc</td>
                     <td>Swiss Franc, monetary currency of Switzerland</td>
                  </tr>
                  <tr>
                     <td>CLF</td>
                     <td>Unidades de Formento</td>
                     <td>Unidades de Formento, monetary currency of Chile</td>
                  </tr>
                  <tr>
                     <td>CNY</td>
                     <td>Yuan Renminbi</td>
                     <td>Yuan Renminbi, monetary currency of China</td>
                  </tr>
                  <tr>
                     <td>DEM</td>
                     <td>Deutsche Mark</td>
                     <td>Deutsche Mark, monetary currency of Germany</td>
                  </tr>
                  <tr>
                     <td>ESP</td>
                     <td>Spanish Peseta</td>
                     <td>Spanish Peseta, monetary currency of Spain</td>
                  </tr>
                  <tr>
                     <td>EUR</td>
                     <td>Euro</td>
                     <td>Euro, monetary currency of European Union</td>
                  </tr>
                  <tr>
                     <td>FIM</td>
                     <td>Markka</td>
                     <td>Markka, monetary currency of Finland</td>
                  </tr>
                  <tr>
                     <td>FRF</td>
                     <td>French Franc</td>
                     <td>French Franc, monetary currency of France</td>
                  </tr>
                  <tr>
                     <td>GBP</td>
                     <td>Pound Sterling</td>
                     <td>Pound Sterling, monetary currency of United Kingdom</td>
                  </tr>
                  <tr>
                     <td>ILS</td>
                     <td>Shekel</td>
                     <td>Shekel, monetary currency of Israel</td>
                  </tr>
                  <tr>
                     <td>INR</td>
                     <td>Indian Rupee</td>
                     <td>Indian Rupee, monetary currency of India</td>
                  </tr>
                  <tr>
                     <td>JPY</td>
                     <td>Yen</td>
                     <td>Yen, monetary currency of Japan</td>
                  </tr>
                  <tr>
                     <td>KRW</td>
                     <td>Won</td>
                     <td>Won, monetary currency of Korea (South)</td>
                  </tr>
                  <tr>
                     <td>MXN</td>
                     <td>Mexican Nuevo Peso</td>
                     <td>Mexican Nuevo Peso, monetary currency of Mexico</td>
                  </tr>
                  <tr>
                     <td>NLG</td>
                     <td>Netherlands Guilder</td>
                     <td>Netherlands Guilder, monetary currency of Netherlands</td>
                  </tr>
                  <tr>
                     <td>NZD</td>
                     <td>New Zealand Dollar</td>
                     <td>New Zealand Dollar, monetary currency of New Zealand</td>
                  </tr>
                  <tr>
                     <td>PHP</td>
                     <td>Philippine Peso</td>
                     <td>Philippine Peso, monetary currency of Philippines</td>
                  </tr>
                  <tr>
                     <td>RUR</td>
                     <td>Russian Ruble</td>
                     <td>Russian Ruble, monetary currency of Russian Federation</td>
                  </tr>
                  <tr>
                     <td>THB</td>
                     <td>Baht</td>
                     <td>Baht, monetary currency of Thailand</td>
                  </tr>
                  <tr>
                     <td>TRL</td>
                     <td>Lira</td>
                     <td>Lira, monetary currency of Turkey</td>
                  </tr>
                  <tr>
                     <td>TWD</td>
                     <td>Taiwan Dollar</td>
                     <td>Taiwan Dollar, monetary currency of Taiwan</td>
                  </tr>
                  <tr>
                     <td>USD</td>
                     <td>US Dollar</td>
                     <td>US Dollar, monetary currency of United States</td>
                  </tr>
                  <tr>
                     <td>ZAR</td>
                     <td>Rand</td>
                     <td>Rand, monetary currency of South Africa</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							This table only shows a representative subset of the 
                  							codes defined by ISO 4217. All codes from ISO 4127 are 
                  							valid for this attribute
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.equal"></a>2.33.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Two <em>MO</em> values are equal if both <a class="termref" href="#prop-MO.value">value</a> and
                  							<a class="termref" href="#prop-MO.currency">currency</a> are equal.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(MO x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(x.value.equal(y.value)
             .and(x.unit.equal(y.unit)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.compares"></a>2.33.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Comparability : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Two <em>MO</em> values can be compared to each other (and have an ordering and
                  							difference) if their <a class="termref" href="#prop-MO.currency">currency</a>s are equal.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							If their <a class="termref" href="#prop-MO.currency">currency</a>s are not identical,
                  							the <a class="termref" href="#prop-MO.values">values</a> cannot be
                  							compared. Conversion between currencies is outside the scope of
                  							this specification. In practice, foreign exchange rates are highly
                  							variable not only over long and short amounts of time, but also
                  							depending on location and access to currency trade markets.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(MO x, y)
      where x.nonNull.and(y.nonNull) {
   x.compares.equal(x.currency.equal(y.currency));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.diffType"></a>2.33.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(INT x) {
   x.diffType.implies(MO);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The difference between 2 <em>MO</em>s is another <em>MO</em>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.plus"></a>2.33.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-MO">MO</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Two <em>MO</em>s can be added if their
                  							<a class="termref" href="#prop-MO.currency">currency</a>s are equal.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (MO x, y)
      where x.currency.equal(y.currency) {
   x.plus(y).currency.equal(x.currency);
   x.plus(y).value.equal(x.value.plus(y.value));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.timesREAL"></a>2.33.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Real Multiplication : <a class="termref" href="#dt-MO">MO</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Multiplication with a <a class="termref" href="#dt-REAL">REAL</a> forms a scaled quantity. A scaled
                  							quantity is comparable to its original quantity.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(MO x; REAL r)
      where x.nonNull.and(r.nonNull) {
   x.times(r).value.equal(x.value.times(r));
   x.times(r).currency.equal(x.currency);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-MO.literal"></a>2.33.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The literal form for an <em>MO</em> consists of a currency code string,
                  							optional whitespace, and a <a class="termref" href="#dt-REAL">REAL</a> literal amount.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
MO.literal ST {
   MO           : currency value  { $.currency.equal($1); }
                                    $.value.equal($2);
   CS  currency : ST              { $.currency.value.equal($1);
                                    $.currency.codeSystem
                                    .equal(2.16.840.1.113883.6.9); }
   REAL value   : REAL           { $.value.equal($1); }
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, "USD189.95" is the literal for 189.95 U.S. Dollar.
                  						
               </p>
            </td>
         </tr><a name="CAL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CAL"></a>2.34 
               </h3>
            </td>
            <td class="body_col">
               <h3>Calendar (CAL) specializes <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-CLCY">CLCY</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A calendar is a concept of measuring time in various cycles. Such
                  					cycles are years, months, days, hours, minutes, seconds, and
                  					weeks. Some of these cycles are synchronized and some are not (e.g.,
                  					weeks and months are not synchronized.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					After "rolling the time axis" into these cycles
                  					a calendar expresses a point in time as a sequence
                  					of integer counts of cycles, e.g., for year, month, day, hour,
                  					etc. The calendar is rooted in some conventional start point, called
                  					the "epoch."
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-datyp2fig9.jpg" target="_blank" border="0">Link to wide graphic (opens in a new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A calendar "rolls" the time axis into a complex convolute according to
                  					the calendar periods year (blue), month (yellow), day (green), hour
                  					(red), etc. The cycles need not be aligned, for example, the week (not
                  					shown) is not aligned to the month.<a name="fn-src46"></a><a href="#fn46"><sup style="font-size: smaller">46</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Calendar is defined as a set of calendar cycles, and has a name and a
                  					code. The head of the Calendar is the largest CalendarCycle appearing
                  					right most in the calendar expression. The epoch is the beginning of
                  					that calendar, i.e., the point in time where all calendar cycles are
                  					zero.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
private type Calendar alias CAL specializes SET&lt;CLCY&gt;  {
   CS    name;
   CLCY  head;
   TS    epoch;
};

invariant(CAL c)
      where c.nonNull {
   c.name.nonNull;
   c.contains(c.head);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The calendar definition can be shown as in <a href="#domain-CalendarCycle">Table
                     			36</a>
                  					for the modern Gregorian calendar. The calendar definition table lists a
                  					calendar cycle in each row. The calendar units are dependent on each other and
                  					defined in the value column. The sequence column shows the relationship through
                  					the next property. The other columns are as in the formal calendar cycle
                  					definition.<a name="fn-src47"></a><a href="#fn47"><sup style="font-size: smaller">47</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-CalendarCycle">&nbsp;</a>
                     			Table
                     			36: Domain CalendarCycle
                  </caption>
                  <thead>
                     <tr>
                        <th>name</th>
                        <th>code 1</th>
                        <th>code 2</th>
                        <th>counter</th>
                        <th>digits</th>
                        <th>start</th>
                        <th>condition</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>year&nbsp;</td>
                        <td>Y&nbsp;</td>
                        <td>CY&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>4&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>month of the year&nbsp;</td>
                        <td>M&nbsp;</td>
                        <td>MY&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>month (continuous)&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>CM&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>week (continuous)&nbsp;</td>
                        <td>W&nbsp;</td>
                        <td>CW&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>week of the year&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>WY&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>day of the month&nbsp;</td>
                        <td>D&nbsp;</td>
                        <td>DM&nbsp;</td>
                        <td>3&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>day (continuous)&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>CD&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>day of the year&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>DY&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>3&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>day of the week (begins with Monday)&nbsp;</td>
                        <td>J&nbsp;</td>
                        <td>DW&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>1&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>hour of the day&nbsp;</td>
                        <td>H&nbsp;</td>
                        <td>HD&nbsp;</td>
                        <td>4&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>hour (continuous)&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>CH&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>minute of the hour&nbsp;</td>
                        <td>N&nbsp;</td>
                        <td>NH&nbsp;</td>
                        <td>5&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>minute (continuous)&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>CN&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>second of the minute&nbsp;</td>
                        <td>S&nbsp;</td>
                        <td>SN&nbsp;</td>
                        <td>6&nbsp;</td>
                        <td>2&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>second (continuous)&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>CS&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>0&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr><a name="CLCY"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-CLCY"></a>2.35 
               </h3>
            </td>
            <td class="body_col">
               <h3>Calendar Cycle (CLCY) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>    
                  					A calendar cycle defines one group of decimal digits in the calendar
                  					expression. Examples for calendar cycles are year, month, day, hour,
                  					minute, second, and week.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A calendar cycle has a name and two codes, a one-letter code and a
                  					two-letter code. The property <em>ndigits</em> is the number of
                  					decimal digits occupied in the calendar expression. The property
                  					<em>start</em> specifies where counting starts (i.e., at 0 or 1.)
                  					The <em>next</em> property is the next lower cycle in the order of
                  					the calendar expression. The max(<em>t</em>) property is the
                  					maximum number of cycles at time <em>t</em> (max depends on the
                  					time <em>t</em> to account for leap years and leap seconds.)  The
                  					property value(<em>t</em>) is the integer number of cycles shown
                  					in the calendar expression of time <em>t</em>. The property
                  					sum(<em>t</em>, <em>n</em>) is the sum of <em>n</em>
                  					calendar cycles added to the time <em>t</em>.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
private type CalendarCycle alias CALCY specializes ANY {
   CE     name;
   INT    ndigits;
   INT    start;
   CALCY  next;
   INT    max(TS);
   TS     sum(TS t, REAL r);
   INT    value(TS t);
};

invariant(CALCY c)
      where c.nonNull {
   c.name.nonNull;
   c.start.equal(0).or(c.start.equal(1));
   c.digits.greaterThan(0);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="TS"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-TS"></a>2.36 
               </h3>
            </td>
            <td class="body_col">
               <h3>Point in Time (TS) specializes <a class="termref" href="#dt-QTY">QTY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A quantity specifying a point on the axis of natural time. A point
                  					in time is most often represented as a calendar expression.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Semantically, however, time is independent from calendars and best
                  					described by its relationship to elapsed time (measured as a physical
                  					quantity in the dimension of time).  A <em>TS</em> plus an elapsed
                  					time yields another <em>TS</em>.  Inversely, a <em>TS</em> minus
                  					another <em>TS</em> yields an elapsed time.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					As nobody knows when time began, a <em>TS</em> is conceptualized as
                  					the amount of time that has elapsed from some arbitrary zero-point,
                  					called an epoch.  Because there is no absolute zero-point on the time
                  					axis; natural time is a difference-scale quantity, where only
                  					differences are defined but no ratios. (For example, no <em>TS</em>
                  					is &#8212; absolutely speaking &#8212; "twice as late" as another
                  					<em>TS</em>.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Given some arbitrary zero-point, one can express any point in time as
                  					an elapsed time measured from that offset. Such an arbitrary
                  					zero-point is called an epoch. This epoch-offset form is used as a
                  					semantic representation here, without implying that any system would
                  					have to implement <em>TS</em> in that way. Systems that do not
                  					need to compute distances between <em>TS</em>s will not need any
                  					other representation than a calendar expression literal.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-TS">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-TS"></a><pre>
type PointInTime alias TS specializes QTY {
           PQ   offset;
           CS   calendar;
           INT  precision;
           PQ   timezone;
           BL   equal(ANY x);
  literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.offset"></a>2.36.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Offset from Epoch : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The elapsed time since any constant epoch, measured as a physical
                  							quantity in the dimension of time (i.e., comparable to one second.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x)
      where x.nonNull {
   x.offset.compares(1 s);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							It is not necessary for this specification to define a canonical
                  							epoch; the semantics is the same for any epoch, as long as the epoch
                  							is constant.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b><em>offset</em> may be treated as a purely semantic property that
                  								is not represented in any way other than the calendar literal
                  								expression. However, an ITS may just as well choose to define a
                  								constant epoch and represent <em>TS</em> values as elapsed time
                  								offsets relative to that epoch. However, an ITS using an epoch-offset
                  								representation would still need to communicate the calendar code and
                  								the precision of a calendar representation once other calendars are
                  								supported.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.equal"></a>2.36.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Two <em>TS</em> values are equal if and only if their
                  							<a class="termref" href="#prop-TS.offset">offset</a>s
                  							(relative to the same epoch) are equal.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x, y)
      where x.nonNull.and(y.nonNull) {
   x.equal(y).equal(x.offset.equal(y.offset));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.calendar"></a>2.36.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Calendar : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A code specifying the calendar used in the literal representation of
                  							this <em>TS</em>.<a name="fn-src48"></a><a href="#fn48"><sup style="font-size: smaller">48</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-Calendar">&nbsp;</a>
                     			Table
                     			37: Domain Calendar
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>GREG</td>
                     <td>Gregorian</td>
                     <td>The Gregorian calendar is the calendar in effect in most countries of Christian influence since approximately 1582. This calendar
                        superceded the Julian calendar.
                     </td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The purpose of this property is mainly to faithfully convey what has
                  							been entered or seen by a user in a system originating such a
                  							<em>TS</em> value. <em>calendar</em> also advises any system
                  							rendering a <em>TS</em> value into a literal form of which calendar
                  							to use. However, this is only advice; any system that renders
                  							<em>TS</em> values to users may choose to use the calendar and
                  							literal form demanded by its users rather than the calendar mentioned
                  							in <em>calendar</em>. Hence, <em>calendar</em> is not constant
                  							in communication between systems, the calendar is not part of the
                  							equality test.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For the purpose of defining the relationship between calendar
                  							expression and epoch/offset form, two private data types,
                  							<a class="termref" href="#dt-CAL">CAL</a> and <a class="termref" href="#dt-CLCY">CLCY</a>
                  							are defined. These calendar data types
                  							exist only for defining this specification. These private data types
                  							may not be used at all outside this specification.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.precision"></a>2.36.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Precision of the Calendar Literal Form : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The number of significant digits of the calendar expression
                  							representation.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>precision</em> is formally defined based on the <a class="termref" href="#prop-TS.literal">literal</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>precision</em> is only the precision of a decimal digit
                  							representation, <em>not the accuracy of the <em>TS</em>
                     							value</em>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The purpose of <em>precision</em>
                  							is to faithfully capture the whole information presented to humans in
                  							a calendar expression. The number of digits shown conveys information
                  							about the uncertainty (i.e., precision and accuracy) of a measured
                  							<em>TS</em>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								The precision of the representation is independent from uncertainty
                  								(precision accuracy) of a measurement result. If the uncertainty of a
                  								measurement result is important, one should specify uncertain values
                  								as <a class="termref" href="#dt-PPD">PPD</a></blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>precision</em> is dependent on <a class="termref" href="#prop-TS.calendar">calendar</a>.
                  							A given <em>precision</em> relative to one calendar does not mean the same in another
                  							calendar with different periods.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example "20000403" has 8 significant digits <em>in the
                     							representation</em>, but the <em>uncertainty of the value</em>
                  							may be in any digit shown or not shown, i.e., the uncertainty may be
                  							to the day, to the week, or to the hour. Note that external
                  							representations <em>should</em> adjust their representational
                  							precision with the uncertainty of the value. However, since the
                  							precision in the digit string depends on the calendar and is granular
                  							to the calendar periods, uncertainty may not fall into that grid
                  							(e.g., 2000040317 is an adequate representation for the value between
                  							2000040305 and 2000040405.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								A character based ITS need not
                  								represent <em>precision</em> as an explicit attribute if <em>TS</em>
                  								values are represented as literal calendar expressions. A <em>TS</em>
                  								representation must not produce more or less significant digits
                  								than were originally in that value. Conformance can be tested through
                  								round-trip encoding - decoding - encoding.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.timezone"></a>2.36.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Timezone Offset : <a class="termref" href="#dt-PQ">PQ</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The difference between the local time in that time zone and Universal
                  							Coordinated Time (UTC, formerly called Greenwich Mean Time, GMT). The
                  							time zone is a <a class="termref" href="#dt-PQ">PQ</a> in the dimension of time (i.e.,
                  							comparable to one second.)  A zero time zone value specifies UTC. The
                  							time zone value does not permit conclusions about the geographical
                  							longitude or a conventional time zone name.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, 200005121800-0500 may be eastern standard time (EST) in
                  							Indianapolis, IN, or central daylight savings time (CDT) in Decatur,
                  							IL. Furthermore in other countries having other latitude the time
                  							zones may be named differently.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x, y)
      where x.nonNull.and(y.nonNull) {
   x.timezone.compares(1 s);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							When <em>timezone</em> is NULL (unknown), "local time" is
                  							assumed. However, "local time" is always local to some place, and
                  							without knowledge of that place, the time zone is unknown. Hence, a
                  							local time cannot be converted into UTC. <em>timezone</em> should be
                  							specified for all <em>TS</em> values in order to avoid a significant
                  							loss of precision when <em>TS</em>s are compared. The difference of
                  							two local times where the locality is unknown has an error of
                  							&plusmn;12 hours.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							In administrative data context, some time values do not carry a time
                  							zone. For a date of birth in administrative data, for example, it
                  							would be incorrect to specify <em>timezone</em>, since this may effectively
                  							change the date of birth when converted into other time zones. For
                  							such administrative data the time zone is NULL (not applicable.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.diffType"></a>2.36.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>DifferenceDataType : <a class="termref" href="#dt-TYPE">TYPE</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x) {
   x.diffType.implies(PQ);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The difference between 2 <em>TS</em>s is a <a class="termref" href="#dt-PQ">PQ</a> in
                  							the dimension of time.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.plus"></a>2.36.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-TS">TS</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A <em>TS</em> plus an elapsed time (i.e., <a class="termref" href="#dt-PQ">PQ</a> in the
                  							dimension of time) is a <em>TS</em>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x, PQ t)
      where x.nonNull.and(t.compares(1 s)) {
   x.plus(t).offset.equal(x.offset.plus(t));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.minus"></a>2.36.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Difference : <a class="termref" href="#dt-QTY">QTY</a>, inherited from <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The difference between two <em>TS</em>s is an elapsed time.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(TS x)
      where x.nonNull {
   x.minus(y).offset.equal(
      x.offset.plus(y.offset.negated));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-TS.literal"></a>2.36.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>TS</em> literals are simple calendar expressions, as defined by
                  							the calendar definition table. By default, the western (Gregorian)
                  							calendar shall be used (<a href="#domain-CalendarCycle">Table
                     			36</a>).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For the default Gregorian calendar the calendar expression literals of
                  							this specification conform to the constrained ISO 8601 that is defined
                  							in ISO 8824 (ASN.1) under clause 32 (generalized time) and to the HL7
                  							Version 2 TS data type.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Calendar expression literals are sequences of integer numbers ordered
                  							according to the "counter" column of <a href="#domain-CalendarCycle">Table
                     			36</a>.
                  							Periods with lower order numbers stand to the left of periods with higher order
                  							numbers. Periods with no assigned order number cannot occur in the calendar
                  							expression for <em>TS</em>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The "digits" column of <a href="#domain-CalendarCycle">Table
                     			36</a>
                  							specifies the exact number of digits for the counter number for any
                  							period.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Thus, <a href="#domain-CalendarCycle">Table
                     			36</a> specifies that western
                  							calendar expressions begin with the 4-digit year (beginning counting
                  							at zero); followed by the 2-digit month of the year (beginning
                  							counting at one); followed by the 2-digit day of the month (beginning
                  							with one); followed by the 2-digit hour of the day (beginning with
                  							zero); and so forth. For example, "200004010315" is a valid expression
                  							for April 1, 2000, 3:15 am.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A calendar expression can be of variable precision, omitting parts
                  							from the right.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, "20000401" is precise only to the day of the month.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The least defined calendar period (i.e. the second) may be written as
                  							a <a class="termref" href="#dt-REAL">REAL</a>, with the number of integer digits specified, followed
                  							by the decimal point and any number of fractional digits.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, "20000401031520.34" means April 1, 2000, 3:15 and 20.34
                  							seconds.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							When other calendars are used in the future, a prefix "GREG:" can
                  							be placed before the western (Gregorian) calendar expression to
                  							disambiguate from other calendars. Each calendar shall have its own
                  							prefix. However, the western calendar is the default if no prefix is
                  							present.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							In the modern Gregorian calendar (and all calendars where time of day
                  							is based on UTC), the calendar expression may contain a time zone
                  							suffix. The time zone suffix begins with a plus (+) or minus (-)
                  							followed by digits for the hour and minute cycles. UTC is designated
                  							as offset "+00" or "-00"; the ISO 8601 and ISO 8824 suffix "Z" for UTC
                  							is not permitted.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
TS.literal ST {
   TS   : cal timestamp($1)                  { $.equal($2); }
        | timestamp(GREG)                    { $.equal($1); };

   TS timestamp(Calendar C)
        : cycles(C.head, C.epoch) zone(C)    { $.equal($1.minus($2)); }
                                               $.timezone.equal($2); }
        | cycles(C.head, C.epoch)            { $.equal($1);
                                               $.timezone.unknown; };
   Calendar cal
        : /[a-zA-Z_][a-zA-Z0-9_]*:/          { $.equal($1); };

   TS cycles(CalendarCycle c, TS t)
        : cycle(c, t) cycles(c.next, $1)     { $.equal($2); }
        | cycle(c, t) "." REAL.fractional    { $.equal(c.sum($1, $3));
                                               $.precision.equal(
                                                  t.precision.plus($3.precision)); }
        | cycle(c, t)                        { $.equal($1); };

   TS cycle(CalendarCycle c, TS t)
        : /[0-9]{c.ndigits}/                 { $.equal(c.sum(t, $1));
                                                $.precision.equal(
                                                   t.precision.plus(c.ndigits)); };

   PQ zone(Calendar C)
        : "+" cycles(C.zonehead, C.epoch)    { $.equal($2.minus(C.epoch)); }
        | "-" cycles(C.zonehead, C.epoch)    { $.equal(C.epoch.minus($2)); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <!--divN/head-->
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h2><a name="datyp2gencol"></a>3 
               </h2>
            </td>
            <td class="body_col">
               <h2>Generic Collections</h2>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-genericCollections.gif" target="_blank" border="0">Generic Collection Data Types (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  				This section defines data types that can "collect" other data values,
                  				Set, Sequence, Bag and Interval.<a name="fn-src49"></a><a href="#fn49"><sup style="font-size: smaller">49</sup></a> These collection types are defined as generic
                  				(parameterized) types. The concept of generic types is described in
                  				<a href="#generics">Generic Data Types
                     			(&sect;
                     			1.9.5 )</a>.
                  			
               </p>
            </td>
         </tr><a name="SET"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-SET"></a>3.1 
               </h3>
            </td>
            <td class="body_col">
               <h3>Set (SET) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A value that contains other distinct values in no particular order.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-SET">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-SET"></a><pre>
template&lt;ANY T&gt;
type Set&lt;T&gt; alias SET&lt;T&gt; specializes ANY {
             BL      contains(T element);
             BL      isEmpty;
             BL      notEmpty;
             BL      contains(SET&lt;T&gt; subset);
             INT     cardinality;
             SET&lt;T&gt;  union(SET&lt;T&gt; otherset);
             SET&lt;T&gt;  union(T element);
             SET&lt;T&gt;  except(T element);
             SET&lt;T&gt;  except(SET&lt;T&gt; otherset);
             SET&lt;T&gt;  intersection(SET&lt;T&gt; otherset);
  literal    ST;
  promotion  SET&lt;T&gt;  (T x);
             IVL&lt;T&gt;  hull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.containsElement"></a>3.1.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Contains Element : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A relation of the set with its elements, true if the given value is an
                  							element of the set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							This is the primitive semantic property of a set, based on which all
                  							other properties are defined.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  								A set may only contain distinct non-NULL elements. Exceptional values
                  								(NULL-values) cannot be elements of a set.
                  							
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; s, T n)
      where s.nonNull.and(n.isNull) {
   s.contains(n).not;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.containsSet"></a>3.1.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Contains Subset : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The relation between a set and its subsets, where each element in the
                  							subset is also an element of the superset.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; superset, subset) 
      where superset.nonNull.and(subset.nonNull)
         superset.contains(subset).equal(
      forall(T element) where subset.contains(element) {
         superset.contains(element);      
	     });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							This implies that the empty set is a subset of every set including
                  							itself.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.notEmpty"></a>3.1.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Not-Empty : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong> 
                  							A predicate indicating that this set contains elements.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; set)
      where set.nonNull {
   set.notEmpty.equal(exists(T element) {
      set.contains(element);
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.isEmpty"></a>3.1.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>The Empty Set : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A predicate indicating that this set has no elements (negation of the
                  							<a class="termref" href="#prop-SET.notEmpty">notEmpty</a>. The
                  							empty set is a proper set value, <em>not</em> an exceptional
                  							(NULL) value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; set)
      where set.nonNull {
   set.isEmpty.equal(notEmpty.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.cardinality"></a>3.1.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Cardinality : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>      
                  							The cardinality of a set is the number of distinct elements in the set.    
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; set)
      where set.nonNull {
   exists(T element) where set.contains(element) {
      set.cardinality.equal(set.except(element)
                     .cardinality.successor);
         };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The cardinality definition is not sufficient since it doesn't converge
                  							for uncountably infinite sets (<a class="termref" href="#dt-REAL">REAL</a>, <a class="termref" href="#dt-PQ">PQ</a>, 
                  							etc.) and it doesn't terminate for infinite sets. In
                  							addition, the definition of integer number type in this specification
                  							is incomplete for these cases, as it doesn't account for
                  							infinities. Finally the cardinality value is an example where it would
                  							be necessary to distinguish the cardinality &#8501;<sub>0</sub> 
                  							(<em>aleph</em><sub>0</sub>) of countably infinite sets
                  							(e.g., <a class="termref" href="#dt-INT">INT</a>) from &#8501;<sub>1</sub>
                  							(<em>aleph</em><sub>1</sub>), the cardinality of uncountable sets 
                  							(e.g., <a class="termref" href="#dt-REAL">REAL</a>, <a class="termref" href="#dt-PQ">PQ</a>).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.union"></a>3.1.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Union : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A union of two sets (component sets) is a set where each of the
                  							union's elements also is an element of either one component set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; x, y, z)
      where x.nonNull.and(y.nonNull).and(z.nonNull) {
   x.union(y).equal(z).equal(forall(T e) {
      z.contains(e).equal(x.contains(e).or(y.contains(e)));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.unionElement"></a>3.1.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Include Element : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A union of a set and an element.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; set, singletonset, T element)
      where set.nonNull.and(element.nonNull)
               .and(singletonset.cardinality.isOne)
               .and(singletonset.contains(element)) {
   set.union(element).equal(set.union(singleton));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.difference"></a>3.1.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Set Difference : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The difference of this set and its subtracting set is the set that
                  							contains all elements of this set that are not elements of the
                  							subtracting set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; x, y, z)
      where x.nonNull.and(y.nonNull).and(z.nonNull) {
   x.except(y).equal(z).equal(forall(T e) {
      z.contains(e).equal(x.contains(e).and(y.contains(e).not));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.exceptElement"></a>3.1.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Exclude Element : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							The difference between this set and an element value is the set
                  							that contains all elements of this set except for the subtracting
                  							element value. If the element value is not contained in this set,
                  							the difference is equal to this set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; x, z; T d)
      where z.nonNull.and(z.nonNull).and(d.nonNull) {
   x.except(d).equal(z).equal(forall(T e) {
      z.contains(e).equal(x.contains(e).and(d.equal(e).not));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.intersect"></a>3.1.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Intersection : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							The intersection between two sets is a set containing all and only
                  							those elements that are contained in both of the operand sets.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SET&lt;T&gt; x, y, z)
      where x.nonNull.and(y.nonNull).and(z.nonNull) {
   x.intersection(y).equal(z).equal(forall(T e) {
      z.contains(e).equal(x.contains(e).and(y.contains(e)));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.literal"></a>3.1.11 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							When the element type T has a literal form, the set of T elements has
                  							a literal form, wherein the elements of the set are enumerated within
                  							curly braces and separated by semicolon characters.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
SET&lt;T&gt;.literal ST {
   SET&lt;T&gt;          : "{" elements "}"   { $.equal($2); };
   SET&lt;T&gt; elements : elements ";" T     { $.except($2).equal($1); }
                  | T                   { $.contains($1);
                                          $.except($1).isEmpty; };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								This literal form for sets is only practical for relatively small
                  								enumerable sets; this does not mean, however, that all sets are
                  								relatively small enumerations of elements.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="table-SET.literal.example">&nbsp;</a>
                     			Table
                     			38: Example
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">literal</th>
                        <th colspan="1">meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">{1; 3; 5; 7; 19}</td>
                        <td colspan="1">a set of integer numbers or real numbers</td>
                     </tr>
                     <tr>
                        <td colspan="1">{3; 1; 5; 19; 7}</td>
                        <td colspan="1">the same set of integer numbers or real numbers</td>
                     </tr>
                     <tr>
                        <td colspan="1">{1.2 m; 2.67 m; 17.8 m}</td>
                        <td colspan="1">a set of discrete physical quantities</td>
                     </tr>
                     <tr>
                        <td colspan="1">{apple; orange; banana}</td>
                        <td colspan="1">a set of character strings</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								A character-based ITS <em>should</em> choose a different literal
                  								form for sets if the Implementation Technology has a more native
                  								literal form for such collections.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.promotionT"></a>3.1.12 
               </h4>
            </td>
            <td class="body_col">
               <h4>Promotion of Element Values to Sets : <a class="termref" href="#dt-SET">SET</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A data value of type T can be promoted into a trivial set of T with
                  							that data value as its only element.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(T x) {
   ((SET&lt;T&gt;)x).contains(x);
   ((SET&lt;T&gt;)x).except(x).isEmpty;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SET.hull"></a>3.1.13 
               </h4>
            </td>
            <td class="body_col">
               <h4>Convex Hull of Totally Ordered Sets : <a class="termref" href="#dt-IVL">IVL</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Sets of quantities may be totally ordered sets when there is an order
                  							relationship defined between any two elements in the set. Note that
                  							"ordered set" does not mean the same as Sequence (<a class="termref" href="#dt-LIST">LIST</a>). 
                  							For example, the set {3; 2; 4; 88; 1} is an ordered
                  							set. The ordering of the elements in the set notation is still
                  							irrelevant, but elements can be compared to establish an order (1; 2;
                  							4; 88).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Totally ordered sets have convex hull. A convex hull of a totally
                  							ordered set <em>S</em> is the smallest interval that is a superset
                  							of <em>S</em>. This concept is going to be important later on.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type Set&lt;QTY&gt; alias SET&lt;QTY&gt; {
   BL            totallyOrdered;
   IVL&lt;T&gt;  hull;
};

invariant(SET&lt;QTY&gt; s)
      where s.nonNull {
   s.totallyOrdered.equal(forall(QTY x, y)
         where s.contains(x).and(s.contains(y)) {
      x.compares(y); });
};

invariant(SET&lt;QTY&gt; s)
      where s.totallyOrdered {
   s.hull.contains(s);
   forall(T e)
         where s.contains(e) {
      s.hull.low.lessOrEqual(e);
      e.lessOrEqual(s.hull.high);
      };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Note that hull is defined if and only if the <em>actual</em> set
                  							is a totally ordered set. The data type of the elements itself need
                  							not be totally ordered. For example, the data type <a class="termref" href="#dt-PQ">PQ</a> is 
                  							only partially ordered (since only quantities of the
                  							same kind can be compared), but a <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-PQ">PQ</a>&gt; may
                  							still be totally ordered (if it contains only
                  							comparable quantities.) For example, the convex hull of {4 s, 20 s, 55
                  							s} is [4 s;55 s]; the convex hull of {"apples"; "oranges"; "bananas"}
                  							is undefined because the elements have no order relationship among
                  							them; and the convex hull of {2 m; 4 m; 8 s} is likewise undefined,
                  							because it is not <em>totally</em> ordered (seconds are not
                  							comparable with meters.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-datyp2fig11.jpg" target="_blank" border="0">Convex Hull of a Totally Ordered Set (link to graphic opens in a  new window)</a></td>
         </tr><a name="LIST"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-LIST"></a>3.2 
               </h3>
            </td>
            <td class="body_col">
               <h3>Sequence (LIST) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A value that contains other discrete (but not necessarily distinct) values in a defined sequence. 
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-LIST">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-LIST"></a><pre>
template&lt;ANY T&gt;
type Sequence&lt;T&gt; alias LIST&lt;T&gt; specializes ANY {
             T        head;
             LIST&lt;T&gt;  tail;
             BL       isEmpty;
             BL       notEmpty;
             T        item(INT index);
             BL       contains(T item);
             INT      length;
  literal    ST;
  promotion  LIST&lt;T&gt;  (T x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A sequence may contain NULL values as items.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.head"></a>3.2.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Head Item : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The first item in this sequence. The <em>head</em> is a definitional
                  							property for the semantics of the sequence.  
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.tail"></a>3.2.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Tail Sequence : <a class="termref" href="#dt-LIST">LIST</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The sequence following the first item in this sequence. The
                  							<em>tail</em> is a definitional property for the semantics of the
                  							sequence.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.isEmpty"></a>3.2.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Empty Sequence : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A predicate that is <em>true</em> if this sequence is an empty
                  							sequence, i.e., if it contains no items.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Notice the difference between empty-sequence and NULL: an empty
                  							sequence is a proper sequence, not a null-value.  
                  							
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; x)
      where x.isEmpty {
   x.head.isNull;
   x.tail.isNull;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Notice that head and tail being NULL is only a necessary condition but
                  							not sufficient for determining an empty list, since a sequence may
                  							contain NULL-values as items, this condition can mean that this list
                  							has only a head item that happens to be NULL.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.notEmpty"></a>3.2.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Not-Empty Sequence : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A predicate that is <em>true</em> if this sequence is
                  							not-empty. Negation of <a class="termref" href="#prop-LIST.isEmpty">isEmpty</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; x)
      where x.nonNull {
   x.notEmpty.equal(x.isEmpty.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.item"></a>3.2.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Item by Index : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The item at the given sequential position (index) in the sequence. The
                  							index zero refers to the first element (head) of the sequence.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; list; INT index)
      where list.nonNull.and(index.nonNegative) {
   list.isEmpty.implies(list.item(index).isNull);
   list.notEmpty.and(index.isZero)
       .implies(list.item(index).equal(list.head));
   list.notEmpty.and(index.nonZero)
       .implies(list.item(index).equal(
          list.tail.item(index.predecessor)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.contains"></a>3.2.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Contains Item : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A predicate that is <em>true</em> if this sequence contains the
                  							given item value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; list; T item)
      where list.nonNull {
   list.isEmpty.implies(list.contains(item).not);
   list.nonEmpty.and(item.nonNull).implies(list.contains(item).equal(
      list.head.equal(item).or(list.tail.contains(item))));
      list.notEmpty.and(item.isNull).implies(list.contains(item).equal(
         list.head.isNull.or(list.tail.contains(item)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.length"></a>3.2.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Length : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The number of elements in the sequence. NULL elements are counted as
                  							regular sequence elements.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; list)
      where x.nonNull {
   list.isEmpty.equal(list.length.isZero);
   list.notEmpty.equal(list.length.equal(
      list.tail.length.successor));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.equal"></a>3.2.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Equality : <a class="termref" href="#dt-BL">BL</a>, inherited from <a class="termref" href="#dt-ANY">ANY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Two lists are equal if and only if they are both empty, or if both
                  							their head and their tail are equal.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(LIST&lt;T&gt; x, y)
      where x.nonNull.and(y.nonNull) {
   x.isEmpty.and(y.isEmpty).implies(x.equal(y));
   x.notEmpty.and(y.notEmpty).and(x.head.nonNull)
      .implies(x.equal(y).equal(
         x.head.equal(y.head).and(x.tail.equal(y.tail))));
   x.notEmpty.and(y.notEmpty).and(x.head.isNull)
             .implies(x.equal(y).equal(
                y.heas.isNull.and(x.tail.equal(y.tail))));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.literal"></a>3.2.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							When the element type T has a literal form, the sequence <em>LIST</em>
                  							has a literal form. List elements
                  							are enumerated, separated by semicolon, and enclosed in parentheses.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
LIST&lt;T&gt;.literal ST {
   LIST&lt;T&gt; : "(" elements ")"        { $.equal($2); }
           | "(" ")"                 { $.isEmpty; };
   LIST&lt;T&gt; elements
           : T ";" elements          { $.head.equal($1);
                                       $.tail.equal($3); }
           | T                       { $.head.equal($1);
                                       $.tail.isEmpty; };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="table-LIST.literal.example">&nbsp;</a>
                     			Table
                     			39: Examples
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">literal</th>
                        <th colspan="1">meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">(1; 3; 5; 7; 19)</td>
                        <td colspan="1">a sequence of integer numbers or real numbers</td>
                     </tr>
                     <tr>
                        <td colspan="1">(3; 1; 5; 19; 7)</td>
                        <td colspan="1">a different sequence of integer numbers or real numbers</td>
                     </tr>
                     <tr>
                        <td colspan="1">(1.2 m; 17.8 m; 2.67 m)</td>
                        <td colspan="1">a sequence of discrete physical quantities</td>
                     </tr>
                     <tr>
                        <td colspan="1">(apple; orange; banana)</td>
                        <td colspan="1">a sequence of character strings</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								a character-based ITS <em>should</em> choose a different literal
                  								form for sequences if the Implementation Technology has a more native
                  								literal form for such collections.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-LIST.promotionT"></a>3.2.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Promotion of Item Values to Sequences : <a class="termref" href="#dt-LIST">LIST</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A data value of type T can be promoted into a trivial sequence of T with
                  							that data value as its only item.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(T x) {
   ((LIST&lt;T&gt;)x).head.equal(x);
   ((LIST&lt;T&gt;)x).tail.isEmpty;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="GLIST"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-GLIST"></a>3.3 
               </h3>
            </td>
            <td class="body_col">
               <h3>GeneratedSequence (GLIST) specializes <a class="termref" href="#dt-LIST">LIST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A periodic or monotone sequence of values generated from a few
                  					parameters, rather than being enumerated. Used to specify regular
                  					sampling points for biosignals.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type GeneratedSequence&lt;QTY T&gt; alias GLIST specializes LIST&lt;T&gt; {
   T    head;
   QTY  increment;
   INT  period;
   INT  denominator;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-GLIST-prop-summary">&nbsp;</a>
                     			Table
                     			40: Property Summary of
                     GeneratedSequence
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>head</td>
                        <td>T</td>
                        <td>
                           							The first item in this sequence. The <em>head</em> is a definitional
                           							property for the semantics of the sequence.  
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>increment</td>
                        <td>QTY</td>
                        <td>
                           						The difference between one value and its previous different value.
                           						For example, to generate the sequence (1; 4; 7; 10; 13; ...) the
                           						increment is 3; likewise to generate the sequence (1; 1; 4; 4; 7; 7;
                           						10; 10; 13; 13; ...) the increment is also 3.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>period</td>
                        <td>INT</td>
                        <td>
                           						If non-NULL, specifies that the sequence alternates, i.e., after this
                           						many increments, the sequence item values roll over to start from the
                           						initial sequence item value. For example, the sequence (1; 2; 3; 1; 2;
                           						3; 1; 2; 3; ...) has period 3; also the sequence (1; 1; 2; 2; 3; 3; 1;
                           						1; 2; 2; 3; 3; ...) has period 3 too.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>denominator</td>
                        <td>INT</td>
                        <td>
                           						The the integer by which the index for the sequence is divided,
                           						effectively the number of times the sequence generates the same
                           						sequence item value before incrementing to the next sequence item
                           						value. For example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
                           						3; ...)  the denominator is 3.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The item at a certain index in the list is calculated by performing an
                  					integer division on the index (<em>i</em>) with the
                  					<a class="termref" href="#prop-GLIST.denominator">denominator</a> (<em>d</em>) and then take that
                  					value's remainder with the <a class="termref" href="#prop-GLIST.period">period</a>
                  					(<em>p</em>). Multiply this value with the
                  					<a class="termref" href="#prop-GLIST.increment">increment</a> (<em>&#916;x</em>) and add to the
                  					<a class="termref" href="#prop-GLIST.head">head</a> (<em>x</em><sub>0</sub>.)
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  <p><em>x</em><sub><em>i</em></sub>=<em>x</em><sub>0</sub>
                     						+ <em>&#916;x</em> &times; (<em>i</em>/<em>d</em>)
                     						mod <em>p</em></p>
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GLIST&lt;T&gt; list, INT index)
      where list.nonNull.and(index.nonNull) {
   list.period.nonNull.implies(list.item(index).equal(
      list.head.plus(item.dividedBy(list.increment.denominator)
          .remainder(list.period)).times(increment)));
   list.period.isNull.implies(list.item(index).equal(
      list.head.plus(item.dividedBy(list.increment.denominator))
          .times(increment)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-GLIST.head"></a>3.3.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Head Item : T, inherited from <a class="termref" href="#dt-LIST">LIST</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						This is the start-value of the generated list.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-GLIST.increment"></a>3.3.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Increment : <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The difference between one value and its previous different value.
                  						For example, to generate the sequence (1; 4; 7; 10; 13; ...) the
                  						increment is 3; likewise to generate the sequence (1; 1; 4; 4; 7; 7;
                  						10; 10; 13; 13; ...) the increment is also 3.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GLIST&lt;T&gt; x) {
   x.increment.dataType.implies(T.diffType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-GLIST.period"></a>3.3.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Period Step Count : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						If non-NULL, specifies that the sequence alternates, i.e., after this
                  						many increments, the sequence item values roll over to start from the
                  						initial sequence item value. For example, the sequence (1; 2; 3; 1; 2;
                  						3; 1; 2; 3; ...) has period 3; also the sequence (1; 1; 2; 2; 3; 3; 1;
                  						1; 2; 2; 3; 3; ...) has period 3 too.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The period allows to repeatedly sample the same sample space.  The
                  						"waveform" of this periodic generator is always a "saw", just like the
                  						x-function of your oscilloscope.<a name="fn-src50"></a><a href="#fn50"><sup style="font-size: smaller">50</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-GLIST.denominator"></a>3.3.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Denominator : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The the integer by which the index for the sequence is divided,
                  						effectively the number of times the sequence generates the same
                  						sequence item value before incrementing to the next sequence item
                  						value. For example, to generate the sequence (1; 1; 1; 2; 2; 2; 3; 3;
                  						3; ...)  the denominator is 3.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The use of the denominator is to allow multiple generated sequences to
                  						periodically scan a multidimensional space. For example, an (abstract)
                  						TV screen uses 2 such generators for the columns and rows of
                  						pixels. For instance, if there are 200 scan lines and 320 raster
                  						colunmns, the column-generator would have denominator 1 and the
                  						line-generator would have denominator 320.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="table-GLIST.example">&nbsp;</a>
                     			Table
                     			41: Examples for Generated Sequences
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">head</th>
                        <th colspan="1">increment</th>
                        <th colspan="1">denominator</th>
                        <th colspan="1">period</th>
                        <th colspan="1">meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">0</td>
                        <td colspan="1">1</td>
                        <td colspan="1">1</td>
                        <td colspan="1">&#8734;</td>
                        <td colspan="1">The identity-sequence where each item is equal to its index.</td>
                     </tr>
                     <tr>
                        <td colspan="1">198706052000</td>
                        <td colspan="1">2 hour</td>
                        <td colspan="1">1</td>
                        <td colspan="1">&#8734;</td>
                        <td colspan="1">
                           								Sequence starting on June 5, 1987 at 7 PM and
                           								incrementing every two hours: 9 PM, 11 PM, 1 AM (June 6), 3
                           								AM, 5 AM, and so on.
                           							
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">0 V</td>
                        <td colspan="1">1 mV</td>
                        <td colspan="1">1</td>
                        <td colspan="1">100</td>
                        <td colspan="1">
                           								The x-wave of a digital oscillograph scanning between
                           								0 and 100 mV in 100 steps of 1 mV. The frequency is unknown
                           								from these data as we do not know how much time elapses
                           								between each step of the index.
                           							
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">2002072920300</td>
                        <td colspan="1">100 us</td>
                        <td colspan="1">1</td>
                        <td colspan="1">&#8734;</td>
                        <td colspan="1">
                           								A timebase from June 29,
                           								2002 at 8:30 PM with 100 us between each steps of the
                           								index. If combined with the previous generator as a second
                           								sampling dimension this would now describe our digital
                           								oscilloscope's x-timebase as 1 mV per 100 us. At 100 steps
                           								per period, the period is 10 ms, which is equal to a
                           								frequency of 100 Hz.
                           							
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">0 V</td>
                        <td colspan="1">1 mV</td>
                        <td colspan="1">100</td>
                        <td colspan="1">100</td>
                        <td colspan="1">
                           								Combining this generator to the previous two generators
                           								could describe a three-dimensional sampling space with two
                           								voltages and time. This generator also steps at 1 mV and has
                           								100 steps per period, however, it only steps every 100 index
                           								increments, so, the first voltage generator makes one full
                           								cycle before this generator is incremented. One can think of
                           								the two voltages as "rows" and "columns" of a "sampling
                           								frame". With the previous generator as the timebase, this
                           								results in a scan of sampling frames of 100 mV &times; 100
                           								mV with a framerate of 1 Hz.
                           							
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr><a name="SLIST"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-SLIST"></a>3.4 
               </h3>
            </td>
            <td class="body_col">
               <h3>SampledSequence (SLIST) specializes <a class="termref" href="#dt-LIST">LIST</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A sequence of sampled values scaled and translated from a list of
                  					integer values.  Used to specify sampled biosignals.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
type SampledSequence&lt;QTY T&gt; alias SLIST specializes LIST&lt;T&gt; {
   T          origin;
   QTY        scale;
   LIST&lt;INT&gt;  digits;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-SLIST-prop-summary">&nbsp;</a>
                     			Table
                     			42: Property Summary of
                     SampledSequence
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>origin</td>
                        <td>T</td>
                        <td>
                           						The origin of the list item value scale, i.e., the physical quantity
                           						that a zero-digit in the sequence would represent.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>scale</td>
                        <td>QTY</td>
                        <td>
                           						A ratio-scale quantity that is factored out of the digit sequence.
                           					
                        </td>
                     </tr>
                     <tr>
                        <td>digits</td>
                        <td>LIST&lt;INT&gt;</td>
                        <td>
                           						A sequence of raw digits for the sample values. This is typically the
                           						raw output of an A/D converter.
                           					
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The item at a certain index (<em>i</em>) in the list is calculated
                  					by multiplying the item at the same index in the
                  					<a class="termref" href="#prop-SLIST.digits">digits</a> sequence
                  					(<em>d</em><sub><em>i</em></sub>) with the
                  					<a class="termref" href="#prop-SLIST.scale">scale</a> (<em>s</em>)
                  					and then add that value to the <a class="termref" href="#prop-SLIST.origin">origin</a>
                  					(<em>x</em><sub><em>o</em></sub>).
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <blockquote>
                  <p><em>x</em><sub><em>i</em></sub>=<em>x</em><sub><em>o</em></sub> + <em>s</em>
                     						&times; <em>d</em><sub><em>i</em></sub></p>
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SLIST&lt;T&gt; list, INT index)
      where list.nonNull.and(index.nonNegative) {
   list.item(index).equal(
      list.scale.times(digits.item(index))
          .plus(list.origin));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SLIST.origin"></a>3.4.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Scale Origin : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The origin of the list item value scale, i.e., the physical quantity
                  						that a zero-digit in the sequence would represent.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SLIST.scale"></a>3.4.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Scale Factor : <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A ratio-scale quantity that is factored out of the digit sequence.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(SLIST&lt;T&gt; x) {
   x.scale.dataType.implies(T.diffType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-SLIST.digits"></a>3.4.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Sampled Digits : <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-INT">INT</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						A sequence of raw digits for the sample values. This is typically the
                  						raw output of an A/D converter.
                  					
               </p>
            </td>
         </tr><a name="BAG"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-BAG"></a>3.5 
               </h3>
            </td>
            <td class="body_col">
               <h3>Bag (BAG) specializes <a class="termref" href="#dt-ANY">ANY</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An unordered collection of values, where each value can be contained
                  					more than once in the collection.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-BAG">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-BAG"></a><pre>
template&lt;ANY T&gt;
type Bag&lt;T&gt; alias BAG&lt;T&gt; specializes ANY {
              INT     contains(T kind);
              BL      isEmpty;
              BL      notEmpty;
              BAG&lt;T&gt;  plus(BAG&lt;T&gt; x);
              BAG&lt;T&gt;  minus(BAG&lt;T&gt; x);
   promotion  BAG&lt;T&gt;  (T x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						A <em>BAG</em> can be represented in two ways. Either as a simple enumeration
                  						of elements, including repeated elements, or as a "compressed bag"
                  						whereby the content of the <em>BAG</em> is listed in pairs of element value and
                  						number. A histogram showing absolute frequencies is a <em>BAG</em> represented
                  						in compressed form. <em>BAG</em> is therefore useful to communicate raw
                  						statistical data samples.
                  						
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.contains"></a>3.5.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Contains Item : <a class="termref" href="#dt-INT">INT</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>  
                  							The number of items in this bag with the given item value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							This is the primitive semantic property of a <em>BAG</em>, on which all
                  							other properties are defined. 
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BAG&lt;T&gt; bag; T item)
      where bag.nonNull.and(item.nonNull) {
   bag.contains(item).nonNegative;
   bag.isEmpty.equal(bag.contains(item).isZero);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.notEmpty"></a>3.5.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Not-Empty : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong> 
                  							A predicate indicating that this <em>BAG</em> contains item.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BAG&lt;T&gt; bag)
      where bag.nonNull {
   bag.notEmpty.equal(exists(T item) {
      bag.contains(item);
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.isEmpty"></a>3.5.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>The Empty Bag : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A predicate indicating that this <em>BAG</em> has no elements (negation of the
                  							<a class="termref" href="#prop-BAG.notEmpty">notEmpty</a> predicate. The empty <em>BAG</em> is a
                  							proper value, <em>not</em> an exceptional (NULL) value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BAG&lt;T&gt; bag)
      where bag.nonNull {
   bag.isEmpty.equal(notEmpty.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.plus"></a>3.5.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Addition : <a class="termref" href="#dt-BAG">BAG</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A <em>BAG</em> that contains all items of the operand <em>BAG</em>s, i.e. the number of
                  							items of each item value are added.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BAG&lt;T&gt; x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.plus(y).equal(z).equal(
      forall(T e)
            where e.nonNull {
         z.contains(e).equal(x.contains(e)
                      .plus(y.contains(e)));
         });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.minus"></a>3.5.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Subtraction : <a class="termref" href="#dt-BAG">BAG</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>          
                  							A <em>BAG</em> that contains all items of this <em>BAG</em> (minuend) diminished by the
                  							items in the other <em>BAG</em> (subtrahend). <em>BAG</em>s cannot carry deficits. When
                  							the subtrahend contains more items of one value than the minuend, the
                  							difference contais zero items of that value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(BAG&lt;T&gt; x, y, z)
      where x.nonNull.and(y.nonNull) {
   x.minus(y).equal(z).equal(
      forall(T e)
            where e.nonNull {
               exists(INT n)
                  where n.equal(x.contains(e).minus(y.contains(e)) {
         n.nonNegative.equal(z.contains(e));
         n.isNegative.equal(z.contains(e).isZero);
         };
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-BAG.promotionT"></a>3.5.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Promotion of Item Values to Bags : <a class="termref" href="#dt-BAG">BAG</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A data value of type T can be promoted into a trivial <em>BAG</em> of type T
                  							with that data value as its only item.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(T x) {
   ((BAG&lt;T&gt;)x).contains(x).equal(1);
   forall(T y) {
      ((BAG&lt;T&gt;)x).contains(y)
                 .implies(x.equal(y)) };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="IVL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-IVL"></a>3.6 
               </h3>
            </td>
            <td class="body_col">
               <h3>Interval (IVL) specializes <a class="termref" href="#dt-SET">SET</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A set of consecutive values of an ordered base data type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Any ordered type can be the basis of an <em>IVL</em>; it does not matter
                  					whether the base type is discrete or continuous. If the base data type
                  					is only partially ordered, all elements of the <em>IVL</em> must be
                  					elements of a totally ordered subset of the partially ordered data
                  					type.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, <a class="termref" href="#dt-PQ">PQ</a> is considered ordered. However the
                  					ordering of <a class="termref" href="#dt-PQ">PQ</a>s is only partial; a total order is only
                  					defined among comparable quantities (quantities of the same physical
                  					dimension.)  While <em>IVL</em>s between 2 and 4 meter exists, there is no
                  					<em>IVL</em> between 2 meters and 4 seconds.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>IVL</em>s are <a class="termref" href="#dt-SET">SET</a>s and have all the properties of
                  					<a class="termref" href="#dt-SET">SET</a>s. However, union and difference of <a class="termref" href="#dt-SET">SET</a>s
                  					may not be <a class="termref" href="#dt-SET">SET</a>s, since the elements of these union and
                  					difference <a class="termref" href="#dt-SET">SET</a>s might not be
                  					contiguous. Intersections of <a class="termref" href="#dt-SET">SET</a>s are always <a class="termref" href="#dt-SET">SET</a>s.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-IVL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-IVL"></a><pre>
template&lt;QTY T&gt;
type Interval&lt;T&gt; alias IVL&lt;T&gt; specializes SET&lt;T&gt; {
              T       low;
              BL      lowClosed;
              T       high;
              BL      highClosed;
              QTY     width;
              T       center;
              IVL&lt;T&gt;  hull;
              IVL&lt;T&gt;  hull(IVL&lt;T&gt; x);
   literal    ST;
   promotion  IVL&lt;T&gt;  (T x);
   demotion   T;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.low"></a>3.6.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Low Boundary : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							This is the low limit.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x; T e)
      where x.nonNull.and(x.contains(e)) {
   x.low.lessOrEqual(e);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.high"></a>3.6.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>High Boundary : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							This is the high limit.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x; T e)
      where x.nonNull.and(x.contains(e)) {
   e.lessOrEqual(x.high);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.width"></a>3.6.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Width : <a class="termref" href="#dt-QTY">QTY</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The difference between <a class="termref" href="#prop-IVL.high">high</a> and <a class="termref" href="#prop-IVL.low">low</a>
                  							boundary. The purpose of distinguishing <em>width</em> is to handle all cases of incomplete
                  							information symmetrically. In any <a class="termref" href="#dt-SET">SET</a> representation only two of
                  							the three properties <a class="termref" href="#prop-IVL.high">high</a>, <a class="termref" href="#prop-IVL.low">low</a>,
                  							and <em>width</em> need to be stated and the third can be derived.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							When both boundaries are known, <em>width</em> can be derived as
                  							<a class="termref" href="#prop-IVL.high">high</a> minus <a class="termref" href="#prop-IVL.low">low</a>.
                  							When one boundary and <em>width</em> is known, the other boundary is
                  							also known. When no boundary is known, <em>width</em> may still be
                  							known. For example, one knows that an activity takes about 30 minutes,
                  							but one may not yet know when that activity is started.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Note that the data type of <em>width</em> is not always the same as for the
                  							boundaries. For ratio scale quantities (<a class="termref" href="#dt-REAL">REAL</a>,
                  							<a class="termref" href="#dt-PQ">PQ</a>, <a class="termref" href="#dt-MO">MO</a>) it is the same. For
                  							difference scale quantities (e.g., <a class="termref" href="#dt-TS">TS</a>) is
                  							the data type of the difference (e.g., <a class="termref" href="#dt-PQ">PQ</a> in
                  							the dimension of time for <a class="termref" href="#dt-TS">TS</a>). For discrete
                  							elements (<a class="termref" href="#dt-INT">INT</a>) the width may be a
                  							<a class="termref" href="#dt-REAL">REAL</a> indicating the number of elements in
                  							the interval divided by 2.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x) {
   x.low.lessOrEqual(x.high);
   x.width.equal(x.high.minus(x.low));
};

invariant(IVL&lt;T&gt; x) {
   x.width.dataType.implies(T.diffType);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.center"></a>3.6.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Central Value : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The arithmetic mean of the <em>IVL</em>
                  							(<a class="termref" href="#prop-IVL.low">low</a> plus <a class="termref" href="#prop-IVL.high">high</a> divided by 2). The
                  							purpose of distinguishing <em>center</em> as a semantic property is for
                  							conversions of <em>IVL</em>s to and from point values.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Note that <em>center</em> doesn't always exist for every <em>IVL</em>.
                  							Notably <em>IVL</em>s that are infinite on one side do not have
                  							<em>center</em>. Also <em>IVL</em>s of discrete base types with an
                  							even number of elements do not have a <em>center</em>. If an <em>IVL</em>
                  							is unknown on one (or both) boundaries, <em>center</em> can still
                  							be asserted. In fact, the main use case for <em>center</em> is
                  							to be asserted when no boundary is known.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x)
      where x.low.nonNull.and(x.high.nonNull) {
   x.center.equal(x.low.plus(x.width.times(0.5))));
};

invariant(IVL&lt;T&gt; x)
      where x.low.isNull.or(x.high.isNull) {
   x.center.notApplicable;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.lowClosed"></a>3.6.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Low Boundary Closed : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Specifies whether <a class="termref" href="#prop-IVL.low">low</a> is included in the <em>IVL</em>
                  							(is closed) or excluded from the <em>IVL</em> (is open).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x)
      where x.nonNull {
   x.low.nonNull.implies(x.lowClosed.equal(x.contains(x.low)));
   x.low.isNull.implies(x.lowClosed.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.highClosed"></a>3.6.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>High Boundary Closed : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Specifies whether <a class="termref" href="#prop-IVL.high">high</a> is included in the <em>IVL</em>
                  							(is closed) or excluded from the <em>IVL</em> (is open).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x)
      where x.nonNull {
   x.high.nonNull.implies(x.highClosed.equal(x.contains(x.high)));
   x.high.isNull.implies(x.highClosed.not);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.literal"></a>3.6.7 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The literal form for <em>IVL</em> is defined such that it is
                  							as intuitive to humans as possible. Five different forms are
                  							defined:<a name="fn-src51"></a><a href="#fn51"><sup style="font-size: smaller">51</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     								the interval form using square brackets, e.g., "[3.5; 5.5[";
                     							
                  </li>
                  <li>
                     								the dash-form, e.g., "3.5-5.5";
                     							
                  </li>
                  <li>
                     								the "comparator" form, using relational operator symbols, e.g., "&lt;5.5";
                     							
                  </li>
                  <li>
                     								the center-width form, e.g., "4.5[2.0[".
                     							
                  </li>
                  <li>
                     								the width-only form using square brackets, e.g., "[2.0[".
                     							
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
IVL&lt;T&gt;.literal ST {
   IVL&lt;T&gt; range : interval                { $.equal($1); }
                | dash                    { $.equal($1); }
                | comparator              { $.equal($1); }
                | center_width            { $.equal($1); }
                | width                   { $.equal($1); };

   IVL&lt;T&gt; interval
                : open T ";" T close;     { $.low.equal($2);
                                            $.high.equal($4);
                                            $.lowClosed.equal($1);
                                            $.highClosed.equal($5); };
   BL open      : "["                     { $.equal(true); }
                | "]"                     { $.equal(false); };
   BL close     : "]"                     { $.equal(true); }
                | "["                     { $.equal(false); };
   IVL&lt;T&gt; width
                : open T.diffType close   { $.width.equal($2);
                                            $.lowClosed.equal($1);
                                            $.highClosed.equal($3); };
   IVL&lt;T&gt; center_width
                : T width                 { $.center.equal($1);
                                            $.width.equal($2.width);
                                            $.lowClosed.equal($2.lowClosed);
                                            $.highClosed.equal($2.highClosed); };
   IVL&lt;T&gt; dash  : T "-" T;                { $.low.equal($2);
                                            $.high.equal($4);
                                            $.lowClosed.equal(true);
                                            $.highClosed.equal(true); };
   IVL&lt;TS&gt; comparator
                : "&lt;"  T                  { $.high.equal(T);
                                            $.high.closed(false);
                                            $.low.negativelyInfinite; }
                | "&gt;"  T                  { $.low.equal(T);
                                            $.low.closed(false);
                                            $.high.positivelyInfinite; }
                | "&lt;=" T                  { $.high.equal(T);
                                            $.high.closed(true);
                                            $.low.negativelyInfinite; }
                | "&gt;=" T                  { $.low.equal(T);
                                            $.low.closed(true);
                                            $.high.positivelyInfinite; };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.promotionT"></a>3.6.8 
               </h4>
            </td>
            <td class="body_col">
               <h4>Promotion of Element Values to Intervals : <a class="termref" href="#dt-IVL">IVL</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A quantity of type T can be promoted into a trivial <em>IVL</em>
                  							where <a class="termref" href="#prop-IVL.low">low</a> and <a class="termref" href="#prop-IVL.high">high</a>
                  							are equal and boundaries closed.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(T x) {
   ((IVL&lt;T&gt;)x).low.equal(x);
   ((IVL&lt;T&gt;)x).high.equal(x);
   ((IVL&lt;T&gt;)x).highClosed;
   ((IVL&lt;T&gt;)x).lowClosed;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.demotionT"></a>3.6.9 
               </h4>
            </td>
            <td class="body_col">
               <h4>Demotion of Intervals to a Representative Element Value : T</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							An <em>IVL</em> can be demoted to a simple quantity of type T that is
                  							representative for the whole <em>IVL</em>. If both boundaries are finite,
                  							this is the <a class="termref" href="#prop-IVL.center">center</a>. If one boundary is
                  							infinite, the representative value is the other boundary. If both
                  							boundaries are infinite, the conversion to a point value is not
                  							applicable.
                  							
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; x)
      where x.nonNull {
   x.low.nonNull.and(x.high.nonNull).implies(((T)x).equal(x.center));
   x.high.nonNull.and(x.low.isNull).implies(((T)x).equal(x.high));
   x.low.nonNull.and(x.high.isNull).implies(((T)x).equal(x.low));
   x.low.isNull.and(x.high.isNull).implies(((T)x).notApplicable);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL.hull"></a>3.6.10 
               </h4>
            </td>
            <td class="body_col">
               <h4>Convex Hull : <a class="termref" href="#dt-IVL">IVL</a>&lt;T&gt;, inherited from <a class="termref" href="#dt-SET">SET</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A convex hull or "interval hull" of two <em>IVL</em>s is the least
                  							<em>IVL</em> that is a superset of its operands.
                  							
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/datyp2fig12.jpg" alt="Convex Hull of two Intervals"><br>Convex Hull of two Intervals<br></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;T&gt; h, IVL&lt;T&gt; i, j)
      where h.equal(i.hull(j)) {
   i.low.lessOrEqual(j.low).implies(h.low.equal(i.low));
   j.low.lessOrEqual(i.low).implies(h.low.equal(j.low));
   i.high.lessOrEqual(j.high).implies(h.high.equal(j.high));
   j.high.lessOrEqual(i.high).implies(h.high.equal(i.high));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="IVL<PQ&gt;"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-IVL_PQ"></a>3.7 
               </h3>
            </td>
            <td class="body_col">
               <h3>Interval of Physical Quantities (IVL&lt;PQ&gt;) specializes <a class="termref" href="#dt-IVL">IVL</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A set of consecutive values of physical quantities.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					An interval of physical quantities is constructed from the generic
                  					interval type. However, recognizing that the unit can be factored from
                  					the boundaries, we add additional semantics and a separate literal
                  					form. The additional view of an interval of physical quantities is an
                  					interval of real numbers with one unit.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-IVL_PQ">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-IVL_PQ"></a><pre>
type Interval&lt;PQ&gt; alias IVL&lt;PQ&gt; {
   IVL&lt;REAL&gt; value;
   CS  unit;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The unit applies to both low and high boundary.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(IVL&lt;PQ&gt; x)
      where x.nonNull {
   x.value.nonNull;
   x.low.value.equal(x.value.low);
   x.low.unit.equal(x.unit);
   x.lowClosed.equal(x.value.lowClosed);
   x.high.value.equal(x.value.high);
   x.high.unit.equal(x.unit);
   x.highClosed.equal(x.value.highClosed);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The special literal form is simply an interval of real numbers a space
                  					and the unit.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
IVL&lt;PQ&gt;.literal ST {
   IVL&lt;PQ&gt;  : IVL&lt;REAL&gt; " " unit    { $.value($1);
                                      $.unit.equal($3); }
            | IVL&lt;REAL&gt;             { $.equal($1); };
   CS unit  : ST                    { $.value.equal($1);
                                      $.codeSystem(2.16.840.1.113883.3.2); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example: "[0;5] mmol/L" or "&lt;20 mg/dL" are valid literal forms
                  					of intervals of physical quantities. The generic interval form, e.g.,
                  					"[50 nm; 2 m]" is also allowed.
                  				
               </p>
            </td>
         </tr><a name="IVL<TS&gt;"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-IVL_TS"></a>3.8 
               </h3>
            </td>
            <td class="body_col">
               <h3>Interval of Point in Time (IVL&lt;TS&gt;) specializes <a class="termref" href="#dt-IVL">IVL</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A set of consecutive values of time-stamps.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The generic interval data type defines the interval of points in time
                  					too. However, there are some special considerations about literal
                  					representations and conversions of intervals of point in time, which
                  					are specified in this section.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-IVL_TS">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-IVL_TS"></a><pre>
type Interval&lt;TS&gt; alias IVL&lt;TS&gt; {
   literal    ST;
   promotion  IVL&lt;TS&gt; (TS x);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL_TS.promotionTS"></a>3.8.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Promotion of Points in Time Values to Intervals : <a class="termref" href="#dt-IVL">IVL</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;, inherited from <a class="termref" href="#dt-IVL">IVL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <a class="termref" href="#dt-TS">TS</a> can be promoted to an <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>
                  						whereby the low boundary is
                  						the <a class="termref" href="#dt-TS">TS</a> value itself, and the width is inferred from
                  						the precision of the <a class="termref" href="#dt-TS">TS</a> and the duration of the
                  						least significant calendar period specified. The high boundary is
                  						open. For example, the <a class="termref" href="#dt-TS">TS</a> literal "200009" is
                  						converted to an <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a> with low
                  						boundary 200009 and width 30 days, which is the interval
                  						"[200009;200010[".
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-IVL_TS.literal"></a>3.8.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The literal form for interval of point in time is exceptional.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     							The "dash form" is not allowed for intervals of point in time
                     						
                  </li>
                  <li>
                     							A "hull form" is defined instead
                     						
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						In order to avoid syntactic conflicts with the timezone and slightly
                  						different usage profiles of the ISO 8601 that occur on some ITS
                  						platforms, <strong>the dash form of the interval is not
                     						permitted for</strong><a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>. The
                  						interval-form using square brackets is preferred.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Example: May 12, 1987 from 8 to 9:30 PM is 
                  						"<code>[198705122000;198705122130]</code>".
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  							The precision of a stated interval boundary is irrelevant for the
                  							interval. One might wrongly assume that the interval
                  							"[19870901;19870930]" stands for the entire September 1987 until end
                  							of the day of September 30. However, this is not so! The proper way to
                  							denote an entire calendar cycle (e.g., hour, day, month, year, etc.)
                  							in the interval notation with is to use an open high boundary. For
                  							example, all of September 1987 is denoted as
                  							"[198709;198710[".<a name="fn-src52"></a><a href="#fn52"><sup style="font-size: smaller">52</sup></a></blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The "hull-form" of the literal is defined as the convex hull (see
                  						<a class="termref" href="#prop-IVL.hull">IVL.hull</a>) of interval-promotions from two time
                  						stamps.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
   IVL&lt;TS&gt; hull : TS ".." TS     { $.equal(((IVL&lt;TS&gt;)$1)
                                    .hull((IVL&lt;TS&gt;)$3));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For example, "<code>19870901..19870930</code>" is a valid literal
                  						using the hull form. The value is equivalent to the interval form
                  						"<code>[19870901;19871001[</code>".<a name="fn-src53"></a><a href="#fn53"><sup style="font-size: smaller">53</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The hull-form further allows an abbreviation, where the higher
                  						timestamp literal does not need to repeat digits on the left that are
                  						the same as for the lower timestamp literal. The two timestamps are
                  						right-aligned and the digits to the left copied from the lower to the
                  						higher timestamp literal. This is a simple string operation and is not
                  						formally defined here.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Example: May 12, 1987 to May, 23, 1987 is
                  						"<code>19870512..23</code>". However, note that May 12, 1987 to June
                  						2, 1987 is "<code>19870512..0602</code>", and not
                  						"<code>20000512..02</code>".
                  					
               </p>
            </td>
         </tr>
         <!--divN/head-->
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h2><a name="datyp2gentex"></a>4 
               </h2>
            </td>
            <td class="body_col">
               <h2>Generic Type Extensions</h2>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  				Generic type extensions are generic types with one parameter type, and
                  				that extend (specialize) their parameter type. In the formal data type
                  				definition language, generic type extensions follow the pattern:
                  				<strong>template</strong>&lt;ANY T&gt; <strong>type</strong><em>GenericTypeExtensionName</em><strong>specializes</strong> T
                  				{ ... }; These generic type extensions inherit most properties of their
                  				base type and add some specific	feature to it. The generic type extension
                  				is a specialization of the base type, thus a value of the extension data
                  				type can be used instead of its base data type.
                  			
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  					Values of extended types can be substituted for their base
                  					type. However, an ITS may make some constraints as to what extensions
                  					to accommodate. Particularly, extensions need not be defined for those
                  					components carrying the values of data value properties. Thus, while
                  					any data value can be annotated outside the data type specification,
                  					and ITS may not provide for a way to annotate the value of a data
                  					value property.
                  				<strong>At this time HL7 does not permit use of generic
                     					type extensions, except where explicitly enabled (in this or another
                     					HL7 specification) for such use cases where this advanced
                     					functionality is important. In these cases, instances of these generic
                     					type extensions must be specifically and explicitly reflected in the
                     					HL7 RIM, MIM, RMIM and HMD (as applicable), as a result of balloted
                     					Technical Committee content.</strong><a name="fn-src54"></a><a href="#fn54"><sup style="font-size: smaller">54</sup></a></blockquote>
            </td>
         </tr><a name="HXIT"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-HXIT"></a>4.1 
               </h3>
            </td>
            <td class="body_col">
               <h3>History Item (HXIT) specializes T</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A generic data type extension that tags a time range to any data value
                  					of any data type.  The time range is the time in which the information
                  					represented by the value is (was) valid.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					If the base type T does not possess a validTime property, the
                  					<a class="termref" href="#dt-HXIT">HXIT</a> adds that property to the base type. If, however,
                  					the base type T does have a valid time property (currently only <a class="termref" href="#dt-EN">EN</a>),
                  					that property is mapped to the valid time property of the
                  					<a class="termref" href="#dt-HXIT">HXIT</a><a name="fn-src55"></a><a href="#fn55"><sup style="font-size: smaller">55</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-HXIT">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-HXIT"></a><pre>
template&lt;ANY T&gt;
type HistoryItem&lt;T&gt; alias HXIT&lt;T&gt; specializes T {
   IVL&lt;TS&gt; validTime;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HXIT.validTime"></a>4.1.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Valid Time : <a class="termref" href="#dt-IVL">IVL</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  						The time interval during which the given information was, is, or is
                  						expected to be valid. The interval can be open or closed infinite or
                  						undefined on either side.
                  					
               </p>
            </td>
         </tr><a name="HIST"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-HIST"></a>4.2 
               </h3>
            </td>
            <td class="body_col">
               <h3>History (HIST) specializes <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-HXIT">HXIT</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A set of data values that have a valid-time property and thus
                  					conform to the <a class="termref" href="#dt-HXIT">HXIT</a> type. The history information is
                  					not limited to the past; expected future values can also appear.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The intent of the <em>HIST</em> data type is to capture the true historical
                  					(and future) values of an item, rather than the audit trail of
                  					values any given system has held for the item.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-HIST">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-HIST"></a><pre>
template&lt;ANY T&gt;
type History&lt;T&gt; alias HIST&lt;T&gt; specializes SET&lt;HXIT&lt;T&gt;&gt; {
            HXIT&lt;T&gt;  earliest;
            HIST     exceptEarliest;
            HXIT&lt;T&gt;  latest;
            HIST     exceptLatest;
  demotion  HXIT&lt;T&gt;;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The semantics does not principally forbid the time intervals to
                  						overlap. However, if two history items have the same
                  						<a class="termref" href="#prop-IVL.low">IVL.low</a> and <a class="termref" href="#prop-IVL.high">IVL.high</a>
                  						boundaries in the valid time interval, it is undefined which one is
                  						considered the earliest (latest).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(HIST x)
      where x.nonNull {
   x.notEmpty;
   ((T)x).equal(x.latest);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HIST.earliest"></a>4.2.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Earliest Item : <a class="termref" href="#dt-HXIT">HXIT</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The item in the set whose <a class="termref" href="#prop-IVL.low">IVL.low</a> boundary
                  							(validity start	time) is less than or equal to (i.e. before)
                  							that of any other history item in the set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(HIST x; HXIT&lt;T&gt; e)
      where x.contains(e) {
   x.earliest.validTime.low.lessOrEqual(e.validTime.low);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HIST.latest"></a>4.2.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Latest Item : <a class="termref" href="#dt-HXIT">HXIT</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The item in the set whose <a class="termref" href="#prop-IVL.high">IVL.high</a> boundary (validity end
                  							time) is greater than or equal to (i.e. after) that of any other history item
                  							in the set.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(HIST x; HXIT&lt;T&gt; e)
      where x.contains(e) {
   x.latest.validTime.high.greaterOrEqual(e.validTime.high);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HIST.exceptEarliest"></a>4.2.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Except Earliest Item : <a class="termref" href="#dt-HIST">HIST</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>	  
                  							The derived history that has the earliest item excluded.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(HIST x)
      where x.nonNull {
   x.exceptEarliest.equal(x.except(x.earliest));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HIST.exceptLatest"></a>4.2.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Except Latest Item : <a class="termref" href="#dt-HIST">HIST</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>	  
                  							The derived history that has the latest item excluded.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(HIST x)
      where x.nonNull {
   x.exceptLatest.equal(x.except(x.latest));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-HIST.demotionHXIT"></a>4.2.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Demotion of a History to a Single History Item : <a class="termref" href="#dt-HXIT">HXIT</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A type conversion between an entire history <a class="termref" href="#dt-HIST">HIST</a>
                  							and a single history item <a class="termref" href="#dt-HIST">HIST</a>. This conversion
                  							takes the latest data from the history.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The purpose of this conversion is to allow an information producer to
                  							produce a history of any value instead of sending just one value. An
                  							information-consumer, who does not expect a history but a simple
                  							value, will convert the history to the latest value.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Note, from the definition of <a class="termref" href="#dt-HXIT">HXIT</a>, that
                  							<a class="termref" href="#dt-HXIT">HXIT</a> semantically specializes T. This means, that the
                  							information-consumer expecting a T but given an <a class="termref" href="#dt-HXIT">HXIT</a>
                  							will not recognize any difference (substitutability of
                  							specializations.)
                  						
               </p>
            </td>
         </tr><a name="UVP"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-UVP"></a>4.3 
               </h3>
            </td>
            <td class="body_col">
               <h3>Uncertain Value - Probabilistic (UVP) specializes T</h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A generic data type extension used to specify a probability expressing
                  					the information producer's belief that the given value holds.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					How the probability number was arrived at is outside the scope of this
                  					specification.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Probabilities are subjective and (as any data value) must be
                  					interpreted in their individual context, for example, when new
                  					information is found the probability might change. Thus, for any
                  					message (document, or other information representation) the
                  					information &#8212; and particularly the probabilities &#8212; reflect
                  					what the information producer believed was appropriate for the purpose
                  					and at the time the message (document) was created.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, at the beginning of the 2000 baseball season (May), the
                  					Las Vegas odds makers may have given the New York Yankees a
                  					probability of 1 in 10 (0.100) of winning the World Series. At the
                  					time of this writing, the Yankees and Mets have won their respective
                  					pennants, but the World Series has yet to begin. The probability of
                  					the Yankees winning the World Series is obviously significantly
                  					greater at this point in time, perhaps 6 in 10 (0.600). The context,
                  					and in particular the time of year, made all the difference in the
                  					world.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Since probabilities are subjective measures of belief, they can be
                  					stated without being "correct" or "incorrect" per se, let alone
                  					"precise" or "imprecise". Notably, one does not have to conduct
                  					experiments to measure a frequency of some outcome in order to specify
                  					a probability. In fact, whenever statements about individual people or
                  					events are made, it is not possible to confirm such probabilities with
                  					"frequentists" experiments.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Returning to our example, the Las Vegas odds makers can not insist on
                  					the Yankees and Mets playing 1000 trial games prior to the Series;
                  					even if they could, they would not have the fervor of the real Series
                  					and therefore not be accurate. Instead, the odds makers must derive
                  					the probability from past history, player statistics, injuries, etc.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-UVP">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-UVP"></a><pre>
template&lt;ANY T&gt;
type UncertainValueProbabilistic&lt;T&gt; alias UVP&lt;T&gt; specializes T {
   REAL  probability;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The type T is not formally constrained. In theory, discrete
                  					probabilities can only be stated for discrete data values. Thus,
                  					generally <em>UVP</em> should not be used with <a class="termref" href="#dt-REAL">REAL</a>,
                  					<a class="termref" href="#dt-PQ">PQ</a>, or <a class="termref" href="#dt-MO">MO</a> values. 
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-UVP.probability"></a>4.3.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Probability : <a class="termref" href="#dt-REAL">REAL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							The probability assigned to the value, a decimal number between 0
                  							(very uncertain) and 1 (certain), inclusive.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(UVP&lt;T&gt; x)
      where x.nonNull.and(x.probability.nonNull) {
   ((IVL&lt;REAL&gt;)[0;1]).contains(x.probability);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							There is no "default probability" that one can assume when the
                  							probability is unstated. Therefore, it is impossible to make any
                  							semantic difference between an <em>UVP</em> without probability and
                  							a simple T. <em>UVP</em> does not mean "uncertain", and a simple T
                  							does not mean "certain". In fact, the probability of the <em>UVP</em>
                  							could be 0.999 or 1, which is quite certain, where a simple T value
                  							could be a very vague guess.
                  						
               </p>
            </td>
         </tr><a name="NPPD"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-NPPD"></a>4.4 
               </h3>
            </td>
            <td class="body_col">
               <h3>Non-Parametric Probability Distribution (NPPD) specializes <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-UVP">UVP</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A set of <a class="termref" href="#dt-UVP">UVP</a> with probabilities (also known as
                  					a histogram.) All the elements in the set are considered alternatives
                  					and are rated each with its probability expressing the belief (or
                  					frequency) that each given value holds.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The purpose of <em>NPPD</em> is chiefly
                  					to support statistical data reporting as it occurs in measurements
                  					taken from many subjects and consolidated in a histogram. This occurs
                  					in epidemiology, veterinary medicine, laboratory medicine, but also in
                  					cost controlling and business process engineering.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Semantically, the information of a stated value exists in contrast to
                  					the complement set of unstated possible values. Thus, semantically, an
                  					<em>NPPD</em> contains <em>all</em>
                  					possible values and assigns probabilities to each of them.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					The easiest way to visualize this is a bar chart as shown in
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><br><img class="graphic" border="0" src="graphics/DT-NPPD-ex1.gif" alt="Example of a Histogram"><br>Example of a Histogram<br></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					This example illustrates the probability of selected major league
                  					baseball teams winning the World Series (prior to the season
                  					start). Each team is mutually exclusive, and were we to include all of
                  					the teams, the sum of the probabilities would equal 1 (i.e., it is
                  					certain that one of the teams will win).
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  						Even though semantically <em>NPPD</em> assigns probabilities to all
                  						possible values, not all values need to be represented
                  						explicitly. Those possible values that are not mentioned
                  						will have the remaining probability distributed equally over
                  						all unmentioned values. For example, if the value set is {A; B; C; D}
                  						but the <em>NPPD</em> value states just {(B; 0.5); (C; 0.25)} then the
                  						remaining probability is 1 - 0.75 = 0.25, which is distributed evenly over
                  						the complement set: {(A; 0.125); (D; 0.125)}. Semantically, the <em>NPPD</em>
                  						is the union of the stated probability distribution and the unstated
                  						complement with the remaining probability distributed evenly.
                  					
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-NPPD">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-NPPD"></a><pre>
template&lt;ANY T&gt;
type NonParametricProbabilityDistribution&lt;T&gt; alias NPPD&lt;T&gt;
      specializes SET&lt;UVP&lt;T&gt;&gt; {
   SET&lt;UVP&lt;T&gt;&gt; mostLikely(INT n);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Just as with <a class="termref" href="#dt-UVP">UVP</a>, the type T is not formally
                  					constrained, even though there are reasonable and unreasonable
                  					uses. Typically one would use <em>NPPD</em> for unordered types, if
                  					only a "small" set of possible values is assigned explicit
                  					probabilities, or if the probability distribution cannot (or should
                  					not) be approximated with parametric methods. For other cases, one may
                  					prefer <a class="termref" href="#dt-PPD">PPD</a>.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-NPPD"></a>4.4.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Most Likely : <a class="termref" href="#dt-UVP">UVP</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(NPPD&lt;T&gt; x)
      where x.nonNull {
   x.notEmpty;
   x.contains(x.mostLikely(n));
   x.mostLikely(n).
   forall(UVP&lt;T&gt; d, e; SET&lt;UVP&lt;T&gt;&gt; m; INT n)
         where x.contains(d).and(m.equal(x.mostLikely(n)))
                .and(m.contains(e)) {
      e.greaterOrEqual(d).or(m.contains(d));
      };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <!--divN/head-->
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h2><a name="datyp2timspec"></a>5 
               </h2>
            </td>
            <td class="body_col">
               <h2>Timing Specification</h2>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-dtUML-Timing.gif" target="_blank" border="0">Overview of Timing Specification Data Types (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  				The timing specification suite of data types is used to specify the
                  				complex timing of events and actions such as those that occur in order
                  				management and scheduling systems. It also supports the cyclical
                  				validity patterns that may exist for certain kinds of information,
                  				such as phone numbers (evening, daytime), office hours, and addresses
                  				of so called "snowbirds" (i.e. people who choose to reside closer to
                  				the equator during winter and farther from the equator during summer.)
                  			
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  				The timing specification data types include point in time (<a class="termref" href="#dt-TS">TS</a>)
                  				and the interval of time (<a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>)
                  				and add types that are specifically suited to repeated
                  				schedules. These additional types include <a class="termref" href="#dt-PIVL">PIVL</a>, <a class="termref" href="#dt-EIVL">EIVL</a>,
                  				and finally <a class="termref" href="#dt-GTS">GTS</a> type
                  				itself. All these timing types describe the time distribution of
                  				repeating states or events.
                  			
               </p>
            </td>
         </tr><a name="PIVL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-PIVL"></a>5.1 
               </h3>
            </td>
            <td class="body_col">
               <h3>Periodic Interval of Time (PIVL) specializes <a class="termref" href="#dt-SET">SET</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					An interval of time that recurs periodically. <em>PIVL</em> has
                  					two properties, <a class="termref" href="#prop-PIVL.phase">phase</a> and <a class="termref" href="#prop-PIVL.period">period</a>.
                  					<a class="termref" href="#prop-PIVL.phase">phase</a> specifies the "interval
                  					prototype" that is repeated every <a class="termref" href="#prop-PIVL-period">.</a>.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="dt-PIVL-prop-summary">&nbsp;</a>
                     			Table
                     			43: Property Summary of
                     Periodic Interval of Time
                  </caption>
                  <thead>
                     <tr>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>phase</td>
                        <td>IVL&lt;T&gt;</td>
                        <td>
                           							A prototype of the repeating interval, specifying the duration of
                           							each occurrence and anchors the <em>PIVL</em> sequence at a
                           							certain point in time.
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>period</td>
                        <td>T.diff</td>
                        <td>
                           							A time duration specifying as a reciprocal measure of the frequency at
                           							which the <em>PIVL</em> repeats.
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>alignment</td>
                        <td>CS</td>
                        <td>
                           							Specifies if and how the repetitions are aligned to the cycles 
                           							of the underlying calendar (e.g., to distinguish every 30 days
                           							from "the 5th of every month".) A non-aligned <em>PIVL</em> recurs
                           							independently from the calendar. An aligned <em>PIVL</em> is
                           							synchronized with the calendar.
                           						
                        </td>
                     </tr>
                     <tr>
                        <td>institutionSpecified</td>
                        <td>BL</td>
                        <td>
                           							Indicates whether the exact timing is up to the party executing the
                           							schedule (e.g., to distinguish "every 8 hours" from "3 times a day".)
                           						
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, "every eight hours for two minutes" is a <em>PIVL</em>
                  					where the interval's <a class="termref" href="#prop-IVL.width">IVL.width</a> equals 2
                  					minutes and the <a class="termref" href="#prop-PIVL.period">period</a>
                  					at which the interval recurs equals 8 hours.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><a class="termref" href="#prop-PIVL.phase">phase</a> also marks the anchor point
                  					in time for the entire series of periodically recurring intervals.
                  					The recurrence of a <em>PIVL</em> has no
                  					beginning or ending, but is infinite in both future and past.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-PIVL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-PIVL"></a><pre>
template&lt;TS T&gt;
protected type PeriodicInterval&lt;T&gt; alias PIVL&lt;T&gt;
            specializes  SET&lt;T&gt; {
            T.diff       period;
            IVL&lt;T&gt;       phase;
            CS           alignment;
            BL           institutionSpecifiedTime;
            BL           contains(TS);
   literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					A <em>PIVL</em> is fully specified when both <a class="termref" href="#prop-PIVL.period">period</a>
                  					and <a class="termref" href="#prop-PIVL.phase">phase</a> are fully specified.
                  					The interval may be only partially specified where either
                  					only <a class="termref" href="#prop-IVL.width">IVL.width</a> or only one boundary is
                  					specified.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example: "every eight hours for two minutes" specifies only
                  					<a class="termref" href="#prop-PIVL.period">period</a> and <a class="termref" href="#prop-IVL.width">IVL.width</a>
                  					of <a class="termref" href="#prop-PIVL.phase">phase</a> but no boundary of the
                  					<a class="termref" href="#prop-PIVL.phase">phase</a>. Conversely,
                  					"every eight hours starting at 4 o'clock" specifies only
                  					<a class="termref" href="#prop-PIVL.period">period</a>
                  					and <a class="termref" href="#prop-IVL.low">IVL.low</a> of <a class="termref" href="#prop-PIVL.phase">phase</a>
                  					but not <a class="termref" href="#prop-IVL.high">IVL.high</a> of <a class="termref" href="#prop-PIVL.phase">phase</a>.
                  					"Every eight hours for two minutes starting at 4 o'clock" is fully specified
                  					since <a class="termref" href="#prop-PIVL.period">period</a>, and both <a class="termref" href="#prop-IVL.low">IVL.low</a>
                  					and <a class="termref" href="#prop-IVL.width">IVL.width</a> of <a class="termref" href="#prop-PIVL.phase">phase</a>
                  					are	specified.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>PIVL</em> is a generic type extension whose type
                  					parameter T is restricted to a <a class="termref" href="#dt-TS">TS</a>
                  					and its extensions. <a class="termref" href="#dt-PPD_TS&gt;">PPD&lt;TS&gt;&gt;</a> is
                  					an extension of <a class="termref" href="#dt-TS">TS</a> and therefore can be used to form
                  					<a class="termref" href="#dt-PIVL">PIVL</a>&lt;<a class="termref" href="#dt-PPD_TS">PPD&lt;TS&gt;</a>&gt; values.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					Often times, repeating schedules are only approximately specified. For
                  					instance "three times a day for ten minutes each" does not usually
                  					mean a <a class="termref" href="#prop-PIVL.period">period</a> of precisely 8 hours and does
                  					often not mean exactly 10 minutes intervals. Rather the distance
                  					between each occurrence may	vary as much as between 3 and 12 hours
                  					and the <a class="termref" href="#prop-IVL.width">IVL.width</a> of the interval
                  					may be less than 5 minutes or more than 15 minutes.
                  					<a class="termref" href="#dt-PIVL">PIVL</a>&lt;<a class="termref" href="#dt-PPD_TS">PPD&lt;TS&gt;</a>&gt; can be used to indicate how much
                  					leeway is allowed or how "timing-critical" the specification is.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PIVL.phase"></a>5.1.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Phase : <a class="termref" href="#dt-IVL">IVL</a>&lt;T&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A prototype of the repeating interval, specifying the duration of
                  							each occurrence and anchors the <em>PIVL</em> sequence at a
                  							certain point in time.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>phase</em> also marks the anchor point in time for the entire series of
                  							periodically recurring intervals. The recurrence of a <em>PIVL</em>
                  							has no begin or end but is infinite in both future and
                  							past. <a class="termref" href="#prop-IVL.width">IVL.width</a> of <em>phase</em> must
                  							be less than or equal to <a class="termref" href="#prop-PIVL.period">period</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (PIVL&lt;T&gt; x)
      where x.nonNull {
   x.phase.nonNull.implies(x.phase.width.lessOrEqual(x.period));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PIVL.period"></a>5.1.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Period : <a class="termref" href="#dt-T.diff">T.diff</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A time duration specifying as a reciprocal measure of the frequency at
                  							which the <em>PIVL</em> repeats.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>period</em> is a <a class="termref" href="#dt-QTY">QTY</a> in the dimension of time
                  							(T.diff).
                  							For an uncertain <em>PIVL</em><em>period</em> is a probability
                  							distribution over elapsed time.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(PIVL&lt;T&gt; x)
      where x.nonNull {
   x.period.nonNull;
};

invariant(PIVL x) {
   x.period.dataType.implies(PQ);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PIVL.alignment"></a>5.1.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Alignment to the Calendar : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Specifies if and how the repetitions are aligned to the cycles 
                  							of the underlying calendar (e.g., to distinguish every 30 days
                  							from "the 5th of every month".) A non-aligned <em>PIVL</em> recurs
                  							independently from the calendar. An aligned <em>PIVL</em> is
                  							synchronized with the calendar.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, "every 5th of the month" is a calendar aligned <em>PIVL</em>.
                  							<a class="termref" href="#prop-PIVL.period">period</a> varies from 28 to 31 days depending
                  							on the calendar month. Conversely, "every 30 days" is an independent
                  							<a class="termref" href="#prop-PIVL.period">period</a> that will
                  							fall on a different date each month.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The calendar alignment specifies a calendar cycle to which the
                  							<em>PIVL</em> is aligned. The even flow of time will then be
                  							partitioned by the calendar cycle. The partitioning is called the
                  							calendar "grid" generated by the aligned-to calendar cycle. The
                  							boundaries of each occurrence interval will then have equal distance
                  							from the earliest point in each partition. In other words, the
                  							distance from the next lower grid-line to the beginning of the
                  							interval is constant.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, with "every 5th of the month" the alignment
                  							calendar cycle would be month of the year (<code>MY</code>).  The even
                  							flow of time is partitioned in months of the year. The distance
                  							between the beginning of each month and the beginning of its
                  							occurrence interval is 4 days (4 days because day of month (DM) starts
                  							counting with 1.)  Thus, as months differ in their number of days, the
                  							distances between the recurring intervals will vary slightly, so that
                  							the interval occurs always on the 5th.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PIVL.institutionSpecified"></a>5.1.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Institution Specified Timing : <a class="termref" href="#dt-BL">BL</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							Indicates whether the exact timing is up to the party executing the
                  							schedule (e.g., to distinguish "every 8 hours" from "3 times a day".)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, with a schedule "three times a day" the average time
                  							between repetitions is 8 hours, however, with institution specified
                  							time indicator equal to <em>true</em>, the timing could follow some rule
                  							made by the executing person or organization ("institution"), that,
                  							e.g., three times a day schedules are executed at 7 am, noon, and 7
                  							pm.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-PIVL.literal"></a>5.1.5 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Generic Literal Form</strong>. The generic 
                  							literal form for periodic intervals of time is as follows:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							(<em>phase</em> : IVL&lt;T&gt;( <strong>/</strong>
                  							(<em>period</em> : QTY  ( [ <strong>@</strong>
                  							(<em>alignment</em>( ] [ <strong>IST</strong> ].
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
PIVL&lt;T&gt;.literal ST {
   PIVL&lt;T&gt;    : S2                  { $.equal($1); }
              | S2 "IST"            { $.phase.equal($1.phase);
                                      $.period.equal($1.period);
                                      $.institutionSpecified.equal(true); };
   PIVL&lt;T&gt; S2 : S1                  { $.equal($1); }
              | S1 "@" "(" ST ")"   { $.phase.equal($1.phase);
                                      $.period.equal($1.period);
                                      $.alignment.equal($4); };
   PIVL&lt;T&gt; S1 :
      IVL&lt;T&gt; "/" "(" QTY ")"        { $.phase.equal($1);
                                      $.period.equal($3); }
              | "/" "(" QTY ")"     { $.period.equal($2); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, "<code>[200004181100;200004181110]/(7 d)@DW</code>"
                  							specifies every Tuesday from 11:00 to 11:10 AM. Conversely,
                  							"<code>[200004181100;200004181110]/(1 mo)@DM</code>" specifies every
                  							18th of the month 11:00 to 11:10 AM.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							See <a href="#domain-CalendarCycle">Table
                     			36</a> for calendar-period codes
                  							defined for the Gregorian calendar. There are 1-character and
                  							2-character symbols. The 2-character symbols are preferred for the
                  							<a class="termref" href="#prop-PIVL.alignment">alignment</a>.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Calendar Pattern Form</strong>. This form is
                  							used to specify calendar-aligned timing more intuitively using "calendar
                  							patterns."  The calendar pattern syntax is (semi-formally) defined as
                  							follows:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							(<em>anchor</em>( [ (<em>calendar digits</em>(
                  							 [ <strong>..</strong> (<em>calendar digits</em>( ]]
                  							<strong>/</strong> (<em>number</em>
                  							 : INT( [ <strong>IST</strong> ]
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A calendar pattern is a calendar date where the higher significant
                  							digits (e.g., year and month) are omitted. In order to interpret the
                  							digits, a period identifier is prefixed that identifies the calendar
                  							period of the left-most digits. This calendar period identifier
                  							<em>anchors</em> the calendar digits following to the right.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							See <a href="#domain-CalendarCycle">Table
                     			36</a> for calendar-period codes
                  							defined for the Gregorian calendar. There are 1-character and
                  							2-character symbols. The 1-character symbols are preferred for the
                  							calendar pattern anchor.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example: "<code>M0219</code>" is February 19 the entire day every
                  							year. This periodic interval has the February 19 of any year as its
                  							phase (e.g., "<code>[19690219;19690220[</code>" ), a period of one
                  							year, and alignment month of the year (M). The alignment
                  							calendar-cycle is the same as the anchor (e.g., in this example, month
                  							of the year.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The calendar digits may also omit digits on the right. When digits are
                  							omitted on the right, this means the interval from lowest to highest
                  							for these digits. For example, "<code>M0219</code>" is February 19 the
                  							entire day; "<code>M021918</code>" is February 19, the entire hour
                  							between 6 and 7 PM.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							In absence of a formal definition for this, the rules for parsing a
                  							calendar pattern are as follows (example is "<code>M021918..21</code>"):
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ol>
                  <li>
                     								read the anchoring period identifier (e.g. "<code>M</code>")
                     							
                  </li>
                  <li>
                     								alignment is equal to this calendar period (e.g. month of
                     								the year)
                     							
                  </li>
                  <li>
                     								use the current point in time and format a literal exact to the next
                     								higher significant calendar period from the anchoring calendar period
                     								(e.g. year, "<code>2000</code>", constructing
                     								"<code>2000021918</code>"); this is the "stem literal"
                     							
                  </li>
                  <li>
                     								read this constructed literal (e.g., "<code>2000021918</code>") into a
                     								<a class="termref" href="#dt-TS">TS</a> value and convert that value to an interval
                     								according to <a class="termref" href="#prop-IVL_TS.promotionTS">IVL_TS.promotionTS</a> (e.g.,
                     								"[2000021918;2000021919[") this is the "low interval."
                     							
                  </li>
                  <li>
                     								if the hull-operator token ".." follows, read the following calendar
                     								digits (e.g., "21")
                     							
                  </li>
                  <li>
                     								right-align the stem literal and the calendar digits just read
                     								<pre>
     "2000021918"
     "        21"
								</pre></li>
                  <li>
                     								and copy all digits from the stem literal that are missing to the left
                     								of the calendar digits just read (e.g., yields "<code>2000021921</code>".)
                     							
                  </li>
                  <li>
                     								read this constructed literal (e.g., "<code>2000021918</code>") into a
                     								<a class="termref" href="#dt-TS">TS</a> value and convert that value to an <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>
                     								according to <a class="termref" href="#prop-IVL_TS.promotionTS">IVL_TS.promotionTS</a>
                     								(e.g., "<code>[2000021921;2000021922[</code>") this is the "high interval."
                     							
                  </li>
                  <li><a class="termref" href="#prop-PIVL.phase">phase</a> is the convex hull of the low interval and the high
                     								interval (e.g., "<code>[2000021918;2000021922[</code>").
                     							
                  </li>
                  <li>
                     								if the hull-operator was not present, <a class="termref" href="#prop-PIVL.phase">phase</a> is simply the low interval.
                     							
                  </li>
               </ol>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Interleave.</strong> A calendar pattern
                  							followed by a slash and an integer number <em>n</em> indicates that the
                  							given calendar pattern is to apply every nth time.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example: "<code>D19/2</code>" is the 19th of every second month.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							A calendar pattern expression is evaluated at the time the pattern is
                  							first encountered. At this time, the calendar digits missing from the left
                  							are completed using the earliest date matching the pattern (and
                  							following a preceding pattern in a combination of time sets).
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example: "<code>D19/2</code>" is the 19th of every second
                  							month. If this expression is evaluated on March 14, 2000 
                  							<a class="termref" href="#prop-PIVL.phase">phase</a> is
                  							completed to: "<code>[20000319;20000320[/(2 mo)@DM</code>" and thus
                  							the two-months cycle begins with March 19, followed by May 19, etc. If
                  							the expression were evaluated by March 20, the cycle would begin at
                  							April 19, followed by June 19, etc.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							If no calendar digits follow after the calendar period identifier, the
                  							pattern matches any date. The integer number following the slash
                  							indicates the length of the cycle. <a class="termref" href="#prop-PIVL.phase">phase</a>
                  							in these cases
                  							has only the width specified to be the duration of the anchoring
                  							calendar-cycle (e.g., in this example 1 day.)
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example: "<code>CD/2</code>" is every other day,
                  							"<code>H/8</code>" is every 8th hour, for the duration of one hour.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Institution Specified Time.</strong> Both a 
                  							<em>PIVL</em> literal and a calendar pattern may be followed by
                  							the three letters "IST" to indicate that within the larger calendar
                  							cycle (e.g., for "hour of the day" the larger calendar cycle is "day")
                  							the repeating events are to be appointed at institution specified
                  							times. This is used to specify such schedules as "three times a day"
                  							where the periods between two subsequent events may vary well between
                  							4 hours (between breakfast and lunch) and 10 hours (over night.)
                  							
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="examples-PIVL.literal">&nbsp;</a>
                     			Table
                     			44: 
                     								Examples for literal expressions for PIVLs
                     				
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">Generic Form</th>
                        <th colspan="1">Calendar Pattern Form</th>
                        <th colspan="1">Description</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">[198709;198710[/(1 a)@MY</td>
                        <td colspan="1">M09</td>
                        <td colspan="1">
                           										September, the entire month, every year (note that in 
                           										the year 1987 in the generic form is irrelevant since the
                           										periodic interval recurs every year past and future.)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870915;19870916[/(1 a)@DM</td>
                        <td colspan="1">M0915</td>
                        <td colspan="1">September 15, the entire day, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1987091516;1987091517[/(1 a)@DM</td>
                        <td colspan="1">M091516</td>
                        <td colspan="1">September 15 at 4 PM, the entire hour, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[198709151630;198709151710]/(1 a)@DM</td>
                        <td colspan="1">M09151630..1710</td>
                        <td colspan="1">September 15 at 4:30 5:10 PM, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1987091516;[/(1 a)@DM</td>
                        <td colspan="1">&nbsp;</td>
                        <td colspan="1">September 15 at 4 PM, end time explicitly unknown, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[198709151630;198709151631[/(1 a)@DM</td>
                        <td colspan="1">M09151630</td>
                        <td colspan="1">September 15 at 4:30 PM, the entire minute, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1987091516;1987091517[/(1 mo)@DM</td>
                        <td colspan="1">D1516..17</td>
                        <td colspan="1">every 15th day of the month at 4 to 5 PM</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1987091516;1987091517[/(1 mo)</td>
                        <td colspan="1">&nbsp;</td>
                        <td colspan="1">
                           										September 15, 1987 from 4 to 5 PM and then every 730.5 
                           										hours continuously (this example has little practical value 
                           										beyond comparing the unaligned with the aligned form in the 
                           										preceding row.)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[1987091516;1987091517[/(1 mo)@HD</td>
                        <td colspan="1">&nbsp;</td>
                        <td colspan="1">
                           										September 15, 1987 from 4 to 5 PM and then every 30.4375
                           										days, but aligned to the hour of the day.
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[1 mo]/(2 mo)@MY</td>
                        <td colspan="1">M/2</td>
                        <td colspan="1">
                           										every other month of the year; (Jan, Mar, ...) vs. (Feb, 
                           										Apr, ...) is undefined
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[198701;197502[/(2 mo)@MY</td>
                        <td colspan="1">M01..12/2</td>
                        <td colspan="1">every other month of the year, Jan, Mar, ...</td>
                     </tr>
                     <tr>
                        <td colspan="1">[198702;197503[/(2 mo)@MY</td>
                        <td colspan="1">M02..12/2</td>
                        <td colspan="1">every other month of the year, Feb, Apr, ...</td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870401;19870930[/(1 a)@DM</td>
                        <td colspan="1">M04..09</td>
                        <td colspan="1">April 1until (and including) September 30</td>
                     </tr>
                     <tr>
                        <td colspan="1">19870401-0930/(1 a)@DM</td>
                        <td colspan="1">M0401..0930</td>
                        <td colspan="1">
                           										April 1 to September 30 (the generic form uses the 
                           										dash-form for the phase interval)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[20001202;20001203[/(1 wk)@DW</td>
                        <td colspan="1">J6</td>
                        <td colspan="1">every Saturday</td>
                     </tr>
                     <tr>
                        <td colspan="1">[20001202;20001203[/(2 wk)@DW</td>
                        <td colspan="1">J6/2</td>
                        <td colspan="1">every other Saturday</td>
                     </tr>
                     <tr>
                        <td colspan="1">[20001202;20001203[/(3 wk)@DW</td>
                        <td colspan="1">J6/3</td>
                        <td colspan="1">every third Saturday</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1 d]/(2 d)@DW</td>
                        <td colspan="1">J/2</td>
                        <td colspan="1">
                           										every other day of the week; (Mon, Wed, Fri, ...) vs. 
                           										(Tue, Thu, Sat, ...)  is undefined
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[20001204;20001205[/(2 d)@DW</td>
                        <td colspan="1">J2..6/2</td>
                        <td colspan="1">
                           										every other day of the week (Tue, Thu, Sat, Tue, Thu, 
                           										Sat, ...)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[20001204;20001205[/(2 d)</td>
                        <td colspan="1">D/2</td>
                        <td colspan="1">
                           										every other day (Tue, Thu, Sat, Mon, Wed, Fri, Sun, 
                           										Tue, ...)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870601;19870606[/(1 wk)@DW</td>
                        <td colspan="1">J1..5</td>
                        <td colspan="1">Monday to Friday every week</td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870601;19870608[/(2 wk)</td>
                        <td colspan="1">W/2</td>
                        <td colspan="1">every other week (continuous)</td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870101;19870105[/(2 wk)@WY</td>
                        <td colspan="1">WY/2</td>
                        <td colspan="1">
                           										every other week of the year (a blunt example on the 
                           										impact of the calendar alignment: the phase interval spans 
                           										only 4 days and yet it represents an entire week in the 
                           										calendar alignment "week of the year".)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870406;19870413[/(1 a)@WY</td>
                        <td colspan="1">WY15</td>
                        <td colspan="1">the 15th calendar week of every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870105;19870112[/(1 mo)@WM</td>
                        <td colspan="1">WM2</td>
                        <td colspan="1">the second week of the month, every month</td>
                     </tr>
                     <tr>
                        <td colspan="1">[19870508;19870509[/(1 a)@DY</td>
                        <td colspan="1">DY128</td>
                        <td colspan="1">the 128th day of the year, every year</td>
                     </tr>
                     <tr>
                        <td colspan="1">[10 min]/(2 d)</td>
                        <td colspan="1">&nbsp;</td>
                        <td colspan="1">
                           										every other day for 10 minutes (only width of repeating 
                           										interval is known)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">[1 h]/(8 h)</td>
                        <td colspan="1">H/8</td>
                        <td colspan="1">every eighth hour (each time a 60 minutes interval)</td>
                     </tr>
                     <tr>
                        <td colspan="1">[1 h]/(8 h) IST</td>
                        <td colspan="1">H/8 IST</td>
                        <td colspan="1">
                           										three times a day at institution specified times (each 
                           										time a 60 minutes interval)
                           									
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">/(8 h) IST</td>
                        <td colspan="1">&nbsp;</td>
                        <td colspan="1">
                           										three times a day at institution specified times. 
                           										Nothing about the repeating interval is known i.e., this 
                           										includes only a period (frequency), while the phase is left 
                           										undefined
                           									
                        </td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Periodic-Intervals-as-Sets"></a>5.1.6 
               </h4>
            </td>
            <td class="body_col">
               <h4>Periodic Intervals as Sets</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The essential property of a set is that it contains elements. For
                  						non-aligned <em>PIVL</em>s, the <em>contains</em>-property is
                  						defined as follows. A <a class="termref" href="#dt-TS">TS</a>&nbsp;<em>t</em> is
                  						contained in the <em>PIVL</em> if and only if there is an integer
                  						<em>i</em> for which <em>t</em> plus <a class="termref" href="#prop-PIVL.period">period</a>
                  						times <em>i</em> is an element of <a class="termref" href="#prop-PIVL.phase">phase</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (PIVL&lt;TS&gt; x, TS t)
      where x.nonNull.and(x.alignment.isNull) {
   x.contains(t).equal(exists(INT i) {
      x.phase.contains(t.plus(x.period.times(i)));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For calendar-aligned <em>PIVL</em>s the <em>contains</em>
                  						property is defined using the calendar-cycle's sum(<em>t</em>,
                  						<em>n</em>) property that adds <em>n</em> such calendar cycles
                  						to the time <em>t</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant (PIVL&lt;TS&gt; x, TS t, CalendarCycle c)
      where x.nonNull.and(c.equal(x.alignment)) {
   x.contains(t).equal(exists(INT i) {
      x.phase.contains(c.sum(t, i));
      });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="EIVL"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-EIVL"></a>5.2 
               </h3>
            </td>
            <td class="body_col">
               <h3>Event-Related Periodic Interval of Time (EIVL) specializes <a class="termref" href="#dt-SET">SET</a></h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					Specifies a periodic interval of time where the recurrence is based on
                  					activities of daily living or other important events that are
                  					time-related but not fully determined by time.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					For example, "one hour after breakfast" specifies the beginning of the
                  					interval at one hour after breakfast is finished. Breakfast is assumed
                  					to occur before lunch but is not determined to occur at any specific
                  					time.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-EIVL">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-EIVL"></a><pre>
template&lt;TS T&gt;
protected type EventRelatedPeriodicInterval&lt;T&gt; alias EIVL&lt;T&gt;
           specializes  SET&lt;T&gt;{
           CS           event;
           IVL&lt;PQ&gt;      offset;
           IVL&lt;T&gt;       occurrenceAt(TS eventTime);
           BL           contains(TS);
  literal  ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EIVL.event"></a>5.2.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Event : <a class="termref" href="#dt-CS">CS</a></h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							A code for a common (periodical) activity of daily living based on
                  							which the event related periodic interval is specified.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Such events qualify for being adopted in the domain of this
                  							attribute for which all of the following is true:
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li>
                     								the event commonly occurs on a regular basis
                     							
                  </li>
                  <li>
                     								the event is being used for timing activities, and
                     							
                  </li>
                  <li>
                     								the event is not entirely determined by time
                     							
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-TimingEvent">&nbsp;</a>
                     			Table
                     			45: Domain TimingEvent
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>name</th>
                        <th>definition</th>
                     </tr>
                  </thead>
                  <tr>
                     <td>AC</td>
                     <td>AC</td>
                     <td>before meal (from lat. ante cibus)</td>
                  </tr>
                  <tr>
                     <td>ACD</td>
                     <td>ACT</td>
                     <td>before lunch (from lat. ante cibus diurnus)</td>
                  </tr>
                  <tr>
                     <td>ACM</td>
                     <td>ACM</td>
                     <td>before breakfast (from lat. ante cibus matutinus)</td>
                  </tr>
                  <tr>
                     <td>ACV</td>
                     <td>ACV</td>
                     <td>before dinner (from lat. ante cibus vespertinus)</td>
                  </tr>
                  <tr>
                     <td>HS</td>
                     <td>HS</td>
                     <td>the hour of sleep</td>
                  </tr>
                  <tr>
                     <td>IC</td>
                     <td>IC</td>
                     <td>between meals (from lat. inter cibus)</td>
                  </tr>
                  <tr>
                     <td>ICD</td>
                     <td>ICD</td>
                     <td>between lunch and dinner</td>
                  </tr>
                  <tr>
                     <td>ICM</td>
                     <td>ICM</td>
                     <td>between breakfast and lunch</td>
                  </tr>
                  <tr>
                     <td>ICV</td>
                     <td>ICV</td>
                     <td>between dinner and the hour of sleep</td>
                  </tr>
                  <tr>
                     <td>PC</td>
                     <td>PC</td>
                     <td>after meal (from lat. post cibus)</td>
                  </tr>
                  <tr>
                     <td>PCD</td>
                     <td>PCD</td>
                     <td>after lunch (from lat. post cibus diurnus)</td>
                  </tr>
                  <tr>
                     <td>PCM</td>
                     <td>PCM</td>
                     <td>after breakfast (from lat. post cibus matutinus)</td>
                  </tr>
                  <tr>
                     <td>PCV</td>
                     <td>PCV</td>
                     <td>after dinner (from lat. post cibus vespertinus)</td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EIVL.offset"></a>5.2.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>Offset : <a class="termref" href="#dt-IVL">IVL</a>&lt;<a class="termref" href="#dt-PQ">PQ</a>&gt;
               </h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  							An interval of elapsed time (duration, not absolute point in time)
                  							that marks the offsets for the beginning, width and end of
                  							the <em>EIVL</em> measured from the time each such
                  							event actually occurred.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example: if the specification is "one hour before breakfast for 10
                  							minutes" <a class="termref" href="#prop-IVL.low">IVL.low</a> of <em>offset</em> is 1 h
                  							and the <a class="termref" href="#prop-IVL.width">IVL.width</a> of <em>offset</em> is
                  							10 min.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-EIVL.literal"></a>5.2.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							The literal form for an <em>EIVL</em> begins with the event
                  							code followed by an optional interval of the time-difference.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
EIVL&lt;TS&gt;.literal ST {
   EIVL&lt;TS&gt; : event          { $.event.equal($1); }
            | event offset   { $.event.equal($1);
                               $.offset.equal($2); };
   CS event : ST             { $.code.equal($1);
                               $.codeSystem.equal(2.16.840.1.113883.5.1019); }
   IVL&lt;PQ&gt; offset
            : "+" IVL&lt;PQ&gt;    { $.equal($2); }
            | "-" IVL&lt;PQ&gt;    { $.low.equal($2.high.negate);
                               $.high.equal($2.low.negate);
                               $.width.equal($2.width);
                               $.lowClosed($2.highClosed);
                               $.highClosed($2.lowClosed); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							For example, one hour after meal would be
                  							"<code>PC+[1h;1h]</code>". One hour before bedtime for 10 minutes:
                  							"<code>HS-[50min;1h]</code>".
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Resolving-the-Event-Relatedness"></a>5.2.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Resolving the Event-Relatedness</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						An <em>EIVL</em> is a set of time, that is,
                  						one can test whether a particular time or time interval is an element
                  						of the set. Whether an <em>EIVL</em>
                  						contains a given interval of time is decided using a relation event
                  						&#967; <em>time</em> referred to as EVENT(<em>event</em>,
                  						<em>time</em>). The property occurrenceAt(<em>t</em>) is the
                  						occurrence interval that would exist if the event occurred at time
                  						<em>t</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(EIVL&lt;T&gt; x, T eventTime, IVL&lt;T&gt; v)
      where v.equal(x.occurrenceAt(eventTime)) {
   v.low.equal(eventTime.plus(x.offset.low));
   v.high.equal(eventTime.plus(x.offset.high));
   v.lowClosed.equal(x.offset.lowClosed);
   v.highClosed.equal(x.offset.highClosed);
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Thus, an <em>EIVL</em> contains a <a class="termref" href="#dt-TS">TS</a>&nbsp;
                  						<em>t</em> if there is an event time <em>e</em> with an
                  						occurrence interval <em>v</em> such that <em>v</em> contains
                  						<em>t</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(EIVL&lt;T&gt; x, T y) {
   x.contains(y).equal(exists(T e, IVL&lt;T&gt; v)
      where EVENT(x.event, y).and(v.resolvedAt(y)) {
         v.contains(y);
         });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr><a name="GTS"></a><tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h3><a name="dt-GTS"></a>5.3 
               </h3>
            </td>
            <td class="body_col">
               <h3>General Timing Specification (GTS) specializes <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;
               </h3>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                  					A <a class="termref" href="#dt-"></a>&lt;<a class="termref" href="#dt-dt-TS">dt-TS</a>&gt;, specifying the timing of events and actions
                  					and the cyclical validity-patterns that may exist for certain kinds of
                  					information, such as phone numbers (evening, daytime), addresses (so
                  					called "snowbirds," residing closer to the equator during winter and
                  					farther from the equator during summer) and office hours.
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p><em>GTS</em> has the following aspects:
                  				
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <ul style="margin-left:20px;">
                  <li><em>GTS</em> as a general <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;.
                     						From this aspect <em>GTS</em> answers whether any given
                     						<a class="termref" href="#dt-TS">TS</a> falls in the schedule described by the
                     						<em>GTS</em> value.
                     					
                  </li>
                  <li><em>GTS</em> as the combination of multiple <a class="termref" href="#dt-PIVL">PIVL</a>s. This
                     						aspect describes how both simple and complex repeat-patterns are
                     						specified with the <em>GTS</em>.
                     					
                  </li>
                  <li><em>GTS</em> as a generator of a <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>&gt;.
                     						From this aspect, <em>GTS</em> can generate all occurrence
                     						intervals of an event or action, or all validity periods for a fact.
                     					
                  </li>
                  <li><em>GTS</em> as an expression-syntax defined for a calendar. This aspect is the
                     						<em>GTS</em> literal form.
                     					
                  </li>
               </ul>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  					In all cases <em>GTS</em> is defined as a <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;.
                  					Using <a class="termref" href="#prop-SET.union">SET.union</a>, <a class="termref" href="#prop-SET.intersect">SET.intersect</a>
                  					and <a class="termref" href="#prop-SET.difference">SET.difference</a>,
                  					more complex <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;s can be
                  					constructed from simpler ones. Ultimately the building blocks from
                  					which all <em>GTS</em> values are constructed are <a class="termref" href="#dt-IVL">IVL</a>,
                  					<a class="termref" href="#dt-PIVL">PIVL</a>,
                  					and <a class="termref" href="#dt-EIVL">EIVL</a>. The construction of the <em>GTS</em> value can
                  					be specified in the literal form. No special data type structure is
                  					defined that would generate a combination of simpler time-sets from a
                  					given <em>GTS</em> value. While any implementation would have to contain such a
                  					structured representation, it is not needed in order to exchange <em>GTS</em>
                  					values given the literal form.<a name="fn-src56"></a><a href="#fn56"><sup style="font-size: smaller">56</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" id="dtdl-GTS">
                  <tr>
                     <td class="dtdl"><pre><a name="dtdl-GTS"></a><pre>
type GeneralTimingSpecification alias GTS specializes SET&lt;TS&gt; {
            IVL&lt;TS&gt;   hull;
            IVL&lt;TS&gt;   nextTo(TS x)
            IVL&lt;TS&gt;   nextAfter(TS x)
            GTS       periodicHull(GTS x);
            BL        interleaves(GTS x);
  demotion  LIST&lt;IVL&lt;TS&gt;&gt;;
  literal   ST;
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Convex-Hull"></a>5.3.1 
               </h4>
            </td>
            <td class="body_col">
               <h4>Convex Hull</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A convex hull is the least interval that is a superset of all
                  						occurrence intervals. As noted in <a class="termref" href="#prop-SET.hull">SET.hull</a>, all
                  						totally ordered sets have a convex hull. Because <em>GTS</em> is a
                  						<a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;, which is totally ordered,
                  						all <em>GTS</em> values have a convex hull.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The convex hull of a <em>GTS</em> can less formally be called the "outer bound
                  						interval". Thus, the convex hull of a <em>GTS</em> describes the absolute
                  						beginning and end of the repeating schedule. For infinite repetitions
                  						(e.g., a <a class="termref" href="#dt-PIVL">PIVL</a>) the convex hull has infinite
                  						bounds.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-datyp2fig14.jpg" target="_blank" border="0">Convex Hull of a Schedule (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-GTS-as-a-Sequence-of-Occurrence-Intervals"></a>5.3.2 
               </h4>
            </td>
            <td class="body_col">
               <h4>GTS as a Sequence of Occurrence Intervals</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em>GTS</em> value is a generator of a sequence of time
                  						intervals during which an event or activity occurs, or during which a
                  						state is effective.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <strong>nextTo</strong>-property maps to every point in
                  						time <em>t</em> the greatest continuous subset (an "occurrence
                  						interval") <em>v</em> of the <em>GTS</em> value
                  						<em>S</em>, where <em>v</em> is the interval closest to
                  						<em>t</em> that begins later than <em>t</em> or that contains
                  						<em>t</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GTS S, TS t, IVL&lt;TS&gt; v) {
   v.equal(S.nextTo(t)).equal(
      S.contains(o).and(
         forall(IVL&lt;TS&gt; u) where x.contains(u) {
            u.contains(v).implies(u.equal(v));
            })
         .and(v.contains(t).or(forall(TS i) where t.lessOrEqual(i)
               .and(i.lessThan(v.low)) {
            S.conatins(i).not; })));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <strong>nextAfter</strong>-property maps to every point
                  						in time <em>t</em> the greatest continuous subset (an "occurrence
                  						interval") <em>v</em> of the<em>GTS</em> value
                  						<em>S</em>, where <em>v</em> is the interval closest to
                  						<em>t</em> that begins later than <em>t</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GTS S, TS t) {
   S.contains(t).not.implies(S.nextAfter(t).equal(S.nextTo(t)));
   S.contains(t).implies(S.nextAfter(t).equal(
               S.except(nextTo(t)).nextTo(t)));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						A <em>GTS</em> value can be converted into a <a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>&gt;.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GTS x)
      where x.isEmpty {
   ((LIST&lt;IVL&lt;TS&gt;&gt;)x).isEmpty; };

invariant(GTS x, IVL&lt;TS&gt; first)
      where x.notEmpty.and(x.hull.low.nonNull)
                      .and(first.equal(x.nextTo(x.hull.low)) {
   ((LIST&lt;IVL&lt;TS&gt;&gt;)x).head.equal(first);
   ((LIST&lt;IVL&lt;TS&gt;&gt;)x).tail.equal(
      (LIST&lt;IVL&lt;TS&gt;&gt;)x.except(first));
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="section-Interleaving-Schedules-and-Periodic-Hull"></a>5.3.3 
               </h4>
            </td>
            <td class="body_col">
               <h4>Interleaving Schedules and Periodic Hull</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col"><a href="graphics/L-datyp2fig15.jpg" target="_blank" border="0">Interleaving Schedules and Periodic Hull (link to graphic opens in a  new window)</a></td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For two <em>GTS</em> values <em>A</em> and <em>B</em> we
                  						say that <em>A</em> interleaves <em>B</em> if their occurrence
                  						intervals interleave on the time line. This concept is visualized in
                  						Figure above.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For <em>GTS</em> values <em>A</em> and <em>B</em>
                  						to interleave the occurrence intervals of both groups can be arranged
                  						in pairs of corresponding occurrence intervals. It must further hold
                  						that for all corresponding occurrence intervals <em>a</em>
                  						&#8838; <em>A</em> and <em>b</em> &#8838; <em>B</em>,
                  						<em>a</em> starts before <em>b</em> starts (or at the same
                  						time) and <em>b</em> ends after <em>a</em> ends (or at the
                  						same time).
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The interleaves-relation holds when two schedules have the same
                  						average frequency, and when the second schedule never "outpaces" the
                  						first schedule. That is, no occurrence interval in the second schedule
                  						may start before its corresponding occurrence interval in the first
                  						schedule.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						With two interleaving <em>GTS</em> values, one can derive a
                  						periodic hull such that the occurrence intervals of the periodic hull
                  						is the convex hull of the corresponding occurrence intervals.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The periodic hull is important to construct two schedules by combining
                  						<a class="termref" href="#dt-GTS">GTS</a> expressions. For example, to construct the periodic
                  						interval from Memorial Day to Labor Day every year, one first needs to
                  						set up the schedules <em>M</em> for Memorial Day (the last Monday
                  						in May) and <em>L</em> for Labor Day (the first Monday in
                  						September) and then combine these two schedules using the periodic
                  						hull of <em>M</em> and <em>L</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GTS A, B)
      where x.nonNull.and(y.nonNull) {
   A.interleaves(B).equal(
      forall(IVL&lt;TS&gt; a, b, c; TS t)
         where a.equal(A.nextTo(t))
                .and(b.equal(B.nextTo(a.low)))
                .and(c.equal(A.nextTo(b.high))) {
            b.equal(B.nextTo(a.high));
            a.low.lessOrEqual(b.low);
            c.equal(A.nextTo(b.high));
            c.equal(a).or(c.equal(A.nextAfter(a.high)));
            });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						For two <em>GTS</em> values <em>A</em> and <em>B</em>
                  						where <em>A</em> interleaves <em>B</em>, a periodic hull is
                  						defined as the pair wise convex hull of the corresponding occurrence
                  						intervals of <em>A</em> and <em>B</em>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
invariant(GTS A, B, C)
      where A.interleaves(B) {
   A.periodicHull(B).equal(C).equal(
      forall(IVL&lt;TS&gt; a, b; TS t)
         where a.equal(A.nextTo(t))
                .and(b.equal(B.nextTo(a.low))) {
            C.contains(c).equal(c.equal(a.hull(b)));
            });
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The interleaves-relation is reflexive, asymmetric, and
                  						intransitive. The periodic hull operation is non-commutative and
                  						non-associative.<a name="fn-src57"></a><a href="#fn57"><sup style="font-size: smaller">57</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h4><a name="prop-GTS.literal"></a>5.3.4 
               </h4>
            </td>
            <td class="body_col">
               <h4>Literal Form</h4>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The <em>GTS</em> literal allows specifying combinations of
                  						<a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>, <a class="termref" href="#dt-PIVL">PIVL</a>, and <a class="termref" href="#EIVL"></a>
                  						using the set operations union and intersection.<a name="fn-src58"></a><a href="#fn58"><sup style="font-size: smaller">58</sup></a></p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						Unions are speecified by a semicolon-separated list. Intersections
                  						are specified by a whitespace separated list. Intersection has higher
                  						priority than union. Set difference can be specified
                  						using a backslash; differences have an intermediate priority,
                  						i.e. weaker than intersection but stronger than union.
                  						Also parentheses can be used to overcome operator precedence when
                  						necessary.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%">
                  <tr>
                     <td class="dtdl"><pre><pre>
GTS.literal ST {
   GTS symbol : union                      { $.equal($1); }
              | exclusion                  { $.equal($1); };
   SET&lt;TS&gt; union
              : symbol ";" intersection    { $.equal($1.union($3)); }
              | intersection               { $.equal($1); };
   SET&lt;TS&gt; exclusion
              : symbol "\" intersection    { $.equal($1.except($3)); }
              | intersection               { $.equal($1); };
   SET&lt;TS&gt; intersection
              : hull intersection          { $.equal($1.intersection($2)); }
              | hull                       { $.equal($1); };
   SET&lt;TS&gt; hull
              : hull ".." factor           { $.equal($1.periodicHull($3)); }
              | factor                     { $.equal($1); };
   SET&lt;TS&gt; factor
              : IVL&lt;TS&gt;                    { $.equal($1); }
              | PIVL&lt;TS&gt;                   { $.equal($1); }
              | EIVL&lt;TS&gt;                   { $.equal($1); }
              | "(" GTS ")"                { $.equal($1); };
};</pre></pre></td>
                  </tr>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  						The following table contains paradigmatic examples for complex
                  						<em>GTS</em> literals. For simpler examples refer to the literal
                  						forms of <a class="termref" href="#dt-IVL">IVL</a>, <a class="termref" href="#dt-PIVL">PIVL</a>,
                  						and <a class="termref" href="#dt-EIVL">EIVL</a>.
                  					
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="examples-GTS.literal">&nbsp;</a>
                     			Table
                     			46: 
                     							Examples for Literal Expressions for Generic Timing
                     							Specifications
                     						
                  </caption>
                  <thead>
                     <tr>
                        <th colspan="1">Literal Expression</th>
                        <th colspan="1">Meaning</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td colspan="1">M09 D15 H16 N30 S34.12</td>
                        <td colspan="1">
                           									September 15 at 4:30:34.12 PM as the intersection of
                           									multiple periodic intervals of times (calendar patterns)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">M0915163034.12</td>
                        <td colspan="1">
                           									September 15 at 4:30:34.12 PM as one simple periodic
                           									interval of time (calendar pattern)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">M01; M03; M07</td>
                        <td colspan="1">
                           									January, March, and July (a union of three periodic 
                           									intervals of time)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">M04..09 M/2</td>
                        <td colspan="1">
                           									Every second month from April to September (April, June, 
                           									August)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">J1; J2; J4</td>
                        <td colspan="1">Monday, Tuesday, Thursday</td>
                     </tr>
                     <tr>
                        <td colspan="1">W/2 J2</td>
                        <td colspan="1">
                           									every other Tuesday (intersection of every other week and 
                           									every Tuesday)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">1999 WY15</td>
                        <td colspan="1">
                           									the 15th calendar week in 1999 (period code is optional 
                           									for the highest calendar unit)
                           								
                        </td>
                     </tr>
                     <tr>
                        <td colspan="1">WM2 J6</td>
                        <td colspan="1">Saturday of the 2nd week of the month</td>
                     </tr>
                     <tr>
                        <td colspan="1">M05 WM2 J6</td>
                        <td colspan="1">Saturday of the 2nd week of May</td>
                     </tr>
                     <tr>
                        <td colspan="1">M05 DM08..14 J7</td>
                        <td colspan="1">Mother's day (second Sunday in May.)</td>
                     </tr>
                     <tr>
                        <td colspan="1">J1..5 H0800..1600</td>
                        <td colspan="1">Monday to Friday from 8 AM to 4 PM</td>
                     </tr>
                     <tr>
                        <td colspan="1">
                           									J1..4 H0800..1600;
                           									J5    H0800..1200
                           								
                        </td>
                        <td colspan="1">Monday to Thursday 8 AM to 4 PM and Friday 8 AM to 12 noon.</td>
                     </tr>
                     <tr>
                        <td colspan="1">[10 d] H/8</td>
                        <td colspan="1">Three times a day over 10 days (each time a 60 minutes interval).</td>
                     </tr>
                     <tr>
                        <td colspan="1">H0800..1600 \J3</td>
                        <td colspan="1">Every day from 8 AM to 4 PM, except Wednesday.</td>
                     </tr>
                     <tr>
                        <td colspan="1">(M0825..31 J1)..M0831</td>
                        <td colspan="1">The last calendar week of August.</td>
                     </tr>
                     <tr>
                        <td colspan="1">JHNUSMEM..JHNUSLBR</td>
                        <td colspan="1">The season from the U.S. holidays Memorial Day to Labor Day</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>
               <h5><a name="datyp2gtslitsym"></a>5.3.4.1 
               </h5>
            </td>
            <td class="body_col">
               <h5>Symbolic Abbreviations for GTS expressions.</h5>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							Table <a href="#domain-GTSAbbreviation">Table
                     			47</a> defines symbolic
                  							abbreviations for <em>GTS</em> values that can be used in
                  							literals instead of their equivalent term. Abbreviations
                  							are defined for common periods of the day (AM, PM),
                  							for periods of the week (business day, weekend), and for holidays.
                  							The computation for the dates of some holidays, namely
                  							the Easter holiday, involve some sophistication that goes beyond what
                  							one would represent in a <em>GTS</em> literal. It is
                  							assumed that the dates of these holidays are drawn from some table or
                  							some generator module that is outside the scope of this specification.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <p>
                  							These abbreviations are named <em>GTS</em> values and they
                  							can in turn be a factor of a <em>GTS</em> literal. For example,
                  							one can say "JHCHRXME H08..12" to indicate that the office hours on
                  							Christmas Eve is from 8 AM to 1PM only. And one can say
                  							"JHNUSMEM..JHNUSLBR" for the typical midwestern swimming pool season
                  							from Memorial Day to Labor Day.
                  						
               </p>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                  <caption><a name="domain-GTSAbbreviation">&nbsp;</a>
                     			Table
                     			47: Domain GTSAbbreviation
                  </caption>
                  <thead>
                     <tr>
                        <th>code</th>
                        <th>definition</th>
                        <th>formal def.</th>
                     </tr>
                  </thead>
                  <tbody>
                     <tr>
                        <td>AM&nbsp;</td>
                        <td>Every morning at institution specified times.&nbsp;</td>
                        <td>H00..11 IST&nbsp;</td>
                     </tr>
                     <tr>
                        <td>PM&nbsp;</td>
                        <td>Every afternoon at institution specified times.&nbsp;</td>
                        <td>H12..23 IST&nbsp;</td>
                     </tr>
                     <tr>
                        <td>BID&nbsp;</td>
                        <td>Two times a day at institution specified time&nbsp;</td>
                        <td>/(12 h) IST&nbsp;</td>
                     </tr>
                     <tr>
                        <td>TID&nbsp;</td>
                        <td>Three times a day at institution specified time&nbsp;</td>
                        <td>/(8 h) IST&nbsp;</td>
                     </tr>
                     <tr>
                        <td>QID&nbsp;</td>
                        <td>Four times a day at institution specified time&nbsp;</td>
                        <td>/(6 h) IST&nbsp;</td>
                     </tr>
                     <tr>
                        <td>JB&nbsp;</td>
                        <td>Regular business days (Monday to Friday excluding holidays)&nbsp;</td>
                        <td>J1..5 \JH&nbsp;</td>
                     </tr>
                     <tr>
                        <td>JE&nbsp;</td>
                        <td>Regular weekends (Saturday and Sunday excluding holidays)&nbsp;</td>
                        <td>J6..7&nbsp;</td>
                     </tr>
                     <tr>
                        <td>JH&nbsp;</td>
                        <td>Holidays&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;GTSAbbreviationHolidaysChristianRoman&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHRXME&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>M1224&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHRXMS&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>M1225&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHRNEW&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>M0101&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHREAS&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHRGFR&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHCHRPEN&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;JHNUS&nbsp;</td>
                        <td>United States National Holidays (public holidays for federal employees established by U.S. Federal law 5 U.S.C. 6103).&nbsp;</td>
                        <td>&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSMLK&nbsp;</td>
                        <td>Dr. Martin Luther King, Jr. Day, the third Monday in January.&nbsp;</td>
                        <td>M0115..21 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSPRE&nbsp;</td>
                        <td>Washington's Birthday (Presidential Day) the third Monday in February.&nbsp;</td>
                        <td>M0215..21 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSMEM&nbsp;</td>
                        <td>Memorial Day, the last Monday in May.&nbsp;</td>
                        <td>M0525..31 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSMEM5&nbsp;</td>
                        <td>Friday before Memorial Day Weekend&nbsp;</td>
                        <td>M0522..28 J5&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSMEM6&nbsp;</td>
                        <td>Saturday of Memorial Day Weekend&nbsp;</td>
                        <td>M0523..29 J6&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSIND&nbsp;</td>
                        <td>Independence Day (4th of July)&nbsp;</td>
                        <td>M0704&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSIND5&nbsp;</td>
                        <td>Alternative Friday before 4th of July Weekend [5 U.S.C. 6103(b)].&nbsp;</td>
                        <td>M0703 J5&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSIND1&nbsp;</td>
                        <td>Alternative Monday after 4th of July Weekend [5 U.S.C. 6103(b)].&nbsp;</td>
                        <td>M0705 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSLBR&nbsp;</td>
                        <td>Labor Day, the first Monday in September.&nbsp;</td>
                        <td>M0901..07 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSCLM&nbsp;</td>
                        <td>Columbus Day, the second Monday in October.&nbsp;</td>
                        <td>M1008..14 J1&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSVET&nbsp;</td>
                        <td>Veteran's Day, November 11.&nbsp;</td>
                        <td>M1111&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSTKS&nbsp;</td>
                        <td>Thanksgiving Day, the fourth Thursday in November.&nbsp;</td>
                        <td>M1122..28 J4&nbsp;</td>
                     </tr>
                     <tr>
                        <td>&nbsp;&nbsp;&nbsp;&nbsp;JHNUSTKS5&nbsp;</td>
                        <td>Friday after Thanksgiving.&nbsp;</td>
                        <td>M1123..29 J5&nbsp;</td>
                     </tr>
                  </tbody>
               </table>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								This table is not complete, nor does it include religious holidays
                  								other than Christian (of the Gregorian [Western] tradition) or
                  								national holidays countries other than those of the US. This
                  								is a limitation to be remedied by subsequent additions.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap>&nbsp;</td>
            <td class="number_col" nowrap>&nbsp;</td>
            <td class="body_col">
               <blockquote><b>NOTE: </b>
                  								Holidays are locale-specific. Exactly which religious holidays are
                  								subsumed under JH depends on the locale and other tradition. For
                  								global interoperability, using constructed <em>GTS</em>
                  								expressions is safer than named holidays. However, some holidays that
                  								depend on moon phases (e.g., Easter) or ad-hoc decree cannot be easily
                  								expressed in a <em>GTS</em> literal.
                  							
               </blockquote>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <hr title="Separator from footer">
               <!--divN/head-->
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h2><a name="section-Informative-Types"></a>A 
                     </h2>
                  </td>
                  <td class="body_col">
                     <h2>Informative Types</h2>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        				These types are currently marked as informative while known issues 
                        				relating to their design are being resolved.
                        			
                     </p>
                  </td>
               </tr><a name="PPD"></a><tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h3><a name="dt-PPD"></a>A.1 
                     </h3>
                  </td>
                  <td class="body_col">
                     <h3>Parametric Probability Distribution (PPD) specializes T</h3>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                        					A generic data type extension specifying uncertainty of quantitative
                        					data using a distribution function and its parameters. Aside from the 
                        					specific parameters of the distribution, a mean (expected value) and 
                        					standard deviation is always given to help maintain a minimum layer
                        					of interoperability if receiving applications cannot deal with a
                        					certain probability distribution.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                        <caption><a name="dt-PPD-prop-summary">&nbsp;</a>
                           			Table
                           			48: Property Summary of
                           Parametric Probability Distribution
                        </caption>
                        <thead>
                           <tr>
                              <th>Name</th>
                              <th>Type</th>
                              <th>Description</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td>standardDeviation</td>
                              <td>QTY</td>
                              <td>
                                 							The primary measure of variance/uncertainty of the value (the square
                                 							root of the sum of the squares of the differences between all data
                                 							points and the mean). <em>standardDeviation</em> is used to normalize the
                                 							data for computing the distribution function. Applications that cannot
                                 							deal with probability distributions can still get an idea about the
                                 							confidence level by looking at <em>standardDeviation</em>.
                                 						
                              </td>
                           </tr>
                           <tr>
                              <td>distributionType</td>
                              <td>CE</td>
                              <td>
                                 							A code specifying the type of probability distribution. Possible
                                 							values are as shown in the attached table. The NULL value (unknown)
                                 							for the type code indicates that the probability distribution type is
                                 							unknown. In that case, standardDeviation
                                 							has the meaning of an informal guess.
                                 						
                              </td>
                           </tr>
                        </tbody>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" id="dtdl-PPD">
                        <tr>
                           <td class="dtdl"><pre><a name="dtdl-PPD"></a><pre>
template&lt;QTY T&gt;
type ParametricProbabilityDistribution&lt;T&gt; alias PPD&lt;T&gt; specializes T {
   QTY     standardDeviation;
   CS      distributionType;
   IVL&lt;T&gt;  confidenceInterval(REAL p);
   REAL    probability(IVL&lt;T&gt; x);
   PPD&lt;T&gt;  times(REAL x);
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					For example, the most common college entrance exam in the United
                        					States is the SAT, which is comprised of two parts: verbal and
                        					math. Each part has a minimum score of 400 (no questions answered
                        					correctly) and a perfect score of 800. In 1998, according to the
                        
                        					College Board, 1,172,779 college-bound seniors took the test. The mean
                        					score for the math portion of the test was 512, and the standard
                        					deviation 112. These parameter values (512, 112), tagged as the normal
                        					distribution parameters, paint a pretty good picture of test score
                        					distribution. In most cases, there is no need to specify all
                        					1-million+ points of data when just 2 parameters will do!
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col"><br><img class="graphic" border="0" src="graphics/DT-PPD-ex1.gif" alt="Example for a parametric probability distribution"><br>Example for a parametric probability distribution<br></td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					Note that the normal distribution is only one of several distributions
                        					defined for HL7.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					Since a <em>PPD</em> specializes T, a simple T value is
                        					the mean (expected value or first moment) of the probability
                        					distribution. Applications that cannot deal with distributions will
                        					take the simple T value neglecting the uncertainty. That simple value
                        					of type T is also used to standardize the data for computing the
                        					distribution.
                        					
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					Probability distributions are defined over integer or real numbers and
                        					normalized to a certain reference point (typically zero) and reference
                        					unit (e.g., <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a> = 1).
                        					When other quantities defined in
                        					this specification are used as base types, the mean and the
                        					<a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a> are used to scale the
                        					probability distribution. For example,
                        					if a <a class="termref" href="#dt-PPD_PQ">PPD&lt;PQ&gt;</a> for a length is given with mean 20 ft
                        					and a <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a> of 2 in,
                        					the normalized distribution function
                        					<em>f</em>(<em>x</em>) that maps a real number <em>x</em>
                        					to a probability density would be translated to
                        					<em>f</em>&#8242;(<em>x</em>&#8242;) that maps
                        					a length <em>x</em>&#8242; to a probability density as
                        					<em>f</em>&#8242;(<em>x</em>&#8242;) =
                        					<em>f</em>((<em>x</em>&#8242; - &#956;) / &#963;).
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					Where applicable, <em>PPD</em> conforms to
                        					the ISO <em>Guide to the Expression of Uncertainty in
                           					Measurement</em> (GUM) as reflected by NIST publication 1297
                        					<em>Guidelines for Evaluating and Expressing the Uncertainty of NIST
                           					Measurement Results</em>. <em>PPD</em> does not
                        					describe how uncertainty is to be evaluated but only how it is
                        					expressed. The concept of "standard uncertainty" as set forth by the
                        					ISO GUM corresponds to <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a>.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="prop-PPD.standardDeviation"></a>A.1.1 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Standard Deviation : <a class="termref" href="#dt-QTY">QTY</a></h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                        							The primary measure of variance/uncertainty of the value (the square
                        							root of the sum of the squares of the differences between all data
                        							points and the mean). <em>standardDeviation</em> is used to normalize the
                        							data for computing the distribution function. Applications that cannot
                        							deal with probability distributions can still get an idea about the
                        							confidence level by looking at <em>standardDeviation</em>.
                        						
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><em>standardDeviation</em> is
                        							a specialisation of <a class="termref" href="#dt-QTY">QTY</a> (from T.diffType)
                        							that expresses differences between values of type T. If T is
                        							<a class="termref" href="#dt-REAL">REAL</a> or <a class="termref" href="#dt-INT">INT</a>,
                        							T.diffType is also <a class="termref" href="#dt-REAL">REAL</a> or <a class="termref" href="#dt-INT">INT</a>
                        							respectively. However if T is <a class="termref" href="#dt-TS">TS</a>,
                        							T.diffType is a <a class="termref" href="#dt-PQ">PQ</a> in the dimension
                        							of time.
                        						
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%">
                        <tr>
                           <td class="dtdl"><pre><pre>
invariant(PPD x) {
   x.standardDeviation.dataType.implies(T.diffType);
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="prop-PPD.distributionType"></a>A.1.2 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Probability Distribution Type : <a class="termref" href="#dt-CE">CE</a></h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><strong>Definition:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</strong>
                        							A code specifying the type of probability distribution. Possible
                        							values are as shown in the attached table. The NULL value (unknown)
                        							for the type code indicates that the probability distribution type is
                        							unknown. In that case, <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a>
                        							has the meaning of an informal guess.
                        						
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><a href="#domain-ProbabilityDistributionType">Table
                           			49</a> 
                        							lists the defined
                        							probability distributions. Many distribution types are defined in
                        							terms of special parameters (e.g., the parameters &#945; and &#946;
                        							for the &#947;-distribution, number of degrees of freedom for the
                        							<em>t</em>-distribution, etc.)  For all distribution types,
                        							however, the mean and standard deviation are defined. 
                        							
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                        <caption><a name="domain-ProbabilityDistributionType">&nbsp;</a>
                           			Table
                           			49: Domain ProbabilityDistributionType
                        </caption>
                        <thead>
                           <tr>
                              <th>code</th>
                              <th>name</th>
                              <th>definition</th>
                           </tr>
                        </thead>
                        <tr>
                           <td>(NULL)</td>
                           <td>(NULL)</td>
                           <td>
                              									Used to indicate that the mean is estimated without any closer
                              									consideration of its probability distribution. In this case, the
                              									meaning of the standard deviation is not crisply defined. However,
                              									interpretation should be along the lines of the normal distribution,
                              									e.g., the interval covered by the mean &plusmn;1 standard 
                              									deviation should be at the level of about two thirds confidence.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>U</td>
                           <td>uniform</td>
                           <td>
                              									The uniform distribution assigns a constant probability over the
                              									entire interval of possible outcomes, while all outcomes outside this
                              									interval are assumed to have zero probability. The width of this
                              									interval is 2 &#963; &#8730;3. Thus, the uniform distribution assigns
                              									the probability densities <em>f</em>(x) = (2 &#963; &#8730;3)<sup>-1</sup>
                              									to values &#956; - &#963; &#8730;3 &#8805; x &#8804; &#956; + &#963; &#8730;3 and <em>f</em>(x) = 0 otherwise.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>N</td>
                           <td>normal (Gaussian)</td>
                           <td>
                              									This is the well-known bell-shaped normal distribution. Because of the
                              									central limit theorem, the normal distribution is the distribution of
                              									choice for an unbounded random variable that is an outcome of a
                              									combination of many stochastic processes. Even for values bounded on a
                              									single side (i.e. greater than 0) the normal distribution may be
                              									accurate enough if the mean is "far away" from the bound of the scale
                              									measured in terms of standard deviations.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>LN</td>
                           <td>log-normal</td>
                           <td>
                              									The logarithmic normal distribution is used to transform skewed random
                              									variable X into a normally distributed random variable <em>U</em>
                              									= log <em>X</em>. The log-normal distribution can be specified
                              									with the properties mean &#956; and standard deviation &#963;. Note
                              									however that mean &#956; and standard deviation &#963; are the
                              									parameters of the raw value distribution, not the transformed
                              									parameters of the lognormal distribution that are conventionally
                              									referred to by the same letters. Those log-normal parameters &#956;<sub>
                                 									log</sub> and &#963;<sub>log</sub> relate to
                              									the mean &#956; and standard deviation &#963; of the data value through
                              									&#963;<sub>log</sub><sup>2</sup> = log
                              									(&#963;<sup>2</sup>/&#956;<sup>2</sup> + 1)
                              									and &#956;log = log &#956; - &#963;<sub>log</sub><sup>2</sup>/2.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>G</td>
                           <td>&#947; (gamma)</td>
                           <td>
                              									The gamma-distribution used for data that is skewed and bounded to the
                              									right, i.e. where the maximum of the distribution curve is located
                              									near the origin. The &#947;-distribution has two parameters &#945;
                              									and &#946;. The relationship to mean &#956; and variance &#963;<sup>2</sup> 
                              									is &#956; = &#945; &#946; and &#963;<sup>2</sup> = &#945; &#946;<sup>2</sup>.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>E</td>
                           <td>exponential</td>
                           <td>
                              									Used for data that describes extinction. The exponential distribution
                              									is a special form of &#947;-distribution where &#945; = 1, hence,
                              									the relationship to mean &#956; and variance &#963;<sup>2</sup> are &#956; = &#946; 
                              									and &#963;<sup>2</sup> = &#946;<sup>2</sup>.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>X2</td>
                           <td>&#967;</td>
                           <td>
                              									Used to describe the sum of squares of random variables that occurs
                              									when a variance is estimated (rather than presumed) from the
                              									sample. The only parameter of the &#967;<sup>2</sup>-distribution 
                              									is &#965;, so called the
                              									<em>number of degrees of freedom</em> (which is the number of
                              									independent parts in the sum). The &#967;<sup>2</sup>-distribution is 
                              									a special type of &#947;-distribution with parameter &#945; = &#965; /2 and &#946;
                              									= 2. Hence, &#956; = &#965; and &#963;<sup>2</sup> = 2 &#965;.
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>T</td>
                           <td>t (Student)</td>
                           <td>
                              									Used to describe the quotient of a normal random variable and the
                              									square root of a &#967;<sup>2</sup> random variable. The
                              									<em>t</em>-distribution has one parameter &#965;, the number of
                              									degrees of freedom. The relationship to mean &#956; and variance
                              									&#963;<sup>2</sup> are: &#956; = 0 and &#963;<sup>2</sup> 
                              									= &#965; / (&#965; - 2)
                              								
                           </td>
                        </tr>
                        <tr>
                           <td>F</td>
                           <td>F</td>
                           <td>
                              									Used to describe the quotient of two &#967;<sup>2</sup>
                              									random variables. The <em>F</em>-distribution has two parameters
                              									&#965;<sub>1</sub> and &#965;<sub>2</sub>, which are the
                              									numbers of degrees of freedom of
                              									the numerator and denominator variable respectively. The relationship
                              									to mean &#956; and variance &#963;<sup>2</sup> are: &#956; =
                              									&#965;<sub>2</sub> / (&#965;<sub>2</sub> - 2) and &#963;
                              									<sup>2</sup> = (2 &#965;<sub>2</sub> (&#965;<sub>
                                 									2</sub> + &#965;<sub>1</sub> - 2)) / (&#965;<sub>1</sub>
                              									(&#965;<sub>2</sub> - 2)<sup>2</sup>
                              									(&#965;<sub>2</sub> - 4)).
                              									
                           </td>
                        </tr>
                        <tr>
                           <td>B</td>
                           <td>&#946; (beta)</td>
                           <td>
                              									The beta-distribution is used for data that is bounded on both sides
                              									and may or may not be skewed (e.g., occurs when probabilities are
                              									estimated.)  Two parameters &#945; and &#946; are available to adjust
                              									the curve. The mean &#956; and variance &#963;<sup>2</sup>
                              									relate as follows: &#956; = &#945; / (&#945; + &#946;) and
                              									(&#963;<sup>2</sup> = &#945; &#946;/((&#945; +
                              									&#946;)<sup>2</sup> (&#945; + &#946; + 1)).
                              								
                           </td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        							The three distribution-types <em>unknown</em> (NULL),
                        							<em>uniform</em> and <em>normal</em> must be supported by
                        							every system that claims to support <em>PPD</em>. All other distribution
                        							types are optional. When a system interpreting a <em>PPD</em>
                        							representation encounters a distribution type that it does not
                        							recognize, it maps this type to the unknown (NULL) distribution-type.
                        						
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="prop-PPD.literal"></a>A.1.3 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Literal Form</h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        							 The general syntax of the literal form for <em>PPD</em> is as follows:
                        						
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%">
                        <tr>
                           <td class="dtdl"><pre><pre>
PPD&lt;T&gt;.literal ST {
   PPD&lt;T&gt;  : T "(" type QTY ")"  { ((T)$).equal($1);
                                   $.distributionType.equal($3);
                                   $.standardDeviation.equal($4); };
   CV type : ST                  { $.value.equal($1);
                                   $.codeSystem.equal(2.16.840.1.113883.5.1020); };
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        							Examples: an example for a <a class="termref" href="#dt-PPD_REAL">PPD&lt;REAL&gt;</a>
                        							is "1.23(N0.005)" for a normal <a class="termref" href="#prop-PPD.distributionType">distributionType</a>
                        							around 1.23 with a <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a> of 0.005.
                        							An example for a <a class="termref" href="#dt-PPD_PQ">PPD&lt;PQ&gt;</a> is "1.23 m (5 mm)" for
                        							an unknown <a class="termref" href="#prop-PPD.distributionType">distributionType</a> around the
                        							length 1.23 meter with a <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a>
                        							of 5 millimeter. An example for a <a class="termref" href="#dt-PPD_TS">PPD&lt;TS&gt;</a>
                        							is "2000041113(U4 h)" for a	uniform
                        							<a class="termref" href="#prop-PPD.distributionType">distributionType</a> around April 11, 2000
                        							at 1pm with <a class="termref" href="#prop-PPD.standardDeviation">standardDeviation</a> of 4 hours.
                        						
                     </p>
                  </td>
               </tr><a name="PPD<REAL&gt;"></a><tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h3><a name="dt-PPD_REAL"></a>A.2 
                     </h3>
                  </td>
                  <td class="body_col">
                     <h3>Probability Distribution over Real Numbers (PPD&lt;REAL&gt;) specializes <a class="termref" href="#dt-PPD">PPD</a></h3>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" id="dtdl-PPD_REAL">
                        <tr>
                           <td class="dtdl"><pre><a name="dtdl-PPD_REAL"></a><pre>
type ParametricProbabilityDistribution&lt;REAL&gt; alias PPD&lt;REAL&gt;;</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					The parametric probability distribution of real numbers is fully defined by
                        					the generic data type.
                        					However, there are some special considerations about literal representations
                        					and conversions of probability distributions over <a class="termref" href="#dt-REAL">REAL</a>s, which are
                        					specified in this section.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="section-%0A%09%09%09%09%09%09Converting-a-real-number-(REAL)-to-an-uncertain-real-number%0A%09%09%09%09%09%09(PPD<REAL&gt;)%0A%09%09%09%09%09"></a>A.2.1 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>
                        						Converting a real number (REAL) to an uncertain real number
                        						(PPD&lt;REAL&gt;)
                        					
                     </h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						When converting a <a class="termref" href="#dt-REAL">REAL</a> into a <a class="termref" href="#dt-PPD_REAL">PPD&lt;REAL&gt;</a>,
                        						<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> is calculated from the
                        						<a class="termref" href="#dt-REAL">REAL</a> value's order of magnitude and
                        						<a class="termref" href="#prop-REAL.precision">REAL.precision</a>
                        						(number of significant digits).
                        						Let <em>x</em> be a <a class="termref" href="#dt-REAL">REAL</a> with
                        						<a class="termref" href="#prop-REAL.precision">REAL.precision</a>&nbsp;<em>n</em>. We can
                        						determine the order of magnitude <em>e</em> of <em>x</em> as
                        						<em>e</em> = log10 |<em>x</em>| where <em>e</em> is rounded to
                        						the next integer that is closer to zero (special case: if <em>x</em>
                        						is zero, <em>e</em> is zero.)  The value of the least significant digit
                        						<em>l</em> is then <em>l</em> = 10<sup>e-n</sup>
                        						and the <a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> &#963; = <em>l</em> /
                        						<em>2</em>.
                        					
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" cellspacing="0" cellpadding="5" border="1" bordercolor="blue">
                        <caption><a name="PPD-standard-deviation-examples">&nbsp;</a>
                           			Table
                           			50: Examples of standard deviations computed from precision p and order of magnitude e
                        </caption>
                        <thead>
                           <tr>
                              <th colspan="1">Representation</th>
                              <th colspan="1">x</th>
                              <th colspan="1">e</th>
                              <th colspan="1">p</th>
                              <th colspan="1">e - p + 1</th>
                              <th colspan="1">l</th>
                              <th colspan="1">&#963;</th>
                           </tr>
                        </thead>
                        <tbody>
                           <tr>
                              <td colspan="1">0</td>
                              <td colspan="1">0</td>
                              <td colspan="1">(0)</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">1</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">2</td>
                              <td colspan="1">2</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">9</td>
                              <td colspan="1">9</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">10</td>
                              <td colspan="1">10</td>
                              <td colspan="1">1</td>
                              <td colspan="1">2</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">100</td>
                              <td colspan="1">100</td>
                              <td colspan="1">2</td>
                              <td colspan="1">3</td>
                              <td colspan="1">0</td>
                              <td colspan="1">1</td>
                              <td colspan="1">0.5</td>
                           </tr>
                           <tr>
                              <td colspan="1">1e+1</td>
                              <td colspan="1">10</td>
                              <td colspan="1">1</td>
                              <td colspan="1">1</td>
                              <td colspan="1">1</td>
                              <td colspan="1">10</td>
                              <td colspan="1">5</td>
                           </tr>
                           <tr>
                              <td colspan="1">1e+2</td>
                              <td colspan="1">100</td>
                              <td colspan="1">2</td>
                              <td colspan="1">1</td>
                              <td colspan="1">2</td>
                              <td colspan="1">100</td>
                              <td colspan="1">50</td>
                           </tr>
                           <tr>
                              <td colspan="1">10e+1</td>
                              <td colspan="1">100</td>
                              <td colspan="1">2</td>
                              <td colspan="1">2</td>
                              <td colspan="1">1</td>
                              <td colspan="1">10</td>
                              <td colspan="1">5</td>
                           </tr>
                           <tr>
                              <td colspan="1">1.1</td>
                              <td colspan="1">1.1</td>
                              <td colspan="1">0</td>
                              <td colspan="1">2</td>
                              <td colspan="1">-1</td>
                              <td colspan="1">0.1</td>
                              <td colspan="1">0.05</td>
                           </tr>
                           <tr>
                              <td colspan="1">10.1</td>
                              <td colspan="1">10.1</td>
                              <td colspan="1">1</td>
                              <td colspan="1">3</td>
                              <td colspan="1">-1</td>
                              <td colspan="1">0.1</td>
                              <td colspan="1">0.05</td>
                           </tr>
                           <tr>
                              <td colspan="1">1.1e+2</td>
                              <td colspan="1">110</td>
                              <td colspan="1">2</td>
                              <td colspan="1">2</td>
                              <td colspan="1">1</td>
                              <td colspan="1">10</td>
                              <td colspan="1">5</td>
                           </tr>
                           <tr>
                              <td colspan="1">1.1e-2</td>
                              <td colspan="1">0.011</td>
                              <td colspan="1">-2</td>
                              <td colspan="1">2</td>
                              <td colspan="1">-3</td>
                              <td colspan="1">0.001</td>
                              <td colspan="1">0.0005</td>
                           </tr>
                           <tr>
                              <td colspan="1">1.1e-4</td>
                              <td colspan="1">0.00011</td>
                              <td colspan="1">-4</td>
                              <td colspan="1">2</td>
                              <td colspan="1">-5</td>
                              <td colspan="1">0.00001</td>
                              <td colspan="1">0.000005</td>
                           </tr>
                           <tr>
                              <td colspan="1">10.1e-4</td>
                              <td colspan="1">0.00101</td>
                              <td colspan="1">-3</td>
                              <td colspan="1">3</td>
                              <td colspan="1">-5</td>
                              <td colspan="1">0.00001</td>
                              <td colspan="1">0.000005</td>
                           </tr>
                           <tr>
                              <td colspan="1">0.1e-1</td>
                              <td colspan="1">0.01</td>
                              <td colspan="1">-2</td>
                              <td colspan="1">1</td>
                              <td colspan="1">-2</td>
                              <td colspan="1">0.01</td>
                              <td colspan="1">0.005</td>
                           </tr>
                           <tr>
                              <td colspan="1">0.01e-1</td>
                              <td colspan="1">0.001</td>
                              <td colspan="1">-3</td>
                              <td colspan="1">1</td>
                              <td colspan="1">-3</td>
                              <td colspan="1">0.001</td>
                              <td colspan="1">0.0005</td>
                           </tr>
                           <tr>
                              <td colspan="1">0.01e-2</td>
                              <td colspan="1">0.0001</td>
                              <td colspan="1">-4</td>
                              <td colspan="1">1</td>
                              <td colspan="1">-4</td>
                              <td colspan="1">0.0001</td>
                              <td colspan="1">0.00005</td>
                           </tr>
                           <tr>
                              <td colspan="1">0.00</td>
                              <td colspan="1">0</td>
                              <td colspan="1">(0)</td>
                              <td colspan="1">3</td>
                              <td colspan="1">-2</td>
                              <td colspan="1">0.01</td>
                              <td colspan="1">0.005</td>
                           </tr>
                        </tbody>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="prop-PPD_REAL.literal"></a>A.2.2 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Concise Literal Form</h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						Besides the generic literal form of <em>PPD&lt;REAL&gt;</em>, a
                        						concise literal form is defined for <em>PPD&lt;REAL&gt;</em> over real
                        						numbers. This concise literal form is defined such that
                        						<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> can be expressed
                        						in terms of the least significant digit in the mantissa.
                        						This literal is defined as an extension of the <a class="termref" href="#dt-REAL">REAL</a> literal:
                        					
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%">
                        <tr>
                           <td class="dtdl"><pre><pre>
PPD&lt;REAL&gt;.literal ST {
   PPD&lt;REAL&gt; mantissa
           : REAL.mantissa "(" type QTY ")"  { ((T)$).equal($1);
                                                   $.distributionType.equal($3);
                                                   $.standardDeviation.equal($4); }
           | REAL.mantissa                   { $.equal($1);
                                               $.distributionType.equal($3);
                                               $.standardDeviation.equal(
                                                  $1.leastSignificantDigit.times(0.5)); };
   CS type : ST                              { $.value.equal($1);
                                               $.system.equal(2.16.840.1.113883.5.1019); };
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						Examples: "1.23e-3 (U5e-6)" is the uniform
                        						<a class="termref" href="#prop-PPD.distributionType">PPD.distributionType</a> around 1.23
                        						&times; 10<sup>-3</sup> with 5 &times; 10<sup>-6</sup>
                        						&nbsp;<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> in generic
                        						literal form. "1.230(U5)e-3" is the same value in
                        						concise literal form.
                        					
                     </p>
                  </td>
               </tr><a name="PPD<PQ&gt;"></a><tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h3><a name="dt-PPD_PQ"></a>A.3 
                     </h3>
                  </td>
                  <td class="body_col">
                     <h3>Parametric Probability Distributions over Physical  Quantities (PPD&lt;PQ&gt;) specializes <a class="termref" href="#dt-PPD">PPD</a></h3>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><em>PPD&lt;PQ&gt;</em> is constructed from <a class="termref" href="#dt-PPD">PPD</a>. However,
                        					recognizing that the <a class="termref" href="#prop-PQ.unit">PQ.unit</a> can be factored
                        					from the boundaries, we add additional semantics and a
                        					separate literal form. The additional view of a <em>PPD&lt;PQ&gt;</em>
                        					is a probability distribution over real numbers with one unit.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" id="dtdl-PPD_PQ">
                        <tr>
                           <td class="dtdl"><pre><a name="dtdl-PPD_PQ"></a><pre>
type ParametricProbabilityDistribution&lt;PQ&gt; alias PPD&lt;PQ&gt; {
   PPD&lt;REAL&gt; value;
   CS  unit;
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        					The unit applies to both mean and <a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a>.
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%">
                        <tr>
                           <td class="dtdl"><pre><pre>
invariant(PPD&lt;PQ&gt; x)
      where x.nonNull {
   x.value.nonNull;
   ((REAL)x.value).equal(((PQ)x).value);
   x.unit.equal(((PQ)x).unit);
   x.value.standardDeviation.equal(x.standardDeviation.value);
   x.standardDeviation.unit.equal(x.unit);
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="prop-PPD_PQ.literal"></a>A.3.1 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Concise Literal Form</h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						A concise literal form for <em>PPD&lt;PQ&gt;</em> is defined based on
                        						the concise literal form of <a class="termref" href="#dt-PPD_REAL">PPD&lt;REAL&gt;</a>
                        						where <a class="termref" href="#dt-REAL">REAL</a> is the value. This
                        						literal is defined as an extension of the <a class="termref" href="#dt-PQ">PQ</a> literal.
                        					
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%">
                        <tr>
                           <td class="dtdl"><pre><pre>
PPD&lt;PQ&gt;.literal ST {
   PPD&lt;PQ&gt; : PPD&lt;REAL&gt; " " unit  { $.value.equal($1);
                                   $.unit.equal($3); }
};</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						Examples: "1.23e-3 m (N5e-6 m)" is the normal-distributed length of
                        						1.23 &times; 10<sup>-3</sup> m with 5 &times; 10<sup>-6</sup> m
                        						<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> in generic literal
                        						form. "1.230(N5)e-3 m" is the same value in concise literal
                        						form. "1.23e-3(N0.005e-3) m " is also valid; it is the concise literal
                        						form for <em>PPD&lt;PQ&gt;</em> combined with the
                        						generic literal form for <a class="termref" href="#dt-PPD_REAL">PPD&lt;REAL&gt;</a>.
                        					
                     </p>
                  </td>
               </tr><a name="PPD<TS&gt;"></a><tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h3><a name="dt-PPD_TS"></a>A.4 
                     </h3>
                  </td>
                  <td class="body_col">
                     <h3>Probability Distribution over Time Points (PPD&lt;TS&gt;) specializes <a class="termref" href="#dt-PPD">PPD</a></h3>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap> &nbsp; </td>
                  <td class="number_col" nowrap>&nbsp; </td>
                  <td class="body_col">
                     <table width="90%" id="dtdl-PPD_TS">
                        <tr>
                           <td class="dtdl"><pre><a name="dtdl-PPD_TS"></a><pre>
type ParametricProbabilityDistribution&lt;TS&gt; alias PPD&lt;TS&gt;;</pre></pre></td>
                        </tr>
                     </table>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p><em>PPD&lt;TS&gt;</em> is fully defined by the generic data type.
                        					<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> is of type TS.diffType, which is a duration (a
                        					<a class="termref" href="#dt-PQ">PQ</a> in the dimension of time.)
                        				
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>
                     <h4><a name="section-Converting-TS-to-PPD<TS&gt;"></a>A.4.1 
                     </h4>
                  </td>
                  <td class="body_col">
                     <h4>Converting <a class="termref" href="#dt-TS">TS</a> to <em>PPD&lt;TS&gt;</em></h4>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						When converting a <a class="termref" href="#dt-TS">TS</a> into a <em>PPD&lt;TS&gt;</em>,
                        						<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> is
                        						calculated from the <a class="termref" href="#dt-TS">TS</a> value's order of magnitude
                        						and precision (number of significant digits) such that two
                        						<a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a>s span the maximal time range of the digits not
                        						specified. For example, in 20000609 the unspecified digits are hour of
                        						the day and lower. All these digits together span a duration of 24
                        						hours, and thus, <a class="termref" href="#prop-PPD.standardDeviation">PPD.standardDeviation</a> ( is( = 12 h from
                        						20000609000000.0000... up to 20000609999999.9999... (= 20000610)
                        					
                     </p>
                  </td>
               </tr>
               <tr>
                  <td class="graphic_col" nowrap>&nbsp;</td>
                  <td class="number_col" nowrap>&nbsp;</td>
                  <td class="body_col">
                     <p>
                        						This rule is different from that specified for <a class="termref" href="#dt-REAL">REAL</a>
                        						in that the range of uncertainty lies 
                        						above the time value specified. This is to go with the common sense judgment 
                        						that June 9th spans all day of June 9th with noon as the center, not midnight.
                        					
                     </p>
                  </td>
               </tr>
            </td>
         </tr>
         <tr>
            <td class="graphic_col" nowrap> &nbsp; </td>
            <td class="number_col" nowrap>&nbsp; </td>
            <td class="body_col">
               <h2>Endnotes</h2>
               <ol>
                  <li><a name="fn1"></a>
                     							[<a href="#fn-src1">source</a>]
                     							
                     							The HL7 Message Development Framework defines "update modes" for
                     							fields in a message. Note that because data values have neither
                     							identity nor state nor changing of state, these update modes do not
                     							apply for the properties of data values. Data values and their
                     							properties are never updated. A field of an object (e.g., a message)
                     							can be updated in which case the field's value is replaced by another
                     							value. But the value itself is never updated.
                     						
                  </li>
                  <li><a name="fn2"></a>
                     							[<a href="#fn-src2">source</a>]
                     							
                     							This is the reason why the ISO Abstract Syntax Notation 1 (ASN.1) is
                     							not an appropriate formalism for semantic data type specifications.
                     						
                  </li>
                  <li><a name="fn3"></a>
                     							[<a href="#fn-src3">source</a>]
                     							
                     							The data type definition language employed here is a conclusion of
                     							experiments and experience with various alternatives. These
                     							alternatives include data type definition tables and the use of the
                     							Object Management Group's (OMG) Interface Definition Language
                     							(IDL). The disadvantage of the data type definition tables was that
                     							they gave the wrong impression of this specification being a
                     							specification of abstract syntax rather than semantics. Conversely,
                     							the disadvantage with IDL was that IDL gave the wrong impression of
                     							this specification being an application programming interface (API)
                     							definition.
                     						
                     <p>
                        							The resulting data type definition language borrows significantly from
                        							IDL, the Object Constraint Language (OCL), JAVA, C++, and the parser
                        							generation tools LEX and YACC. It is inspired by features and style of
                        							these languages but amalgamating and augmenting these languages into
                        							precisely what is needed for this data type specification. The goal
                        							was a language that is minimal, and self-consistent. Also, as the main
                        							purpose of this language is to define data types it tries to get by
                        							without any built-in data types.
                        						
                     </p>
                  </li>
                  <li><a name="fn4"></a>
                     							[<a href="#fn-src4">source</a>]
                     							
                     								As can be seen, the type keyword is in place of IDL's and Java's interface and
                     								C++ amd Java's class keyword. The alias clause is unique to this specification
                     								as we do have the need for extremely short data type mnemonics in addition to
                     								more descriptive names. The specializes clause is
                     								preferred over C++ or IDL's colon clause as its meaning is more obvious.
                     							
                  </li>
                  <li><a name="fn5"></a>
                     							[<a href="#fn-src5">source</a>]
                     							
                     								Note that the IDL's notion of input and output arguments and IDL's,
                     								JAVA's and C++'s notion of return values and exceptions are all
                     								irrelevant concepts for this specification. The semantics of data
                     								types is not about procedure calls and parameter passing or normal and
                     								abnormal returns of control from a procedure body. Instead, each
                     								semantic property is conceptualized as a function that maps a value
                     								and optional arguments to another value. This mapping is not
                     								"computed" or "generated", it logically exists and we do not need to
                     								"call" such a function to actualize the mapping.
                     							
                  </li>
                  <li><a name="fn6"></a>
                     							[<a href="#fn-src6">source</a>]
                     							
                     								The restriction aspect of specialization deserves explanation. It is
                     								generally touted that inheritance should not retract properties that
                     								have been defined for the genus. This is still true for the
                     								restriction as properties are not actually retracted but constrained
                     								to a smaller value set. This may mean constraining properties to NULL,
                     								if NULL was an allowed value for that property in the parent type. In
                     								any case, logically, restriction is a specialization, with inheritance
                     								and substitutability.
                     							
                  </li>
                  <li><a name="fn7"></a>
                     							[<a href="#fn-src7">source</a>]
                     							
                     								Note the meaning of protected is a little different from the
                     								accessibility qualifiers (public, package, protected, private) as
                     								known from JAVA and C++. The protection used here is not about hiding
                     								the type information or barring properties defined by a protected type
                     								from access outside of this specification "package."  It mainly is a
                     								strong recommendation not to declare attributes or other features of
                     								such protected types. Protected types should be used as "wrapped" in
                     								other types. The protected type is still directly accessible within
                     								the "wrap," no notion of "delegated properties" exists.
                     							
                  </li>
                  <li><a name="fn8"></a>
                     							[<a href="#fn-src8">source</a>]
                     							
                     								The invariant statement syntax and semantics is similar to the OCL
                     								"inv" clause. However, we did not use OCL in this specification for
                     								several reasons. (1) OCL syntax has a Smalltalk style that does not
                     								fit the C++/Java style of the data type definition language. (2) OCL
                     								has many primitive constructs and data types, while this specification
                     								avoids primitives as much as possible. (3) In part because of the
                     								richness in primitive constructs, OCL is fairly complex, more than is
                     								needed in this specification.
                     							
                  </li>
                  <li><a name="fn9"></a>
                     							[<a href="#fn-src9">source</a>]
                     							
                     									This construct is somewhat cyclical; there is a preexisting notion of
                     									Boolean values even though the Boolean is a type defined just like any
                     									other type. In addition, since this data type definition language is
                     									written in character strings, the notion of character strings
                     									pre-exists the definition of the character string type. These two
                     									types, character string and Boolean are therefore exceptional, but on
                     									the surface, they are defined just like any other data type. Since
                     									this data type specification language is not meant to be implemented,
                     									the cyclicality is not a real issue. Even if this language was
                     									implemented, one can use a "bootstrapping" technique as is common,
                     									e.g., for compilers that compile themselves.
                     								
                  </li>
                  <li><a name="fn10"></a>
                     							[<a href="#fn-src10">source</a>]
                     							
                     									Most of these syntactic features are in the spirit of the JAVA
                     									language, use of argument lists, curly braces to enclose blocks,
                     									semicolon to finish a statement, and the period to reference value
                     									properties. The double colon :: as used by C++ or IDL to distinguish
                     									between member-references and value-references are not used (as in
                     									Java). Unlike Java but like C++ and IDL, every statement is ended by a
                     									semicolon, including type declarations. Implicit type conversion is
                     									also retained from C++.
                     								
                  </li>
                  <li><a name="fn11"></a>
                     							[<a href="#fn-src11">source</a>]
                     							
                     								This means that if a one expects an <a class="termref" href="#dt-ED">ED</a> value but
                     								actually has an <a class="termref" href="#dt-ST">ST</a> value instead, one can turn the
                     								<a class="termref" href="#dt-ST">ST</a> value into an <a class="termref" href="#dt-ED">ED</a>.
                     							
                  </li>
                  <li><a name="fn12"></a>
                     							[<a href="#fn-src12">source</a>]
                     							
                     								The different grammars of literals are not meant to be combined into
                     								one overall HL7 value expression grammar. Although attempt have been
                     								made to resolve potential ambiguities between the literals of
                     								different types where they would be harmful, some of these ambiguities
                     								still remain. For example "1.2" can be a valid literal for both Object
                     								Identifier (<a class="termref" href="#dt-OID">OID</a>) and a Real Number.
                     							
                  </li>
                  <li><a name="fn13"></a>
                     							[<a href="#fn-src13">source</a>]
                     							
                     									The BNF variant used here is similar to the YACC parser and LEX lexical
                     									analyzer generator languages but is simplified and made consistent to the 
                     									syntax and declarative style of this data type definition language. The 
                     									differences are that all symbols have exactly one attribute, their value 
                     									strongly typed as one of the defined data types. Each symbol's type is 
                     									declared in front of the symbol's definition (e.g.: INT digit : "0" | "1" | 
                     									... | "9";). The start symbol has no name but just a type (e.g., INT : digit |
                     									INT digit;). A data type name can occur as a symbol name meaning a literal of 
                     									that data type.
                     								
                  </li>
                  <li><a name="fn14"></a>
                     							[<a href="#fn-src14">source</a>]
                     							
                     								Note that the equal property (defined for all data types, see
                     								<a class="termref" href="#prop-ANY.equal">equal</a>) is a relation, a test for equality, not an 
                     								assignment statement. One can not assign a value to another value. Unlike YACC
                     								and LEX analyzers, this data type definition language is purely
                     								declarative it has no concept of assignment. For this reason, the
                     								grammar rules define both parsing and building literal expressions.
                     							
                  </li>
                  <li><a name="fn15"></a>
                     							[<a href="#fn-src15">source</a>]
                     							
                     									Generic type extensions are sometimes called "mixins", since their
                     									effect is to mix certain properties into the preexisting data type.
                     								
                  </li>
                  <li><a name="fn16"></a>
                     							[<a href="#fn-src16">source</a>]
                     							
                     								The cryptographically strong checksum algorithm Secure Hash
                     								Algorithm-1 (SHA-1) is currently the industry standard. It has
                     								superseded the MD5 algorithm only a couple of years ago, when certain
                     								flaws in the security of MD5 were discovered. Currently the SHA-1 hash
                     								algorithm is the default choice for the integrity check algorithm.
                     								Note that SHA-256 is also entering widespread usage.
                     							
                  </li>
                  <li><a name="fn17"></a>
                     							[<a href="#fn-src17">source</a>]
                     							
                     								RFC 3066 [<a href="http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3066.txt</a>] is
                     								the HL7-approved coding system for all reference to human languages,
                     								in data types and elsewhere.
                     							
                  </li>
                  <li><a name="fn18"></a>
                     							[<a href="#fn-src18">source</a>]
                     							
                     								For this reason, a system or site that does not deal with multilingual
                     								text or names in the real world can safely ignore the language
                     								property.
                     							
                  </li>
                  <li><a name="fn19"></a>
                     							[<a href="#fn-src19">source</a>]
                     							
                     								The cryptographically strong checksum algorithm Secure Hash
                     								Algorithm-1 (SHA-1) is currently the industry standard. It has
                     								superseded the MD5 algorithm only a couple of years ago, when certain
                     								flaws in the security of MD5 were discovered. Currently the SHA-1 hash
                     								algorithm is the default choice for the integrity check algorithm.
                     								Note that SHA-256 is also entering widespread usage.
                     							
                  </li>
                  <li><a name="fn20"></a>
                     							[<a href="#fn-src20">source</a>]
                     							
                     							ISO/IEC 10646-1: 1993 defines a character as "A member of a set of
                     							elements used for the organization, control, or representation of
                     							data."  ISO/IEC TR 15285 - An operational model for characters and
                     							glyphs. Discusses the problems involved in defining
                     							characters. Notably, characters are abstract entities of information,
                     							independent of type font or language. The ISO 10646 (UNICODE
                     							[http://www.unicode.org]) - or in Japan, JIS X0221 - is a globally
                     							applicable character set that uniquely identifies all characters of
                     							any language in the world.
                     						
                     <p>
                        							In this specification, ISO 10646 serves as a semantic model for
                        							character strings. The important point is that for semantic purposes,
                        							there is no notion of separate character sets and switching between
                        							character sets. Character set and character encoding are ITS layer
                        							considerations. The formal definition gives indication to this effect
                        							because each character is by itself an <em>ST</em> value that
                        							has a charset property. Thus, the binary encoding of each character is
                        							always understood in the context of a certain character set. This does
                        							not mean that the ITS should represent a character string as a
                        							sequence of full blown <a class="termref" href="#dt-ED">ED</a> values. What it means is that
                        							on the application layer the notion of character encoding is
                        							irrelevant when we deal with character strings.
                        						
                     </p>
                  </li>
                  <li><a name="fn21"></a>
                     							[<a href="#fn-src21">source</a>]
                     							
                     								RFC 3066 [<a href="http://www.ietf.org/rfc/rfc3066.txt">http://www.ietf.org/rfc/rfc3066.txt</a>] is
                     								the HL7-approved coding system for all reference to human languages,
                     								in data types and elsewhere.
                     							
                  </li>
                  <li><a name="fn22"></a>
                     							[<a href="#fn-src22">source</a>]
                     							
                     								For this reason, a system or site that does not deal with multilingual
                     								text or names in the real world can safely ignore the language
                     								property.
                     							
                  </li>
                  <li><a name="fn23"></a>
                     							[<a href="#fn-src23">source</a>]
                     							
                     								An <em>ST</em> literal is a conversion from a character string to
                     								another data type. Obviously, <em>ST</em> literals for character
                     								strings is a cyclical if not redundant feature. This literal form,
                     								therefore, mainly specifies how character strings are parsed in the
                     								data type specification language.
                     							
                  </li>
                  <li><a name="fn24"></a>
                     							[<a href="#fn-src24">source</a>]
                     							
                     							The advantage of the <em>CD</em> data type is its expressiveness,
                     							however, if all of its features, such as coding exceptions, text, translations 
                     							and qualifiers are used at all times, implementation and use become very 
                     							difficult and unsafe. Therefore, <em>CD</em> is most often
                     							used in a restricted form with reduced features.
                     						
                  </li>
                  <li><a name="fn25"></a>
                     							[<a href="#fn-src25">source</a>]
                     							<a class="termref" href="#prop-CD.codeSystemVersion">codeSystemVersion</a> does not count in the equality test since by
                     								definition a code symbol must have the same meaning throughout all
                     								versions of a code system. Between versions, codes may be retired but
                     								not withdrawn or reused.
                     							
                  </li>
                  <li><a name="fn26"></a>
                     							[<a href="#fn-src26">source</a>]
                     							
                     								Translations are not included in the equality test of concept
                     								descriptors for safety reasons. An alternative would have been to
                     								consider two <em>CD</em> values equal if any of their
                     								translations are equal. However, some translations may be equal
                     								because the coding system of that translation is very
                     								coarse-grained. More sophisticated comparisons between concept
                     								descriptors are application considerations that are not covered by
                     								this specification.
                     							
                  </li>
                  <li><a name="fn27"></a>
                     							[<a href="#fn-src27">source</a>]
                     							
                     								NULL-values are exceptional values, not proper concepts. It would be unsafe to 
                     								equate two values merely on the basis that both are exceptional (e.g., not 
                     								codable or unknown.)  Likewise there is no guarantee that original text
                     								represents a meaningful or unique description of the concept so that equality 
                     								of that original text does not constitute concept equality. The reverse is 
                     								also true: since there is more than one possible original text for a concept, 
                     								the fact that original text differs does not constitute a difference of the 
                     								concepts.
                     							
                  </li>
                  <li><a name="fn28"></a>
                     							[<a href="#fn-src28">source</a>]
                     							
                     								This ruling at design-time is necessary to prevent HL7 interfaces from
                     								being burdened by code literal style conversions at runtime. This is
                     								notwithstanding the fact that some applications may require mapping
                     								from one form into another if that application has settled with the
                     								representation option that was not chosen by HL7.
                     							
                  </li>
                  <li><a name="fn29"></a>
                     							[<a href="#fn-src29">source</a>]
                     							
                     								This is one reason why <a class="termref" href="#prop-CD.qualifier">qualifier</a> is to
                     								be used sparingly for post-coordination and with caution. An additional problem of
                     								post-coordinated coding is that a general rule for equality may not
                     								exist at all.
                     							
                  </li>
                  <li><a name="fn30"></a>
                     							[<a href="#fn-src30">source</a>]
                     							
                     							This is not withstanding the fact that an external referenced domain,
                     							such as the IETF MIME media type may include an extension
                     							mechanism. These extended MIME type codes would not be considered
                     							"extensions" in the sense of violating the CNE provision. The CNE
                     							provision is only violated if an attempt is made in using a different
                     							code system (by means of <a class="termref" href="#prop-CD.codeSystem">CD.codeSystem</a>), which is not
                     							possible with <em>CS</em>.
                     						
                  </li>
                  <li><a name="fn31"></a>
                     							[<a href="#fn-src31">source</a>]
                     							
                     							The value/namespace view on ISO object identifiers has important
                     							semantic relevance. It represents the notion of identifier value
                     							versus identifier assigning authority (= namespace), which is common
                     							in healthcare information systems in general, and HL7 v2.x in
                     							particular.
                     						
                  </li>
                  <li><a name="fn32"></a>
                     							[<a href="#fn-src32">source</a>]
                     							
                     								DICOM objects are identified by UID only. For the purpose of DICOM/HL7
                     								integration, it would be awkward if HL7 required the extension to be
                     								mandatory and to consider the UID only as an assigning
                     								authority. Since UID values are simpler and do not contain the risks
                     								of containing meaningless decoration, we do encourage systems to use
                     								simple UID identifiers as external references to their objects.
                     							
                  </li>
                  <li><a name="fn33"></a>
                     							[<a href="#fn-src33">source</a>]
                     							
                     								This ruling at design-time is necessary to prevent HL7 interfaces from
                     								being burdened by identifier literal style conversions at
                     								runtime. This is notwithstanding the fact that some applications may
                     								require mapping from one form into another if that application has
                     								settled with the representation option that was not chosen by HL7.
                     							
                     <p>
                        								From practical experience it is recommended that II.extensions as
                        								an alphanumeric identifier not contain leading zero digits (if any
                        								zeroes at all), for these are often erroneously stripped. "000123"
                        								and "123" would be different extension values, but this is prone
                        								to be misunderstood, leading to false non-matches and duplicate
                        								record entries. However applications should maintain any leading zero
                        								digits encountered in II extensions. Leading zero digits are
                        								prohibited in <a class="termref" href="#dt-OID">OID</a>'s, but may occur in <a class="termref" href="#dt-UUID">UUID</a>'s,
                        								where they must be maintained.
                        							
                     </p>
                     <p>
                        								There is no separate check digit property. Check digits are used
                        								for human purpose and work best if kept completely transparent.
                        								II.extensions MAY contain check digits anywhere, and the
                        								particular check digit scheme (if any) would be implied by the
                        								II.root. However, a separate check digit property is intentionally
                        								not recognized by this specification.
                        							
                     </p>
                  </li>
                  <li><a name="fn34"></a>
                     							[<a href="#fn-src34">source</a>]
                     							
                     								The data type of the <em>scheme</em> is still <a class="termref" href="#dt-CS">CS</a> and for
                     								HL7 purposes, the <em>scheme</em> is a CNE domain. This appears to be
                     								at odds with the fact that there is no one official list of URL
                     								schemes, and so many URL schemes in use may be defined locally.
                     								However, we cannot allow extension of the <a class="termref" href="#dt-URL">URL</a> scheme
                     								using the HL7 mechanism of local alternative code systems, which is
                     								why technically the <em>scheme</em> is a <a class="termref" href="#dt-CS">CS</a> data type.
                     							
                  </li>
                  <li><a name="fn35"></a>
                     							[<a href="#fn-src35">source</a>]
                     							
                     								Remember that semantic properties are bare of all control flow
                     								semantics. The <a class="termref" href="#prop-AD.formatted">formatted</a> could be implemented
                     								as a "procedure" that would "return" the formatted address, but it
                     								would not usually be a variable to which one could assign a formatted
                     								address. However, HL7 does not define applications but only the
                     								semantics of exchanged data values. Hence, the semantic model
                     								abstracts from concepts like "procedure", "return", and "assignment"
                     								but speaks only of property and value.
                     							
                  </li>
                  <li><a name="fn36"></a>
                     							[<a href="#fn-src36">source</a>]
                     							
                     								Remember that semantic properties are bare of all control flow
                     								semantics. The <a class="termref" href="#prop-AD.formatted">formatted</a> could be implemented
                     								as a "procedure" that would "return" the formatted address, but it
                     								would not usually be a variable to which one could assign a formatted
                     								address. However, HL7 does not define applications but only the
                     								semantics of exchanged data values. Hence, the semantic model
                     								abstracts from concepts like "procedure", "return", and "assignment"
                     								but speaks only of property and value.
                     							
                  </li>
                  <li><a name="fn37"></a>
                     							[<a href="#fn-src37">source</a>]
                     							
                     								These rules for formatting addresses are part of the semantics of
                     								addresses because addresses are primarily defined as text displayed or
                     								printed and consumed by humans. Other uses (e.g., epidemiology) are
                     								secondary &#8212; although not forbidden, the AD
                     								data type might not serve these other use cases very well, and HL7
                     								defines better ways to handle these use cases. Note that these
                     								formatting rules are not ITS issues, since this formatting applies
                     								to presentations for humans whereas ITS specifications are
                     								presentations for computer interchange.
                     							
                  </li>
                  <li><a name="fn38"></a>
                     							[<a href="#fn-src38">source</a>]
                     							
                     								The XML encoding shown here is according to the XML ITS only in order
                     								to avoid introducing another instance notation. This does not imply
                     								that the function would only work in XML, nor even that XML is the
                     								preferred representation.
                     							
                  </li>
                  <li><a name="fn39"></a>
                     							[<a href="#fn-src39">source</a>]
                     							
                     								This example shows the strength of the mark-up approach to
                     								addresses. A typical German system that stores house number and street
                     								name in separate fields would print the address with street name first
                     								followed by the house number. For U.S. addresses, this would be wrong
                     								as the house number in the U.S. is written before the street name. The
                     								marked-up address allows keeping the natural order of address parts
                     								and still understanding their role.
                     							
                  </li>
                  <li><a name="fn40"></a>
                     							[<a href="#fn-src40">source</a>]
                     							
                     								Remember that semantic properties are bare of all control flow
                     								semantics. The <a class="termref" href="#prop-EN.formatted">formatted</a> could be implemented
                     								as a "procedure" that would "return" the formatted name, but it would
                     								not usually be a variable to which one could assign a formatted
                     								name. However, HL7 does not define applications but only the semantics
                     								of exchanged data values. Hence, the semantic model abstracts from
                     								concepts like "procedure", "return", and "assignment" but speaks only
                     								of property and value.
                     							
                  </li>
                  <li><a name="fn41"></a>
                     							[<a href="#fn-src41">source</a>]
                     							
                     								Remember that semantic properties are bare of all control flow
                     								semantics. The <a class="termref" href="#prop-EN.formatted">formatted</a> could be implemented
                     								as a "procedure" that would "return" the formatted name, but it would
                     								not usually be a variable to which one could assign a formatted
                     								name. However, HL7 does not define applications but only the semantics
                     								of exchanged data values. Hence, the semantic model abstracts from
                     								concepts like "procedure", "return", and "assignment" but speaks only
                     								of property and value.
                     							
                  </li>
                  <li><a name="fn42"></a>
                     							[<a href="#fn-src42">source</a>]
                     							
                     								These rules for formatting names are part of the semantics of names
                     								because the name parts have been designed with the important use case
                     								of displaying and rendering on labels. Note that these formatting
                     								rules are not ITS issues, since this formatting applies to
                     								presentations for humans whereas ITS specifications are presentations
                     								for computer interchange.
                     							
                  </li>
                  <li><a name="fn43"></a>
                     							[<a href="#fn-src43">source</a>]
                     							
                     								The quantity data type abstraction corresponds to the notion of
                     								difference scales in contrast to ordinal scales and ratio scales
                     								(Guttman and Stevens). A data type with only the order requirement but
                     								not the difference requirement would be an ordinal. Ordinals are not
                     								currently defined with a special data type. Instead, ordinals are
                     								usually coded values, where the underlying code system specifies
                     								ordinal semantics. This ordinal semantics, however, is not reflected
                     								in the HL7 data type semantics at this time.
                     							
                  </li>
                  <li><a name="fn44"></a>
                     							[<a href="#fn-src44">source</a>]
                     							
                     							H. Grassman. <em>Lehrbuch der Arithmetik.</em> 1861. We prefer
                     							Grassman's original axioms to the Peano axioms, because Grassman's
                     							axioms work for all integers, not just for natural numbers. Also, "it
                     							is rather well-known, through Peano's own acknowledgment, that Peano
                     							borrowed his axioms from Dedekind and made extensive use of
                     							Grassmann's work in his development of the axioms." (Hao Wang. The
                     							Axiomatization of Arithmetic. J. Symb. Logic; 1957:22(2); p. 145.)
                     						
                  </li>
                  <li><a name="fn45"></a>
                     							[<a href="#fn-src45">source</a>]
                     							
                     							The term "Real" for a fractional number data type originates and is
                     							well established in the Algol, Pascal tradition of programming
                     							languages.
                     						
                  </li>
                  <li><a name="fn46"></a>
                     							[<a href="#fn-src46">source</a>]
                     							
                     							Imagine a special clock that measures those cycles, where the pointers
                     							are not all stacked on a common axis but each pointer is attached to
                     							the end of the pointer measuring the next larger cycle.
                     						
                  </li>
                  <li><a name="fn47"></a>
                     							[<a href="#fn-src47">source</a>]
                     							 
                     							At present, the CalendarCycle properties sum and value are not
                     							formally defined. The computation of calendar digits involves some
                     							complex computation which to specify here would be hard to understand
                     							and evaluate for correctness. Unfortunately, no standard exists that
                     							would formally define the relationship between calendar expressions
                     							and elapsed time since an epoch. ASN.1, the XML Schema Data Type
                     							specification and SQL92 all refer to ISO 8601, however, ISO 8601 does
                     							only specify the syntax of Gregorian calendar expressions, but not
                     							their semantics. In this standard, we define the syntax and semantics
                     							formally, however, we presume the semantics of the sum-, and
                     							value-properties to be defined elsewhere.  
                     						
                  </li>
                  <li><a name="fn48"></a>
                     							[<a href="#fn-src48">source</a>]
                     							
                     									At this time, no other calendars than the Gregorian calendar are
                     									defined. However, the notion of a calendar as an arbitrary convention
                     									to specify absolute time is important to properly define the semantics
                     									of time and time-related data types. Furthermore, other calendars
                     									might be supported when needed to facilitate HL7's use in other
                     									cultures.
                     								
                  </li>
                  <li><a name="fn49"></a>
                     							[<a href="#fn-src49">source</a>]
                     							
                     				In some programming languages, "collection types" are understood as
                     				containers of individually enumerated data items, and thus, an
                     				interval (low - high) would not be considered a collection. Such
                     				narrow interpretation of "collection" however is heavily
                     				representation/implementation dependent. From a data type semantics
                     				viewpoint, it doesn't matter whether an element of a collection "is
                     				actually contained in the collection" or not. There is no need for all
                     				elements in a collection to be individually enumerated.
                     					
                  </li>
                  <li><a name="fn50"></a>
                     							[<a href="#fn-src50">source</a>]
                     							
                     								Note the difference to the <a class="termref" href="#dt-GTS">GTS</a>. The <a class="termref" href="#dt-GTS">GTS</a> is
                     								a generator for a <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt; not for a
                     								<a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;.  A sequence of discrete
                     								values from a continuous domain makes not much sense other than in sampling
                     								applications. The <a class="termref" href="#dt-SET">SET</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;, however,
                     								can be thought of as a sequence of <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>, which still is different from a
                     								<a class="termref" href="#dt-LIST">LIST</a>&lt;<a class="termref" href="#dt-TS">TS</a>&gt;.
                     							
                  </li>
                  <li><a name="fn51"></a>
                     							[<a href="#fn-src51">source</a>]
                     							
                     									The presence of so many options deserves explanation. In principle,
                     									the interval form together with the width-only form would be
                     									sufficient. However, the interval form is felt alien to many in the
                     									field of medical informatics. One important purpose of the literal
                     									forms is to eradicate non-compliance through making compliance easy,
                     									without compromising on the soundness of the concepts.
                     								
                     <p>
                        									Furthermore, the different literal forms all have strength and
                        									weaknesses. The interval and center-width forms' strength is that they
                        									are most exact, showing closed and open boundaries. The interval
                        									form's weakness, however, is that infinite boundaries require special
                        									symbols for infinities, not necessary in the "comparator" form. The
                        									center-width form cannot specify intervals with an infinite boundary
                        									at all. The "comparator" form, however, can only represent
                        									single-bounded intervals (i.e., where the other boundary is infinite
                        									or unknown.)  The dash form, while being the weakest of all, is the
                        									most intuitive form for double bounded intervals.
                        								
                     </p>
                  </li>
                  <li><a name="fn52"></a>
                     							[<a href="#fn-src52">source</a>]
                     							
                     									This statement seems to directly contradict the ruling about the
                     									promotion of <a class="termref" href="#dt-TS">TS</a> to <a class="termref" href="#dt-IVL_TS">IVL&lt;TS&gt;</a>.
                     									However, there is no contradiction. The
                     									precision of a boundary does not have any relevance, but the precision
                     									of a simple timestamp (not as an interval boundary) is relevant, when that
                     									timestamp is promoted to an interval.
                     								
                  </li>
                  <li><a name="fn53"></a>
                     							[<a href="#fn-src53">source</a>]
                     							
                     								The hull form may appear superfluous for the simple interval all by
                     								itself. However, the hull form will become important for the periodic
                     								interval notation as it shortens the notation and (perhaps arguably)
                     								makes the notation of more complex timing structures more intuitive.
                     							
                  </li>
                  <li><a name="fn54"></a>
                     							[<a href="#fn-src54">source</a>]
                     							
                     							This specification
                     							imposes a self-restraint upon itself to allow existing systems a
                     							graceful transition. However, the formal specification keeps the
                     							generic type extensions as substitutable for their base types. This
                     							self-restraint may be omitted in the future. New implementations are
                     							advised to accommodate some generalizable support for these generic
                     							data type extensions.
                     						
                  </li>
                  <li><a name="fn55"></a>
                     							[<a href="#fn-src55">source</a>]
                     							
                     							Note that data types are specifications of abstract properties of
                     							values. This specification does not mandate how these values are
                     							represented in an ITS or implemented in an application. Specifically,
                     							it does not mandate how the represented components are named or
                     							positioned. In addition, the semantic generalization hierarchy may be
                     							different from a class hierarchy chosen for implementation (if the
                     							implementation technology has inheritance.)  Keep the distinction
                     							between a type (interface) and an implementation (concrete data
                     							structure, class) in mind. The ITS must contain a mapping of ITS
                     							defined features of any data type to the semantic properties defined
                     							here.
                     						
                  </li>
                  <li><a name="fn56"></a>
                     							[<a href="#fn-src56">source</a>]
                     							<em>GTS</em> is an example of a data type that is only defined
                     							algebraically without giving any definition of a data structure that
                     							might implement the behavior of such a data type. The algebraic
                     							definition looks extremely simple, so that one might assume it is
                     							incomplete. Since at this point we are relying entirely on the literal
                     							form to represent <em>GTS</em> values, all the definition of data structur
                     						
                  </li>
                  <li><a name="fn57"></a>
                     							[<a href="#fn-src57">source</a>]
                     							
                     								The interleaves property may appear overly constrained. However, these
                     								constraints are reasonable for the use case for which the interleaves
                     								and periodic hull properties are defined. To safely and predictably
                     								combine two schedules one would want to know which of the operands
                     								sets the start points and which sets the endpoints of the periodic
                     								hull's occurrence intervals.
                     							
                  </li>
                  <li><a name="fn58"></a>
                     							[<a href="#fn-src58">source</a>]
                     							
                     								This literal specification again looks surprisingly simple, so one
                     								might assume it is incomplete. However, the <em>GTS</em>
                     								literal is based on the <a class="termref" href="#dt-TS">TS</a>, <a class="termref" href="#dt-IVL">IVL</a>,
                     								<a class="termref" href="#dt-PIVL">PIVL</a>, and <a class="termref" href="#dt-EIVL">EIVL</a> literals
                     								and also implies the
                     								literals for the extensions of <a class="termref" href="#dt-TS">TS</a>, notably the
                     								<a class="termref" href="#dt-PPD_TS">PPD&lt;TS&gt;</a>. The <em>GTS</em> literal 
                     								specification itself only needs to tie the other literal
                     								forms together, which is indeed a fairly simple task by itself.
                     							
                  </li>
               </ol>
            </td>
         </tr>
      </table>
   </body>
</html>